
SmartBlindsF0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071c8  080071c8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080071c8  080071c8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071c8  080071c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071c8  080071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001dc  080073ac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  080073ac  000203d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b31b  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f2f  00000000  00000000  0002b51f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c8  00000000  00000000  0002d450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006d0  00000000  00000000  0002dc18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f4ab  00000000  00000000  0002e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b47  00000000  00000000  0003d793  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00051a26  00000000  00000000  000462da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00097d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f70  00000000  00000000  00097d7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d08 	.word	0x08006d08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08006d08 	.word	0x08006d08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c08      	adds	r0, r1, #0
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 f9bb 	bl	8000778 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 f93d 	bl	800068c <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 f9ad 	bl	8000778 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 f9a3 	bl	8000778 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 f94b 	bl	80006dc <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 f941 	bl	80006dc <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fdiv>:
 8000468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046a:	4657      	mov	r7, sl
 800046c:	464e      	mov	r6, r9
 800046e:	4645      	mov	r5, r8
 8000470:	46de      	mov	lr, fp
 8000472:	0244      	lsls	r4, r0, #9
 8000474:	b5e0      	push	{r5, r6, r7, lr}
 8000476:	0046      	lsls	r6, r0, #1
 8000478:	4688      	mov	r8, r1
 800047a:	0a64      	lsrs	r4, r4, #9
 800047c:	0e36      	lsrs	r6, r6, #24
 800047e:	0fc7      	lsrs	r7, r0, #31
 8000480:	2e00      	cmp	r6, #0
 8000482:	d063      	beq.n	800054c <__aeabi_fdiv+0xe4>
 8000484:	2eff      	cmp	r6, #255	; 0xff
 8000486:	d024      	beq.n	80004d2 <__aeabi_fdiv+0x6a>
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	00e4      	lsls	r4, r4, #3
 800048c:	04db      	lsls	r3, r3, #19
 800048e:	431c      	orrs	r4, r3
 8000490:	2300      	movs	r3, #0
 8000492:	4699      	mov	r9, r3
 8000494:	469b      	mov	fp, r3
 8000496:	3e7f      	subs	r6, #127	; 0x7f
 8000498:	4643      	mov	r3, r8
 800049a:	4642      	mov	r2, r8
 800049c:	025d      	lsls	r5, r3, #9
 800049e:	0fd2      	lsrs	r2, r2, #31
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	0a6d      	lsrs	r5, r5, #9
 80004a4:	0e1b      	lsrs	r3, r3, #24
 80004a6:	4690      	mov	r8, r2
 80004a8:	4692      	mov	sl, r2
 80004aa:	d065      	beq.n	8000578 <__aeabi_fdiv+0x110>
 80004ac:	2bff      	cmp	r3, #255	; 0xff
 80004ae:	d055      	beq.n	800055c <__aeabi_fdiv+0xf4>
 80004b0:	2280      	movs	r2, #128	; 0x80
 80004b2:	2100      	movs	r1, #0
 80004b4:	00ed      	lsls	r5, r5, #3
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	3b7f      	subs	r3, #127	; 0x7f
 80004ba:	4315      	orrs	r5, r2
 80004bc:	1af6      	subs	r6, r6, r3
 80004be:	4643      	mov	r3, r8
 80004c0:	464a      	mov	r2, r9
 80004c2:	407b      	eors	r3, r7
 80004c4:	2a0f      	cmp	r2, #15
 80004c6:	d900      	bls.n	80004ca <__aeabi_fdiv+0x62>
 80004c8:	e08d      	b.n	80005e6 <__aeabi_fdiv+0x17e>
 80004ca:	486d      	ldr	r0, [pc, #436]	; (8000680 <__aeabi_fdiv+0x218>)
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	5882      	ldr	r2, [r0, r2]
 80004d0:	4697      	mov	pc, r2
 80004d2:	2c00      	cmp	r4, #0
 80004d4:	d154      	bne.n	8000580 <__aeabi_fdiv+0x118>
 80004d6:	2308      	movs	r3, #8
 80004d8:	4699      	mov	r9, r3
 80004da:	3b06      	subs	r3, #6
 80004dc:	26ff      	movs	r6, #255	; 0xff
 80004de:	469b      	mov	fp, r3
 80004e0:	e7da      	b.n	8000498 <__aeabi_fdiv+0x30>
 80004e2:	2500      	movs	r5, #0
 80004e4:	4653      	mov	r3, sl
 80004e6:	2902      	cmp	r1, #2
 80004e8:	d01b      	beq.n	8000522 <__aeabi_fdiv+0xba>
 80004ea:	2903      	cmp	r1, #3
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fdiv+0x88>
 80004ee:	e0bf      	b.n	8000670 <__aeabi_fdiv+0x208>
 80004f0:	2901      	cmp	r1, #1
 80004f2:	d028      	beq.n	8000546 <__aeabi_fdiv+0xde>
 80004f4:	0030      	movs	r0, r6
 80004f6:	307f      	adds	r0, #127	; 0x7f
 80004f8:	2800      	cmp	r0, #0
 80004fa:	dd20      	ble.n	800053e <__aeabi_fdiv+0xd6>
 80004fc:	076a      	lsls	r2, r5, #29
 80004fe:	d004      	beq.n	800050a <__aeabi_fdiv+0xa2>
 8000500:	220f      	movs	r2, #15
 8000502:	402a      	ands	r2, r5
 8000504:	2a04      	cmp	r2, #4
 8000506:	d000      	beq.n	800050a <__aeabi_fdiv+0xa2>
 8000508:	3504      	adds	r5, #4
 800050a:	012a      	lsls	r2, r5, #4
 800050c:	d503      	bpl.n	8000516 <__aeabi_fdiv+0xae>
 800050e:	0030      	movs	r0, r6
 8000510:	4a5c      	ldr	r2, [pc, #368]	; (8000684 <__aeabi_fdiv+0x21c>)
 8000512:	3080      	adds	r0, #128	; 0x80
 8000514:	4015      	ands	r5, r2
 8000516:	28fe      	cmp	r0, #254	; 0xfe
 8000518:	dc03      	bgt.n	8000522 <__aeabi_fdiv+0xba>
 800051a:	01ac      	lsls	r4, r5, #6
 800051c:	0a64      	lsrs	r4, r4, #9
 800051e:	b2c2      	uxtb	r2, r0
 8000520:	e001      	b.n	8000526 <__aeabi_fdiv+0xbe>
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	2400      	movs	r4, #0
 8000526:	0264      	lsls	r4, r4, #9
 8000528:	05d2      	lsls	r2, r2, #23
 800052a:	0a60      	lsrs	r0, r4, #9
 800052c:	07db      	lsls	r3, r3, #31
 800052e:	4310      	orrs	r0, r2
 8000530:	4318      	orrs	r0, r3
 8000532:	bc3c      	pop	{r2, r3, r4, r5}
 8000534:	4690      	mov	r8, r2
 8000536:	4699      	mov	r9, r3
 8000538:	46a2      	mov	sl, r4
 800053a:	46ab      	mov	fp, r5
 800053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800053e:	2201      	movs	r2, #1
 8000540:	1a10      	subs	r0, r2, r0
 8000542:	281b      	cmp	r0, #27
 8000544:	dd7c      	ble.n	8000640 <__aeabi_fdiv+0x1d8>
 8000546:	2200      	movs	r2, #0
 8000548:	2400      	movs	r4, #0
 800054a:	e7ec      	b.n	8000526 <__aeabi_fdiv+0xbe>
 800054c:	2c00      	cmp	r4, #0
 800054e:	d11d      	bne.n	800058c <__aeabi_fdiv+0x124>
 8000550:	2304      	movs	r3, #4
 8000552:	4699      	mov	r9, r3
 8000554:	3b03      	subs	r3, #3
 8000556:	2600      	movs	r6, #0
 8000558:	469b      	mov	fp, r3
 800055a:	e79d      	b.n	8000498 <__aeabi_fdiv+0x30>
 800055c:	3eff      	subs	r6, #255	; 0xff
 800055e:	2d00      	cmp	r5, #0
 8000560:	d120      	bne.n	80005a4 <__aeabi_fdiv+0x13c>
 8000562:	2102      	movs	r1, #2
 8000564:	4643      	mov	r3, r8
 8000566:	464a      	mov	r2, r9
 8000568:	407b      	eors	r3, r7
 800056a:	430a      	orrs	r2, r1
 800056c:	2a0f      	cmp	r2, #15
 800056e:	d8d8      	bhi.n	8000522 <__aeabi_fdiv+0xba>
 8000570:	4845      	ldr	r0, [pc, #276]	; (8000688 <__aeabi_fdiv+0x220>)
 8000572:	0092      	lsls	r2, r2, #2
 8000574:	5882      	ldr	r2, [r0, r2]
 8000576:	4697      	mov	pc, r2
 8000578:	2d00      	cmp	r5, #0
 800057a:	d119      	bne.n	80005b0 <__aeabi_fdiv+0x148>
 800057c:	2101      	movs	r1, #1
 800057e:	e7f1      	b.n	8000564 <__aeabi_fdiv+0xfc>
 8000580:	230c      	movs	r3, #12
 8000582:	4699      	mov	r9, r3
 8000584:	3b09      	subs	r3, #9
 8000586:	26ff      	movs	r6, #255	; 0xff
 8000588:	469b      	mov	fp, r3
 800058a:	e785      	b.n	8000498 <__aeabi_fdiv+0x30>
 800058c:	0020      	movs	r0, r4
 800058e:	f001 fe49 	bl	8002224 <__clzsi2>
 8000592:	2676      	movs	r6, #118	; 0x76
 8000594:	1f43      	subs	r3, r0, #5
 8000596:	409c      	lsls	r4, r3
 8000598:	2300      	movs	r3, #0
 800059a:	4276      	negs	r6, r6
 800059c:	1a36      	subs	r6, r6, r0
 800059e:	4699      	mov	r9, r3
 80005a0:	469b      	mov	fp, r3
 80005a2:	e779      	b.n	8000498 <__aeabi_fdiv+0x30>
 80005a4:	464a      	mov	r2, r9
 80005a6:	2303      	movs	r3, #3
 80005a8:	431a      	orrs	r2, r3
 80005aa:	4691      	mov	r9, r2
 80005ac:	2103      	movs	r1, #3
 80005ae:	e786      	b.n	80004be <__aeabi_fdiv+0x56>
 80005b0:	0028      	movs	r0, r5
 80005b2:	f001 fe37 	bl	8002224 <__clzsi2>
 80005b6:	1f43      	subs	r3, r0, #5
 80005b8:	1836      	adds	r6, r6, r0
 80005ba:	409d      	lsls	r5, r3
 80005bc:	3676      	adds	r6, #118	; 0x76
 80005be:	2100      	movs	r1, #0
 80005c0:	e77d      	b.n	80004be <__aeabi_fdiv+0x56>
 80005c2:	2480      	movs	r4, #128	; 0x80
 80005c4:	2300      	movs	r3, #0
 80005c6:	03e4      	lsls	r4, r4, #15
 80005c8:	22ff      	movs	r2, #255	; 0xff
 80005ca:	e7ac      	b.n	8000526 <__aeabi_fdiv+0xbe>
 80005cc:	2500      	movs	r5, #0
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	03db      	lsls	r3, r3, #15
 80005d2:	421c      	tst	r4, r3
 80005d4:	d028      	beq.n	8000628 <__aeabi_fdiv+0x1c0>
 80005d6:	421d      	tst	r5, r3
 80005d8:	d126      	bne.n	8000628 <__aeabi_fdiv+0x1c0>
 80005da:	432b      	orrs	r3, r5
 80005dc:	025c      	lsls	r4, r3, #9
 80005de:	0a64      	lsrs	r4, r4, #9
 80005e0:	4643      	mov	r3, r8
 80005e2:	22ff      	movs	r2, #255	; 0xff
 80005e4:	e79f      	b.n	8000526 <__aeabi_fdiv+0xbe>
 80005e6:	0162      	lsls	r2, r4, #5
 80005e8:	016c      	lsls	r4, r5, #5
 80005ea:	42a2      	cmp	r2, r4
 80005ec:	d224      	bcs.n	8000638 <__aeabi_fdiv+0x1d0>
 80005ee:	211b      	movs	r1, #27
 80005f0:	2500      	movs	r5, #0
 80005f2:	3e01      	subs	r6, #1
 80005f4:	2701      	movs	r7, #1
 80005f6:	0010      	movs	r0, r2
 80005f8:	006d      	lsls	r5, r5, #1
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	2800      	cmp	r0, #0
 80005fe:	db01      	blt.n	8000604 <__aeabi_fdiv+0x19c>
 8000600:	4294      	cmp	r4, r2
 8000602:	d801      	bhi.n	8000608 <__aeabi_fdiv+0x1a0>
 8000604:	1b12      	subs	r2, r2, r4
 8000606:	433d      	orrs	r5, r7
 8000608:	3901      	subs	r1, #1
 800060a:	2900      	cmp	r1, #0
 800060c:	d1f3      	bne.n	80005f6 <__aeabi_fdiv+0x18e>
 800060e:	0014      	movs	r4, r2
 8000610:	1e62      	subs	r2, r4, #1
 8000612:	4194      	sbcs	r4, r2
 8000614:	4325      	orrs	r5, r4
 8000616:	e76d      	b.n	80004f4 <__aeabi_fdiv+0x8c>
 8000618:	46ba      	mov	sl, r7
 800061a:	4659      	mov	r1, fp
 800061c:	0025      	movs	r5, r4
 800061e:	4653      	mov	r3, sl
 8000620:	2902      	cmp	r1, #2
 8000622:	d000      	beq.n	8000626 <__aeabi_fdiv+0x1be>
 8000624:	e761      	b.n	80004ea <__aeabi_fdiv+0x82>
 8000626:	e77c      	b.n	8000522 <__aeabi_fdiv+0xba>
 8000628:	2380      	movs	r3, #128	; 0x80
 800062a:	03db      	lsls	r3, r3, #15
 800062c:	431c      	orrs	r4, r3
 800062e:	0264      	lsls	r4, r4, #9
 8000630:	0a64      	lsrs	r4, r4, #9
 8000632:	003b      	movs	r3, r7
 8000634:	22ff      	movs	r2, #255	; 0xff
 8000636:	e776      	b.n	8000526 <__aeabi_fdiv+0xbe>
 8000638:	1b12      	subs	r2, r2, r4
 800063a:	211a      	movs	r1, #26
 800063c:	2501      	movs	r5, #1
 800063e:	e7d9      	b.n	80005f4 <__aeabi_fdiv+0x18c>
 8000640:	369e      	adds	r6, #158	; 0x9e
 8000642:	002a      	movs	r2, r5
 8000644:	40b5      	lsls	r5, r6
 8000646:	002c      	movs	r4, r5
 8000648:	40c2      	lsrs	r2, r0
 800064a:	1e65      	subs	r5, r4, #1
 800064c:	41ac      	sbcs	r4, r5
 800064e:	4314      	orrs	r4, r2
 8000650:	0762      	lsls	r2, r4, #29
 8000652:	d004      	beq.n	800065e <__aeabi_fdiv+0x1f6>
 8000654:	220f      	movs	r2, #15
 8000656:	4022      	ands	r2, r4
 8000658:	2a04      	cmp	r2, #4
 800065a:	d000      	beq.n	800065e <__aeabi_fdiv+0x1f6>
 800065c:	3404      	adds	r4, #4
 800065e:	0162      	lsls	r2, r4, #5
 8000660:	d403      	bmi.n	800066a <__aeabi_fdiv+0x202>
 8000662:	01a4      	lsls	r4, r4, #6
 8000664:	0a64      	lsrs	r4, r4, #9
 8000666:	2200      	movs	r2, #0
 8000668:	e75d      	b.n	8000526 <__aeabi_fdiv+0xbe>
 800066a:	2201      	movs	r2, #1
 800066c:	2400      	movs	r4, #0
 800066e:	e75a      	b.n	8000526 <__aeabi_fdiv+0xbe>
 8000670:	2480      	movs	r4, #128	; 0x80
 8000672:	03e4      	lsls	r4, r4, #15
 8000674:	432c      	orrs	r4, r5
 8000676:	0264      	lsls	r4, r4, #9
 8000678:	0a64      	lsrs	r4, r4, #9
 800067a:	22ff      	movs	r2, #255	; 0xff
 800067c:	e753      	b.n	8000526 <__aeabi_fdiv+0xbe>
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	08006f40 	.word	0x08006f40
 8000684:	f7ffffff 	.word	0xf7ffffff
 8000688:	08006f80 	.word	0x08006f80

0800068c <__eqsf2>:
 800068c:	b570      	push	{r4, r5, r6, lr}
 800068e:	0042      	lsls	r2, r0, #1
 8000690:	024e      	lsls	r6, r1, #9
 8000692:	004c      	lsls	r4, r1, #1
 8000694:	0245      	lsls	r5, r0, #9
 8000696:	0a6d      	lsrs	r5, r5, #9
 8000698:	0e12      	lsrs	r2, r2, #24
 800069a:	0fc3      	lsrs	r3, r0, #31
 800069c:	0a76      	lsrs	r6, r6, #9
 800069e:	0e24      	lsrs	r4, r4, #24
 80006a0:	0fc9      	lsrs	r1, r1, #31
 80006a2:	2aff      	cmp	r2, #255	; 0xff
 80006a4:	d00f      	beq.n	80006c6 <__eqsf2+0x3a>
 80006a6:	2cff      	cmp	r4, #255	; 0xff
 80006a8:	d011      	beq.n	80006ce <__eqsf2+0x42>
 80006aa:	2001      	movs	r0, #1
 80006ac:	42a2      	cmp	r2, r4
 80006ae:	d000      	beq.n	80006b2 <__eqsf2+0x26>
 80006b0:	bd70      	pop	{r4, r5, r6, pc}
 80006b2:	42b5      	cmp	r5, r6
 80006b4:	d1fc      	bne.n	80006b0 <__eqsf2+0x24>
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d00d      	beq.n	80006d6 <__eqsf2+0x4a>
 80006ba:	2a00      	cmp	r2, #0
 80006bc:	d1f8      	bne.n	80006b0 <__eqsf2+0x24>
 80006be:	0028      	movs	r0, r5
 80006c0:	1e45      	subs	r5, r0, #1
 80006c2:	41a8      	sbcs	r0, r5
 80006c4:	e7f4      	b.n	80006b0 <__eqsf2+0x24>
 80006c6:	2001      	movs	r0, #1
 80006c8:	2d00      	cmp	r5, #0
 80006ca:	d1f1      	bne.n	80006b0 <__eqsf2+0x24>
 80006cc:	e7eb      	b.n	80006a6 <__eqsf2+0x1a>
 80006ce:	2001      	movs	r0, #1
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d1ed      	bne.n	80006b0 <__eqsf2+0x24>
 80006d4:	e7e9      	b.n	80006aa <__eqsf2+0x1e>
 80006d6:	2000      	movs	r0, #0
 80006d8:	e7ea      	b.n	80006b0 <__eqsf2+0x24>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__gesf2>:
 80006dc:	b570      	push	{r4, r5, r6, lr}
 80006de:	004a      	lsls	r2, r1, #1
 80006e0:	024e      	lsls	r6, r1, #9
 80006e2:	0245      	lsls	r5, r0, #9
 80006e4:	0044      	lsls	r4, r0, #1
 80006e6:	0a6d      	lsrs	r5, r5, #9
 80006e8:	0e24      	lsrs	r4, r4, #24
 80006ea:	0fc3      	lsrs	r3, r0, #31
 80006ec:	0a76      	lsrs	r6, r6, #9
 80006ee:	0e12      	lsrs	r2, r2, #24
 80006f0:	0fc9      	lsrs	r1, r1, #31
 80006f2:	2cff      	cmp	r4, #255	; 0xff
 80006f4:	d015      	beq.n	8000722 <__gesf2+0x46>
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d00e      	beq.n	8000718 <__gesf2+0x3c>
 80006fa:	2c00      	cmp	r4, #0
 80006fc:	d115      	bne.n	800072a <__gesf2+0x4e>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d101      	bne.n	8000706 <__gesf2+0x2a>
 8000702:	2e00      	cmp	r6, #0
 8000704:	d01c      	beq.n	8000740 <__gesf2+0x64>
 8000706:	2d00      	cmp	r5, #0
 8000708:	d014      	beq.n	8000734 <__gesf2+0x58>
 800070a:	428b      	cmp	r3, r1
 800070c:	d027      	beq.n	800075e <__gesf2+0x82>
 800070e:	2002      	movs	r0, #2
 8000710:	3b01      	subs	r3, #1
 8000712:	4018      	ands	r0, r3
 8000714:	3801      	subs	r0, #1
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	2e00      	cmp	r6, #0
 800071a:	d0ee      	beq.n	80006fa <__gesf2+0x1e>
 800071c:	2002      	movs	r0, #2
 800071e:	4240      	negs	r0, r0
 8000720:	e7f9      	b.n	8000716 <__gesf2+0x3a>
 8000722:	2d00      	cmp	r5, #0
 8000724:	d1fa      	bne.n	800071c <__gesf2+0x40>
 8000726:	2aff      	cmp	r2, #255	; 0xff
 8000728:	d00e      	beq.n	8000748 <__gesf2+0x6c>
 800072a:	2a00      	cmp	r2, #0
 800072c:	d10e      	bne.n	800074c <__gesf2+0x70>
 800072e:	2e00      	cmp	r6, #0
 8000730:	d0ed      	beq.n	800070e <__gesf2+0x32>
 8000732:	e00b      	b.n	800074c <__gesf2+0x70>
 8000734:	2301      	movs	r3, #1
 8000736:	3901      	subs	r1, #1
 8000738:	4399      	bics	r1, r3
 800073a:	0008      	movs	r0, r1
 800073c:	3001      	adds	r0, #1
 800073e:	e7ea      	b.n	8000716 <__gesf2+0x3a>
 8000740:	2000      	movs	r0, #0
 8000742:	2d00      	cmp	r5, #0
 8000744:	d0e7      	beq.n	8000716 <__gesf2+0x3a>
 8000746:	e7e2      	b.n	800070e <__gesf2+0x32>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d1e7      	bne.n	800071c <__gesf2+0x40>
 800074c:	428b      	cmp	r3, r1
 800074e:	d1de      	bne.n	800070e <__gesf2+0x32>
 8000750:	4294      	cmp	r4, r2
 8000752:	dd05      	ble.n	8000760 <__gesf2+0x84>
 8000754:	2102      	movs	r1, #2
 8000756:	1e58      	subs	r0, r3, #1
 8000758:	4008      	ands	r0, r1
 800075a:	3801      	subs	r0, #1
 800075c:	e7db      	b.n	8000716 <__gesf2+0x3a>
 800075e:	2400      	movs	r4, #0
 8000760:	42a2      	cmp	r2, r4
 8000762:	dc04      	bgt.n	800076e <__gesf2+0x92>
 8000764:	42b5      	cmp	r5, r6
 8000766:	d8d2      	bhi.n	800070e <__gesf2+0x32>
 8000768:	2000      	movs	r0, #0
 800076a:	42b5      	cmp	r5, r6
 800076c:	d2d3      	bcs.n	8000716 <__gesf2+0x3a>
 800076e:	1e58      	subs	r0, r3, #1
 8000770:	2301      	movs	r3, #1
 8000772:	4398      	bics	r0, r3
 8000774:	3001      	adds	r0, #1
 8000776:	e7ce      	b.n	8000716 <__gesf2+0x3a>

08000778 <__lesf2>:
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	0042      	lsls	r2, r0, #1
 800077c:	0244      	lsls	r4, r0, #9
 800077e:	024d      	lsls	r5, r1, #9
 8000780:	0fc3      	lsrs	r3, r0, #31
 8000782:	0048      	lsls	r0, r1, #1
 8000784:	0a64      	lsrs	r4, r4, #9
 8000786:	0e12      	lsrs	r2, r2, #24
 8000788:	0a6d      	lsrs	r5, r5, #9
 800078a:	0e00      	lsrs	r0, r0, #24
 800078c:	0fc9      	lsrs	r1, r1, #31
 800078e:	2aff      	cmp	r2, #255	; 0xff
 8000790:	d012      	beq.n	80007b8 <__lesf2+0x40>
 8000792:	28ff      	cmp	r0, #255	; 0xff
 8000794:	d00c      	beq.n	80007b0 <__lesf2+0x38>
 8000796:	2a00      	cmp	r2, #0
 8000798:	d112      	bne.n	80007c0 <__lesf2+0x48>
 800079a:	2800      	cmp	r0, #0
 800079c:	d119      	bne.n	80007d2 <__lesf2+0x5a>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d117      	bne.n	80007d2 <__lesf2+0x5a>
 80007a2:	2c00      	cmp	r4, #0
 80007a4:	d02b      	beq.n	80007fe <__lesf2+0x86>
 80007a6:	2002      	movs	r0, #2
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4018      	ands	r0, r3
 80007ac:	3801      	subs	r0, #1
 80007ae:	e026      	b.n	80007fe <__lesf2+0x86>
 80007b0:	2d00      	cmp	r5, #0
 80007b2:	d0f0      	beq.n	8000796 <__lesf2+0x1e>
 80007b4:	2002      	movs	r0, #2
 80007b6:	e022      	b.n	80007fe <__lesf2+0x86>
 80007b8:	2c00      	cmp	r4, #0
 80007ba:	d1fb      	bne.n	80007b4 <__lesf2+0x3c>
 80007bc:	28ff      	cmp	r0, #255	; 0xff
 80007be:	d01f      	beq.n	8000800 <__lesf2+0x88>
 80007c0:	2800      	cmp	r0, #0
 80007c2:	d11f      	bne.n	8000804 <__lesf2+0x8c>
 80007c4:	2d00      	cmp	r5, #0
 80007c6:	d11d      	bne.n	8000804 <__lesf2+0x8c>
 80007c8:	2002      	movs	r0, #2
 80007ca:	3b01      	subs	r3, #1
 80007cc:	4018      	ands	r0, r3
 80007ce:	3801      	subs	r0, #1
 80007d0:	e015      	b.n	80007fe <__lesf2+0x86>
 80007d2:	2c00      	cmp	r4, #0
 80007d4:	d00e      	beq.n	80007f4 <__lesf2+0x7c>
 80007d6:	428b      	cmp	r3, r1
 80007d8:	d1e5      	bne.n	80007a6 <__lesf2+0x2e>
 80007da:	2200      	movs	r2, #0
 80007dc:	4290      	cmp	r0, r2
 80007de:	dc04      	bgt.n	80007ea <__lesf2+0x72>
 80007e0:	42ac      	cmp	r4, r5
 80007e2:	d8e0      	bhi.n	80007a6 <__lesf2+0x2e>
 80007e4:	2000      	movs	r0, #0
 80007e6:	42ac      	cmp	r4, r5
 80007e8:	d209      	bcs.n	80007fe <__lesf2+0x86>
 80007ea:	1e58      	subs	r0, r3, #1
 80007ec:	2301      	movs	r3, #1
 80007ee:	4398      	bics	r0, r3
 80007f0:	3001      	adds	r0, #1
 80007f2:	e004      	b.n	80007fe <__lesf2+0x86>
 80007f4:	2301      	movs	r3, #1
 80007f6:	3901      	subs	r1, #1
 80007f8:	4399      	bics	r1, r3
 80007fa:	0008      	movs	r0, r1
 80007fc:	3001      	adds	r0, #1
 80007fe:	bd30      	pop	{r4, r5, pc}
 8000800:	2d00      	cmp	r5, #0
 8000802:	d1d7      	bne.n	80007b4 <__lesf2+0x3c>
 8000804:	428b      	cmp	r3, r1
 8000806:	d1ce      	bne.n	80007a6 <__lesf2+0x2e>
 8000808:	4282      	cmp	r2, r0
 800080a:	dde7      	ble.n	80007dc <__lesf2+0x64>
 800080c:	2102      	movs	r1, #2
 800080e:	1e58      	subs	r0, r3, #1
 8000810:	4008      	ands	r0, r1
 8000812:	3801      	subs	r0, #1
 8000814:	e7f3      	b.n	80007fe <__lesf2+0x86>
 8000816:	46c0      	nop			; (mov r8, r8)

08000818 <__aeabi_fmul>:
 8000818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800081a:	464e      	mov	r6, r9
 800081c:	4657      	mov	r7, sl
 800081e:	4645      	mov	r5, r8
 8000820:	46de      	mov	lr, fp
 8000822:	b5e0      	push	{r5, r6, r7, lr}
 8000824:	0243      	lsls	r3, r0, #9
 8000826:	0a5b      	lsrs	r3, r3, #9
 8000828:	0045      	lsls	r5, r0, #1
 800082a:	b083      	sub	sp, #12
 800082c:	1c0f      	adds	r7, r1, #0
 800082e:	4699      	mov	r9, r3
 8000830:	0e2d      	lsrs	r5, r5, #24
 8000832:	0fc6      	lsrs	r6, r0, #31
 8000834:	2d00      	cmp	r5, #0
 8000836:	d057      	beq.n	80008e8 <__aeabi_fmul+0xd0>
 8000838:	2dff      	cmp	r5, #255	; 0xff
 800083a:	d024      	beq.n	8000886 <__aeabi_fmul+0x6e>
 800083c:	2080      	movs	r0, #128	; 0x80
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	04c0      	lsls	r0, r0, #19
 8000842:	4318      	orrs	r0, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4681      	mov	r9, r0
 8000848:	469a      	mov	sl, r3
 800084a:	469b      	mov	fp, r3
 800084c:	3d7f      	subs	r5, #127	; 0x7f
 800084e:	027c      	lsls	r4, r7, #9
 8000850:	007a      	lsls	r2, r7, #1
 8000852:	0ffb      	lsrs	r3, r7, #31
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	4698      	mov	r8, r3
 800085a:	d023      	beq.n	80008a4 <__aeabi_fmul+0x8c>
 800085c:	2aff      	cmp	r2, #255	; 0xff
 800085e:	d04b      	beq.n	80008f8 <__aeabi_fmul+0xe0>
 8000860:	00e3      	lsls	r3, r4, #3
 8000862:	2480      	movs	r4, #128	; 0x80
 8000864:	2000      	movs	r0, #0
 8000866:	04e4      	lsls	r4, r4, #19
 8000868:	3a7f      	subs	r2, #127	; 0x7f
 800086a:	431c      	orrs	r4, r3
 800086c:	18ad      	adds	r5, r5, r2
 800086e:	1c6b      	adds	r3, r5, #1
 8000870:	4647      	mov	r7, r8
 8000872:	9301      	str	r3, [sp, #4]
 8000874:	4653      	mov	r3, sl
 8000876:	4077      	eors	r7, r6
 8000878:	003a      	movs	r2, r7
 800087a:	2b0f      	cmp	r3, #15
 800087c:	d848      	bhi.n	8000910 <__aeabi_fmul+0xf8>
 800087e:	497d      	ldr	r1, [pc, #500]	; (8000a74 <__aeabi_fmul+0x25c>)
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	58cb      	ldr	r3, [r1, r3]
 8000884:	469f      	mov	pc, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fmul+0x74>
 800088a:	e085      	b.n	8000998 <__aeabi_fmul+0x180>
 800088c:	3308      	adds	r3, #8
 800088e:	469a      	mov	sl, r3
 8000890:	3b06      	subs	r3, #6
 8000892:	469b      	mov	fp, r3
 8000894:	027c      	lsls	r4, r7, #9
 8000896:	007a      	lsls	r2, r7, #1
 8000898:	0ffb      	lsrs	r3, r7, #31
 800089a:	25ff      	movs	r5, #255	; 0xff
 800089c:	0a64      	lsrs	r4, r4, #9
 800089e:	0e12      	lsrs	r2, r2, #24
 80008a0:	4698      	mov	r8, r3
 80008a2:	d1db      	bne.n	800085c <__aeabi_fmul+0x44>
 80008a4:	2c00      	cmp	r4, #0
 80008a6:	d000      	beq.n	80008aa <__aeabi_fmul+0x92>
 80008a8:	e090      	b.n	80009cc <__aeabi_fmul+0x1b4>
 80008aa:	4652      	mov	r2, sl
 80008ac:	2301      	movs	r3, #1
 80008ae:	431a      	orrs	r2, r3
 80008b0:	4692      	mov	sl, r2
 80008b2:	2001      	movs	r0, #1
 80008b4:	e7db      	b.n	800086e <__aeabi_fmul+0x56>
 80008b6:	464c      	mov	r4, r9
 80008b8:	4658      	mov	r0, fp
 80008ba:	0017      	movs	r7, r2
 80008bc:	2802      	cmp	r0, #2
 80008be:	d024      	beq.n	800090a <__aeabi_fmul+0xf2>
 80008c0:	2803      	cmp	r0, #3
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fmul+0xae>
 80008c4:	e0cf      	b.n	8000a66 <__aeabi_fmul+0x24e>
 80008c6:	2200      	movs	r2, #0
 80008c8:	2300      	movs	r3, #0
 80008ca:	2801      	cmp	r0, #1
 80008cc:	d14d      	bne.n	800096a <__aeabi_fmul+0x152>
 80008ce:	0258      	lsls	r0, r3, #9
 80008d0:	05d2      	lsls	r2, r2, #23
 80008d2:	0a40      	lsrs	r0, r0, #9
 80008d4:	07ff      	lsls	r7, r7, #31
 80008d6:	4310      	orrs	r0, r2
 80008d8:	4338      	orrs	r0, r7
 80008da:	b003      	add	sp, #12
 80008dc:	bc3c      	pop	{r2, r3, r4, r5}
 80008de:	4690      	mov	r8, r2
 80008e0:	4699      	mov	r9, r3
 80008e2:	46a2      	mov	sl, r4
 80008e4:	46ab      	mov	fp, r5
 80008e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d15b      	bne.n	80009a4 <__aeabi_fmul+0x18c>
 80008ec:	2304      	movs	r3, #4
 80008ee:	469a      	mov	sl, r3
 80008f0:	3b03      	subs	r3, #3
 80008f2:	2500      	movs	r5, #0
 80008f4:	469b      	mov	fp, r3
 80008f6:	e7aa      	b.n	800084e <__aeabi_fmul+0x36>
 80008f8:	35ff      	adds	r5, #255	; 0xff
 80008fa:	2c00      	cmp	r4, #0
 80008fc:	d160      	bne.n	80009c0 <__aeabi_fmul+0x1a8>
 80008fe:	4652      	mov	r2, sl
 8000900:	2302      	movs	r3, #2
 8000902:	431a      	orrs	r2, r3
 8000904:	4692      	mov	sl, r2
 8000906:	2002      	movs	r0, #2
 8000908:	e7b1      	b.n	800086e <__aeabi_fmul+0x56>
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	2300      	movs	r3, #0
 800090e:	e7de      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000910:	464b      	mov	r3, r9
 8000912:	0c1b      	lsrs	r3, r3, #16
 8000914:	469c      	mov	ip, r3
 8000916:	464b      	mov	r3, r9
 8000918:	0426      	lsls	r6, r4, #16
 800091a:	0c36      	lsrs	r6, r6, #16
 800091c:	0418      	lsls	r0, r3, #16
 800091e:	4661      	mov	r1, ip
 8000920:	0033      	movs	r3, r6
 8000922:	0c22      	lsrs	r2, r4, #16
 8000924:	4664      	mov	r4, ip
 8000926:	0c00      	lsrs	r0, r0, #16
 8000928:	4343      	muls	r3, r0
 800092a:	434e      	muls	r6, r1
 800092c:	4350      	muls	r0, r2
 800092e:	4354      	muls	r4, r2
 8000930:	1980      	adds	r0, r0, r6
 8000932:	0c1a      	lsrs	r2, r3, #16
 8000934:	1812      	adds	r2, r2, r0
 8000936:	4296      	cmp	r6, r2
 8000938:	d903      	bls.n	8000942 <__aeabi_fmul+0x12a>
 800093a:	2180      	movs	r1, #128	; 0x80
 800093c:	0249      	lsls	r1, r1, #9
 800093e:	468c      	mov	ip, r1
 8000940:	4464      	add	r4, ip
 8000942:	041b      	lsls	r3, r3, #16
 8000944:	0c1b      	lsrs	r3, r3, #16
 8000946:	0410      	lsls	r0, r2, #16
 8000948:	18c0      	adds	r0, r0, r3
 800094a:	0183      	lsls	r3, r0, #6
 800094c:	1e5e      	subs	r6, r3, #1
 800094e:	41b3      	sbcs	r3, r6
 8000950:	0e80      	lsrs	r0, r0, #26
 8000952:	4318      	orrs	r0, r3
 8000954:	0c13      	lsrs	r3, r2, #16
 8000956:	191b      	adds	r3, r3, r4
 8000958:	019b      	lsls	r3, r3, #6
 800095a:	4303      	orrs	r3, r0
 800095c:	001c      	movs	r4, r3
 800095e:	0123      	lsls	r3, r4, #4
 8000960:	d579      	bpl.n	8000a56 <__aeabi_fmul+0x23e>
 8000962:	2301      	movs	r3, #1
 8000964:	0862      	lsrs	r2, r4, #1
 8000966:	401c      	ands	r4, r3
 8000968:	4314      	orrs	r4, r2
 800096a:	9a01      	ldr	r2, [sp, #4]
 800096c:	327f      	adds	r2, #127	; 0x7f
 800096e:	2a00      	cmp	r2, #0
 8000970:	dd4d      	ble.n	8000a0e <__aeabi_fmul+0x1f6>
 8000972:	0763      	lsls	r3, r4, #29
 8000974:	d004      	beq.n	8000980 <__aeabi_fmul+0x168>
 8000976:	230f      	movs	r3, #15
 8000978:	4023      	ands	r3, r4
 800097a:	2b04      	cmp	r3, #4
 800097c:	d000      	beq.n	8000980 <__aeabi_fmul+0x168>
 800097e:	3404      	adds	r4, #4
 8000980:	0123      	lsls	r3, r4, #4
 8000982:	d503      	bpl.n	800098c <__aeabi_fmul+0x174>
 8000984:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <__aeabi_fmul+0x260>)
 8000986:	9a01      	ldr	r2, [sp, #4]
 8000988:	401c      	ands	r4, r3
 800098a:	3280      	adds	r2, #128	; 0x80
 800098c:	2afe      	cmp	r2, #254	; 0xfe
 800098e:	dcbc      	bgt.n	800090a <__aeabi_fmul+0xf2>
 8000990:	01a3      	lsls	r3, r4, #6
 8000992:	0a5b      	lsrs	r3, r3, #9
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	e79a      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000998:	230c      	movs	r3, #12
 800099a:	469a      	mov	sl, r3
 800099c:	3b09      	subs	r3, #9
 800099e:	25ff      	movs	r5, #255	; 0xff
 80009a0:	469b      	mov	fp, r3
 80009a2:	e754      	b.n	800084e <__aeabi_fmul+0x36>
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fc3d 	bl	8002224 <__clzsi2>
 80009aa:	464a      	mov	r2, r9
 80009ac:	1f43      	subs	r3, r0, #5
 80009ae:	2576      	movs	r5, #118	; 0x76
 80009b0:	409a      	lsls	r2, r3
 80009b2:	2300      	movs	r3, #0
 80009b4:	426d      	negs	r5, r5
 80009b6:	4691      	mov	r9, r2
 80009b8:	1a2d      	subs	r5, r5, r0
 80009ba:	469a      	mov	sl, r3
 80009bc:	469b      	mov	fp, r3
 80009be:	e746      	b.n	800084e <__aeabi_fmul+0x36>
 80009c0:	4652      	mov	r2, sl
 80009c2:	2303      	movs	r3, #3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	4692      	mov	sl, r2
 80009c8:	2003      	movs	r0, #3
 80009ca:	e750      	b.n	800086e <__aeabi_fmul+0x56>
 80009cc:	0020      	movs	r0, r4
 80009ce:	f001 fc29 	bl	8002224 <__clzsi2>
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	1a2d      	subs	r5, r5, r0
 80009d6:	409c      	lsls	r4, r3
 80009d8:	3d76      	subs	r5, #118	; 0x76
 80009da:	2000      	movs	r0, #0
 80009dc:	e747      	b.n	800086e <__aeabi_fmul+0x56>
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	2700      	movs	r7, #0
 80009e2:	03db      	lsls	r3, r3, #15
 80009e4:	22ff      	movs	r2, #255	; 0xff
 80009e6:	e772      	b.n	80008ce <__aeabi_fmul+0xb6>
 80009e8:	4642      	mov	r2, r8
 80009ea:	e766      	b.n	80008ba <__aeabi_fmul+0xa2>
 80009ec:	464c      	mov	r4, r9
 80009ee:	0032      	movs	r2, r6
 80009f0:	4658      	mov	r0, fp
 80009f2:	e762      	b.n	80008ba <__aeabi_fmul+0xa2>
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	464a      	mov	r2, r9
 80009f8:	03db      	lsls	r3, r3, #15
 80009fa:	421a      	tst	r2, r3
 80009fc:	d022      	beq.n	8000a44 <__aeabi_fmul+0x22c>
 80009fe:	421c      	tst	r4, r3
 8000a00:	d120      	bne.n	8000a44 <__aeabi_fmul+0x22c>
 8000a02:	4323      	orrs	r3, r4
 8000a04:	025b      	lsls	r3, r3, #9
 8000a06:	0a5b      	lsrs	r3, r3, #9
 8000a08:	4647      	mov	r7, r8
 8000a0a:	22ff      	movs	r2, #255	; 0xff
 8000a0c:	e75f      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a0e:	2301      	movs	r3, #1
 8000a10:	1a9a      	subs	r2, r3, r2
 8000a12:	2a1b      	cmp	r2, #27
 8000a14:	dc21      	bgt.n	8000a5a <__aeabi_fmul+0x242>
 8000a16:	0023      	movs	r3, r4
 8000a18:	9901      	ldr	r1, [sp, #4]
 8000a1a:	40d3      	lsrs	r3, r2
 8000a1c:	319e      	adds	r1, #158	; 0x9e
 8000a1e:	408c      	lsls	r4, r1
 8000a20:	001a      	movs	r2, r3
 8000a22:	0023      	movs	r3, r4
 8000a24:	1e5c      	subs	r4, r3, #1
 8000a26:	41a3      	sbcs	r3, r4
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	075a      	lsls	r2, r3, #29
 8000a2c:	d004      	beq.n	8000a38 <__aeabi_fmul+0x220>
 8000a2e:	220f      	movs	r2, #15
 8000a30:	401a      	ands	r2, r3
 8000a32:	2a04      	cmp	r2, #4
 8000a34:	d000      	beq.n	8000a38 <__aeabi_fmul+0x220>
 8000a36:	3304      	adds	r3, #4
 8000a38:	015a      	lsls	r2, r3, #5
 8000a3a:	d411      	bmi.n	8000a60 <__aeabi_fmul+0x248>
 8000a3c:	019b      	lsls	r3, r3, #6
 8000a3e:	0a5b      	lsrs	r3, r3, #9
 8000a40:	2200      	movs	r2, #0
 8000a42:	e744      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	464a      	mov	r2, r9
 8000a48:	03db      	lsls	r3, r3, #15
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	025b      	lsls	r3, r3, #9
 8000a4e:	0a5b      	lsrs	r3, r3, #9
 8000a50:	0037      	movs	r7, r6
 8000a52:	22ff      	movs	r2, #255	; 0xff
 8000a54:	e73b      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a56:	9501      	str	r5, [sp, #4]
 8000a58:	e787      	b.n	800096a <__aeabi_fmul+0x152>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e736      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a60:	2201      	movs	r2, #1
 8000a62:	2300      	movs	r3, #0
 8000a64:	e733      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	03db      	lsls	r3, r3, #15
 8000a6a:	4323      	orrs	r3, r4
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	0a5b      	lsrs	r3, r3, #9
 8000a70:	22ff      	movs	r2, #255	; 0xff
 8000a72:	e72c      	b.n	80008ce <__aeabi_fmul+0xb6>
 8000a74:	08006fc0 	.word	0x08006fc0
 8000a78:	f7ffffff 	.word	0xf7ffffff

08000a7c <__aeabi_fsub>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	4647      	mov	r7, r8
 8000a80:	46ce      	mov	lr, r9
 8000a82:	0044      	lsls	r4, r0, #1
 8000a84:	0fc2      	lsrs	r2, r0, #31
 8000a86:	b580      	push	{r7, lr}
 8000a88:	0247      	lsls	r7, r0, #9
 8000a8a:	0248      	lsls	r0, r1, #9
 8000a8c:	0a40      	lsrs	r0, r0, #9
 8000a8e:	4684      	mov	ip, r0
 8000a90:	4666      	mov	r6, ip
 8000a92:	0048      	lsls	r0, r1, #1
 8000a94:	0a7f      	lsrs	r7, r7, #9
 8000a96:	0e24      	lsrs	r4, r4, #24
 8000a98:	00f6      	lsls	r6, r6, #3
 8000a9a:	0025      	movs	r5, r4
 8000a9c:	4690      	mov	r8, r2
 8000a9e:	00fb      	lsls	r3, r7, #3
 8000aa0:	0e00      	lsrs	r0, r0, #24
 8000aa2:	0fc9      	lsrs	r1, r1, #31
 8000aa4:	46b1      	mov	r9, r6
 8000aa6:	28ff      	cmp	r0, #255	; 0xff
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fsub+0x30>
 8000aaa:	e085      	b.n	8000bb8 <__aeabi_fsub+0x13c>
 8000aac:	2601      	movs	r6, #1
 8000aae:	4071      	eors	r1, r6
 8000ab0:	1a26      	subs	r6, r4, r0
 8000ab2:	4291      	cmp	r1, r2
 8000ab4:	d057      	beq.n	8000b66 <__aeabi_fsub+0xea>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	dd43      	ble.n	8000b42 <__aeabi_fsub+0xc6>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d000      	beq.n	8000ac0 <__aeabi_fsub+0x44>
 8000abe:	e07f      	b.n	8000bc0 <__aeabi_fsub+0x144>
 8000ac0:	4649      	mov	r1, r9
 8000ac2:	2900      	cmp	r1, #0
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_fsub+0x4c>
 8000ac6:	e0aa      	b.n	8000c1e <__aeabi_fsub+0x1a2>
 8000ac8:	3e01      	subs	r6, #1
 8000aca:	2e00      	cmp	r6, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_fsub+0x54>
 8000ace:	e0f7      	b.n	8000cc0 <__aeabi_fsub+0x244>
 8000ad0:	1a5b      	subs	r3, r3, r1
 8000ad2:	015a      	lsls	r2, r3, #5
 8000ad4:	d400      	bmi.n	8000ad8 <__aeabi_fsub+0x5c>
 8000ad6:	e08b      	b.n	8000bf0 <__aeabi_fsub+0x174>
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	099c      	lsrs	r4, r3, #6
 8000adc:	0020      	movs	r0, r4
 8000ade:	f001 fba1 	bl	8002224 <__clzsi2>
 8000ae2:	3805      	subs	r0, #5
 8000ae4:	4084      	lsls	r4, r0
 8000ae6:	4285      	cmp	r5, r0
 8000ae8:	dd00      	ble.n	8000aec <__aeabi_fsub+0x70>
 8000aea:	e0d3      	b.n	8000c94 <__aeabi_fsub+0x218>
 8000aec:	1b45      	subs	r5, r0, r5
 8000aee:	0023      	movs	r3, r4
 8000af0:	2020      	movs	r0, #32
 8000af2:	3501      	adds	r5, #1
 8000af4:	40eb      	lsrs	r3, r5
 8000af6:	1b45      	subs	r5, r0, r5
 8000af8:	40ac      	lsls	r4, r5
 8000afa:	1e62      	subs	r2, r4, #1
 8000afc:	4194      	sbcs	r4, r2
 8000afe:	4323      	orrs	r3, r4
 8000b00:	2407      	movs	r4, #7
 8000b02:	2500      	movs	r5, #0
 8000b04:	401c      	ands	r4, r3
 8000b06:	2201      	movs	r2, #1
 8000b08:	4641      	mov	r1, r8
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	2c00      	cmp	r4, #0
 8000b0e:	d004      	beq.n	8000b1a <__aeabi_fsub+0x9e>
 8000b10:	210f      	movs	r1, #15
 8000b12:	4019      	ands	r1, r3
 8000b14:	2904      	cmp	r1, #4
 8000b16:	d000      	beq.n	8000b1a <__aeabi_fsub+0x9e>
 8000b18:	3304      	adds	r3, #4
 8000b1a:	0159      	lsls	r1, r3, #5
 8000b1c:	d400      	bmi.n	8000b20 <__aeabi_fsub+0xa4>
 8000b1e:	e080      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000b20:	3501      	adds	r5, #1
 8000b22:	b2ec      	uxtb	r4, r5
 8000b24:	2dff      	cmp	r5, #255	; 0xff
 8000b26:	d000      	beq.n	8000b2a <__aeabi_fsub+0xae>
 8000b28:	e0a3      	b.n	8000c72 <__aeabi_fsub+0x1f6>
 8000b2a:	24ff      	movs	r4, #255	; 0xff
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	025b      	lsls	r3, r3, #9
 8000b30:	05e4      	lsls	r4, r4, #23
 8000b32:	0a58      	lsrs	r0, r3, #9
 8000b34:	07d2      	lsls	r2, r2, #31
 8000b36:	4320      	orrs	r0, r4
 8000b38:	4310      	orrs	r0, r2
 8000b3a:	bc0c      	pop	{r2, r3}
 8000b3c:	4690      	mov	r8, r2
 8000b3e:	4699      	mov	r9, r3
 8000b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d174      	bne.n	8000c30 <__aeabi_fsub+0x1b4>
 8000b46:	1c60      	adds	r0, r4, #1
 8000b48:	b2c0      	uxtb	r0, r0
 8000b4a:	2801      	cmp	r0, #1
 8000b4c:	dc00      	bgt.n	8000b50 <__aeabi_fsub+0xd4>
 8000b4e:	e0a7      	b.n	8000ca0 <__aeabi_fsub+0x224>
 8000b50:	464a      	mov	r2, r9
 8000b52:	1a9c      	subs	r4, r3, r2
 8000b54:	0162      	lsls	r2, r4, #5
 8000b56:	d500      	bpl.n	8000b5a <__aeabi_fsub+0xde>
 8000b58:	e0b6      	b.n	8000cc8 <__aeabi_fsub+0x24c>
 8000b5a:	2c00      	cmp	r4, #0
 8000b5c:	d1be      	bne.n	8000adc <__aeabi_fsub+0x60>
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2400      	movs	r4, #0
 8000b62:	2300      	movs	r3, #0
 8000b64:	e7e3      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	dc00      	bgt.n	8000b6c <__aeabi_fsub+0xf0>
 8000b6a:	e085      	b.n	8000c78 <__aeabi_fsub+0x1fc>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d046      	beq.n	8000bfe <__aeabi_fsub+0x182>
 8000b70:	2cff      	cmp	r4, #255	; 0xff
 8000b72:	d049      	beq.n	8000c08 <__aeabi_fsub+0x18c>
 8000b74:	2280      	movs	r2, #128	; 0x80
 8000b76:	4648      	mov	r0, r9
 8000b78:	04d2      	lsls	r2, r2, #19
 8000b7a:	4310      	orrs	r0, r2
 8000b7c:	4681      	mov	r9, r0
 8000b7e:	2201      	movs	r2, #1
 8000b80:	2e1b      	cmp	r6, #27
 8000b82:	dc09      	bgt.n	8000b98 <__aeabi_fsub+0x11c>
 8000b84:	2020      	movs	r0, #32
 8000b86:	464c      	mov	r4, r9
 8000b88:	1b80      	subs	r0, r0, r6
 8000b8a:	4084      	lsls	r4, r0
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	0020      	movs	r0, r4
 8000b90:	40f2      	lsrs	r2, r6
 8000b92:	1e44      	subs	r4, r0, #1
 8000b94:	41a0      	sbcs	r0, r4
 8000b96:	4302      	orrs	r2, r0
 8000b98:	189b      	adds	r3, r3, r2
 8000b9a:	015a      	lsls	r2, r3, #5
 8000b9c:	d528      	bpl.n	8000bf0 <__aeabi_fsub+0x174>
 8000b9e:	3501      	adds	r5, #1
 8000ba0:	2dff      	cmp	r5, #255	; 0xff
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_fsub+0x12a>
 8000ba4:	e0a8      	b.n	8000cf8 <__aeabi_fsub+0x27c>
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	2407      	movs	r4, #7
 8000baa:	4994      	ldr	r1, [pc, #592]	; (8000dfc <__aeabi_fsub+0x380>)
 8000bac:	401a      	ands	r2, r3
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	401c      	ands	r4, r3
 8000bb6:	e7a6      	b.n	8000b06 <__aeabi_fsub+0x8a>
 8000bb8:	2e00      	cmp	r6, #0
 8000bba:	d000      	beq.n	8000bbe <__aeabi_fsub+0x142>
 8000bbc:	e778      	b.n	8000ab0 <__aeabi_fsub+0x34>
 8000bbe:	e775      	b.n	8000aac <__aeabi_fsub+0x30>
 8000bc0:	2cff      	cmp	r4, #255	; 0xff
 8000bc2:	d054      	beq.n	8000c6e <__aeabi_fsub+0x1f2>
 8000bc4:	2280      	movs	r2, #128	; 0x80
 8000bc6:	4649      	mov	r1, r9
 8000bc8:	04d2      	lsls	r2, r2, #19
 8000bca:	4311      	orrs	r1, r2
 8000bcc:	4689      	mov	r9, r1
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2e1b      	cmp	r6, #27
 8000bd2:	dc09      	bgt.n	8000be8 <__aeabi_fsub+0x16c>
 8000bd4:	2120      	movs	r1, #32
 8000bd6:	4648      	mov	r0, r9
 8000bd8:	1b89      	subs	r1, r1, r6
 8000bda:	4088      	lsls	r0, r1
 8000bdc:	464a      	mov	r2, r9
 8000bde:	0001      	movs	r1, r0
 8000be0:	40f2      	lsrs	r2, r6
 8000be2:	1e48      	subs	r0, r1, #1
 8000be4:	4181      	sbcs	r1, r0
 8000be6:	430a      	orrs	r2, r1
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	015a      	lsls	r2, r3, #5
 8000bec:	d500      	bpl.n	8000bf0 <__aeabi_fsub+0x174>
 8000bee:	e773      	b.n	8000ad8 <__aeabi_fsub+0x5c>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4641      	mov	r1, r8
 8000bf4:	400a      	ands	r2, r1
 8000bf6:	0759      	lsls	r1, r3, #29
 8000bf8:	d000      	beq.n	8000bfc <__aeabi_fsub+0x180>
 8000bfa:	e789      	b.n	8000b10 <__aeabi_fsub+0x94>
 8000bfc:	e011      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000bfe:	4648      	mov	r0, r9
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d158      	bne.n	8000cb6 <__aeabi_fsub+0x23a>
 8000c04:	2cff      	cmp	r4, #255	; 0xff
 8000c06:	d10c      	bne.n	8000c22 <__aeabi_fsub+0x1a6>
 8000c08:	08db      	lsrs	r3, r3, #3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x194>
 8000c0e:	e78c      	b.n	8000b2a <__aeabi_fsub+0xae>
 8000c10:	2080      	movs	r0, #128	; 0x80
 8000c12:	03c0      	lsls	r0, r0, #15
 8000c14:	4303      	orrs	r3, r0
 8000c16:	025b      	lsls	r3, r3, #9
 8000c18:	0a5b      	lsrs	r3, r3, #9
 8000c1a:	24ff      	movs	r4, #255	; 0xff
 8000c1c:	e787      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000c1e:	2cff      	cmp	r4, #255	; 0xff
 8000c20:	d025      	beq.n	8000c6e <__aeabi_fsub+0x1f2>
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	2dff      	cmp	r5, #255	; 0xff
 8000c26:	d0f0      	beq.n	8000c0a <__aeabi_fsub+0x18e>
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	0a5b      	lsrs	r3, r3, #9
 8000c2c:	b2ec      	uxtb	r4, r5
 8000c2e:	e77e      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d04d      	beq.n	8000cd0 <__aeabi_fsub+0x254>
 8000c34:	28ff      	cmp	r0, #255	; 0xff
 8000c36:	d018      	beq.n	8000c6a <__aeabi_fsub+0x1ee>
 8000c38:	2480      	movs	r4, #128	; 0x80
 8000c3a:	04e4      	lsls	r4, r4, #19
 8000c3c:	4272      	negs	r2, r6
 8000c3e:	4323      	orrs	r3, r4
 8000c40:	2a1b      	cmp	r2, #27
 8000c42:	dd00      	ble.n	8000c46 <__aeabi_fsub+0x1ca>
 8000c44:	e0c4      	b.n	8000dd0 <__aeabi_fsub+0x354>
 8000c46:	001c      	movs	r4, r3
 8000c48:	2520      	movs	r5, #32
 8000c4a:	40d4      	lsrs	r4, r2
 8000c4c:	1aaa      	subs	r2, r5, r2
 8000c4e:	4093      	lsls	r3, r2
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	4193      	sbcs	r3, r2
 8000c54:	4323      	orrs	r3, r4
 8000c56:	464a      	mov	r2, r9
 8000c58:	0005      	movs	r5, r0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	4688      	mov	r8, r1
 8000c5e:	e738      	b.n	8000ad2 <__aeabi_fsub+0x56>
 8000c60:	1c72      	adds	r2, r6, #1
 8000c62:	d0f8      	beq.n	8000c56 <__aeabi_fsub+0x1da>
 8000c64:	43f2      	mvns	r2, r6
 8000c66:	28ff      	cmp	r0, #255	; 0xff
 8000c68:	d1ea      	bne.n	8000c40 <__aeabi_fsub+0x1c4>
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	25ff      	movs	r5, #255	; 0xff
 8000c70:	e7d7      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000c72:	019b      	lsls	r3, r3, #6
 8000c74:	0a5b      	lsrs	r3, r3, #9
 8000c76:	e75a      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d141      	bne.n	8000d00 <__aeabi_fsub+0x284>
 8000c7c:	1c65      	adds	r5, r4, #1
 8000c7e:	b2e9      	uxtb	r1, r5
 8000c80:	2901      	cmp	r1, #1
 8000c82:	dd45      	ble.n	8000d10 <__aeabi_fsub+0x294>
 8000c84:	2dff      	cmp	r5, #255	; 0xff
 8000c86:	d100      	bne.n	8000c8a <__aeabi_fsub+0x20e>
 8000c88:	e74f      	b.n	8000b2a <__aeabi_fsub+0xae>
 8000c8a:	2407      	movs	r4, #7
 8000c8c:	444b      	add	r3, r9
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	401c      	ands	r4, r3
 8000c92:	e738      	b.n	8000b06 <__aeabi_fsub+0x8a>
 8000c94:	2207      	movs	r2, #7
 8000c96:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <__aeabi_fsub+0x384>)
 8000c98:	1a2d      	subs	r5, r5, r0
 8000c9a:	4023      	ands	r3, r4
 8000c9c:	4014      	ands	r4, r2
 8000c9e:	e732      	b.n	8000b06 <__aeabi_fsub+0x8a>
 8000ca0:	2c00      	cmp	r4, #0
 8000ca2:	d11d      	bne.n	8000ce0 <__aeabi_fsub+0x264>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d17a      	bne.n	8000d9e <__aeabi_fsub+0x322>
 8000ca8:	464b      	mov	r3, r9
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_fsub+0x234>
 8000cae:	e091      	b.n	8000dd4 <__aeabi_fsub+0x358>
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	2500      	movs	r5, #0
 8000cb4:	e7b5      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000cb6:	3e01      	subs	r6, #1
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d119      	bne.n	8000cf0 <__aeabi_fsub+0x274>
 8000cbc:	444b      	add	r3, r9
 8000cbe:	e76c      	b.n	8000b9a <__aeabi_fsub+0x11e>
 8000cc0:	2cff      	cmp	r4, #255	; 0xff
 8000cc2:	d184      	bne.n	8000bce <__aeabi_fsub+0x152>
 8000cc4:	25ff      	movs	r5, #255	; 0xff
 8000cc6:	e7ac      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	4688      	mov	r8, r1
 8000ccc:	1ad4      	subs	r4, r2, r3
 8000cce:	e705      	b.n	8000adc <__aeabi_fsub+0x60>
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1c5      	bne.n	8000c60 <__aeabi_fsub+0x1e4>
 8000cd4:	000a      	movs	r2, r1
 8000cd6:	28ff      	cmp	r0, #255	; 0xff
 8000cd8:	d0c8      	beq.n	8000c6c <__aeabi_fsub+0x1f0>
 8000cda:	0005      	movs	r5, r0
 8000cdc:	464b      	mov	r3, r9
 8000cde:	e7a0      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d149      	bne.n	8000d78 <__aeabi_fsub+0x2fc>
 8000ce4:	464b      	mov	r3, r9
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d077      	beq.n	8000dda <__aeabi_fsub+0x35e>
 8000cea:	000a      	movs	r2, r1
 8000cec:	25ff      	movs	r5, #255	; 0xff
 8000cee:	e798      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000cf0:	2cff      	cmp	r4, #255	; 0xff
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fsub+0x27a>
 8000cf4:	e743      	b.n	8000b7e <__aeabi_fsub+0x102>
 8000cf6:	e787      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	24ff      	movs	r4, #255	; 0xff
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e716      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d115      	bne.n	8000d30 <__aeabi_fsub+0x2b4>
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d157      	bne.n	8000db8 <__aeabi_fsub+0x33c>
 8000d08:	28ff      	cmp	r0, #255	; 0xff
 8000d0a:	d1e6      	bne.n	8000cda <__aeabi_fsub+0x25e>
 8000d0c:	464b      	mov	r3, r9
 8000d0e:	e77b      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000d10:	2c00      	cmp	r4, #0
 8000d12:	d120      	bne.n	8000d56 <__aeabi_fsub+0x2da>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d057      	beq.n	8000dc8 <__aeabi_fsub+0x34c>
 8000d18:	4649      	mov	r1, r9
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	d053      	beq.n	8000dc6 <__aeabi_fsub+0x34a>
 8000d1e:	444b      	add	r3, r9
 8000d20:	015a      	lsls	r2, r3, #5
 8000d22:	d568      	bpl.n	8000df6 <__aeabi_fsub+0x37a>
 8000d24:	2407      	movs	r4, #7
 8000d26:	4a36      	ldr	r2, [pc, #216]	; (8000e00 <__aeabi_fsub+0x384>)
 8000d28:	401c      	ands	r4, r3
 8000d2a:	2501      	movs	r5, #1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	e6ea      	b.n	8000b06 <__aeabi_fsub+0x8a>
 8000d30:	28ff      	cmp	r0, #255	; 0xff
 8000d32:	d0eb      	beq.n	8000d0c <__aeabi_fsub+0x290>
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	04d2      	lsls	r2, r2, #19
 8000d38:	4276      	negs	r6, r6
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	2e1b      	cmp	r6, #27
 8000d3e:	dc53      	bgt.n	8000de8 <__aeabi_fsub+0x36c>
 8000d40:	2520      	movs	r5, #32
 8000d42:	1bad      	subs	r5, r5, r6
 8000d44:	001a      	movs	r2, r3
 8000d46:	40ab      	lsls	r3, r5
 8000d48:	40f2      	lsrs	r2, r6
 8000d4a:	1e5c      	subs	r4, r3, #1
 8000d4c:	41a3      	sbcs	r3, r4
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	444b      	add	r3, r9
 8000d52:	0005      	movs	r5, r0
 8000d54:	e721      	b.n	8000b9a <__aeabi_fsub+0x11e>
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0d8      	beq.n	8000d0c <__aeabi_fsub+0x290>
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	d100      	bne.n	8000d62 <__aeabi_fsub+0x2e6>
 8000d60:	e752      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	03c9      	lsls	r1, r1, #15
 8000d66:	420f      	tst	r7, r1
 8000d68:	d100      	bne.n	8000d6c <__aeabi_fsub+0x2f0>
 8000d6a:	e74d      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000d6c:	4660      	mov	r0, ip
 8000d6e:	4208      	tst	r0, r1
 8000d70:	d000      	beq.n	8000d74 <__aeabi_fsub+0x2f8>
 8000d72:	e749      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000d74:	464b      	mov	r3, r9
 8000d76:	e747      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000d78:	4648      	mov	r0, r9
 8000d7a:	25ff      	movs	r5, #255	; 0xff
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x306>
 8000d80:	e74f      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000d82:	2280      	movs	r2, #128	; 0x80
 8000d84:	03d2      	lsls	r2, r2, #15
 8000d86:	4217      	tst	r7, r2
 8000d88:	d004      	beq.n	8000d94 <__aeabi_fsub+0x318>
 8000d8a:	4660      	mov	r0, ip
 8000d8c:	4210      	tst	r0, r2
 8000d8e:	d101      	bne.n	8000d94 <__aeabi_fsub+0x318>
 8000d90:	464b      	mov	r3, r9
 8000d92:	4688      	mov	r8, r1
 8000d94:	2201      	movs	r2, #1
 8000d96:	4641      	mov	r1, r8
 8000d98:	25ff      	movs	r5, #255	; 0xff
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	e741      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000d9e:	4648      	mov	r0, r9
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d01f      	beq.n	8000de4 <__aeabi_fsub+0x368>
 8000da4:	1a1a      	subs	r2, r3, r0
 8000da6:	0150      	lsls	r0, r2, #5
 8000da8:	d520      	bpl.n	8000dec <__aeabi_fsub+0x370>
 8000daa:	464a      	mov	r2, r9
 8000dac:	2407      	movs	r4, #7
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	401c      	ands	r4, r3
 8000db2:	4688      	mov	r8, r1
 8000db4:	2500      	movs	r5, #0
 8000db6:	e6a6      	b.n	8000b06 <__aeabi_fsub+0x8a>
 8000db8:	1c74      	adds	r4, r6, #1
 8000dba:	d0c9      	beq.n	8000d50 <__aeabi_fsub+0x2d4>
 8000dbc:	43f6      	mvns	r6, r6
 8000dbe:	28ff      	cmp	r0, #255	; 0xff
 8000dc0:	d1bc      	bne.n	8000d3c <__aeabi_fsub+0x2c0>
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	e720      	b.n	8000c08 <__aeabi_fsub+0x18c>
 8000dc6:	4699      	mov	r9, r3
 8000dc8:	464b      	mov	r3, r9
 8000dca:	2500      	movs	r5, #0
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	e72b      	b.n	8000c28 <__aeabi_fsub+0x1ac>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e740      	b.n	8000c56 <__aeabi_fsub+0x1da>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e6a9      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	2200      	movs	r2, #0
 8000dde:	03db      	lsls	r3, r3, #15
 8000de0:	24ff      	movs	r4, #255	; 0xff
 8000de2:	e6a4      	b.n	8000b2e <__aeabi_fsub+0xb2>
 8000de4:	2500      	movs	r5, #0
 8000de6:	e71c      	b.n	8000c22 <__aeabi_fsub+0x1a6>
 8000de8:	2301      	movs	r3, #1
 8000dea:	e7b1      	b.n	8000d50 <__aeabi_fsub+0x2d4>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d0f1      	beq.n	8000dd4 <__aeabi_fsub+0x358>
 8000df0:	0013      	movs	r3, r2
 8000df2:	2500      	movs	r5, #0
 8000df4:	e6fc      	b.n	8000bf0 <__aeabi_fsub+0x174>
 8000df6:	2500      	movs	r5, #0
 8000df8:	e6fa      	b.n	8000bf0 <__aeabi_fsub+0x174>
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	7dffffff 	.word	0x7dffffff
 8000e00:	fbffffff 	.word	0xfbffffff

08000e04 <__aeabi_f2iz>:
 8000e04:	0241      	lsls	r1, r0, #9
 8000e06:	0042      	lsls	r2, r0, #1
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0a49      	lsrs	r1, r1, #9
 8000e0c:	0e12      	lsrs	r2, r2, #24
 8000e0e:	2000      	movs	r0, #0
 8000e10:	2a7e      	cmp	r2, #126	; 0x7e
 8000e12:	d90d      	bls.n	8000e30 <__aeabi_f2iz+0x2c>
 8000e14:	2a9d      	cmp	r2, #157	; 0x9d
 8000e16:	d80c      	bhi.n	8000e32 <__aeabi_f2iz+0x2e>
 8000e18:	2080      	movs	r0, #128	; 0x80
 8000e1a:	0400      	lsls	r0, r0, #16
 8000e1c:	4301      	orrs	r1, r0
 8000e1e:	2a95      	cmp	r2, #149	; 0x95
 8000e20:	dc0a      	bgt.n	8000e38 <__aeabi_f2iz+0x34>
 8000e22:	2096      	movs	r0, #150	; 0x96
 8000e24:	1a82      	subs	r2, r0, r2
 8000e26:	40d1      	lsrs	r1, r2
 8000e28:	4248      	negs	r0, r1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_f2iz+0x2c>
 8000e2e:	0008      	movs	r0, r1
 8000e30:	4770      	bx	lr
 8000e32:	4a03      	ldr	r2, [pc, #12]	; (8000e40 <__aeabi_f2iz+0x3c>)
 8000e34:	1898      	adds	r0, r3, r2
 8000e36:	e7fb      	b.n	8000e30 <__aeabi_f2iz+0x2c>
 8000e38:	3a96      	subs	r2, #150	; 0x96
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	e7f4      	b.n	8000e28 <__aeabi_f2iz+0x24>
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	7fffffff 	.word	0x7fffffff

08000e44 <__aeabi_i2f>:
 8000e44:	b570      	push	{r4, r5, r6, lr}
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d03d      	beq.n	8000ec6 <__aeabi_i2f+0x82>
 8000e4a:	17c3      	asrs	r3, r0, #31
 8000e4c:	18c5      	adds	r5, r0, r3
 8000e4e:	405d      	eors	r5, r3
 8000e50:	0fc4      	lsrs	r4, r0, #31
 8000e52:	0028      	movs	r0, r5
 8000e54:	f001 f9e6 	bl	8002224 <__clzsi2>
 8000e58:	229e      	movs	r2, #158	; 0x9e
 8000e5a:	1a12      	subs	r2, r2, r0
 8000e5c:	2a96      	cmp	r2, #150	; 0x96
 8000e5e:	dc07      	bgt.n	8000e70 <__aeabi_i2f+0x2c>
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	2808      	cmp	r0, #8
 8000e64:	dd33      	ble.n	8000ece <__aeabi_i2f+0x8a>
 8000e66:	3808      	subs	r0, #8
 8000e68:	4085      	lsls	r5, r0
 8000e6a:	0268      	lsls	r0, r5, #9
 8000e6c:	0a40      	lsrs	r0, r0, #9
 8000e6e:	e023      	b.n	8000eb8 <__aeabi_i2f+0x74>
 8000e70:	2a99      	cmp	r2, #153	; 0x99
 8000e72:	dd0b      	ble.n	8000e8c <__aeabi_i2f+0x48>
 8000e74:	2305      	movs	r3, #5
 8000e76:	0029      	movs	r1, r5
 8000e78:	1a1b      	subs	r3, r3, r0
 8000e7a:	40d9      	lsrs	r1, r3
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	331b      	adds	r3, #27
 8000e80:	409d      	lsls	r5, r3
 8000e82:	002b      	movs	r3, r5
 8000e84:	1e5d      	subs	r5, r3, #1
 8000e86:	41ab      	sbcs	r3, r5
 8000e88:	4319      	orrs	r1, r3
 8000e8a:	000d      	movs	r5, r1
 8000e8c:	2805      	cmp	r0, #5
 8000e8e:	dd01      	ble.n	8000e94 <__aeabi_i2f+0x50>
 8000e90:	1f43      	subs	r3, r0, #5
 8000e92:	409d      	lsls	r5, r3
 8000e94:	002b      	movs	r3, r5
 8000e96:	490f      	ldr	r1, [pc, #60]	; (8000ed4 <__aeabi_i2f+0x90>)
 8000e98:	400b      	ands	r3, r1
 8000e9a:	076e      	lsls	r6, r5, #29
 8000e9c:	d009      	beq.n	8000eb2 <__aeabi_i2f+0x6e>
 8000e9e:	260f      	movs	r6, #15
 8000ea0:	4035      	ands	r5, r6
 8000ea2:	2d04      	cmp	r5, #4
 8000ea4:	d005      	beq.n	8000eb2 <__aeabi_i2f+0x6e>
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	015d      	lsls	r5, r3, #5
 8000eaa:	d502      	bpl.n	8000eb2 <__aeabi_i2f+0x6e>
 8000eac:	229f      	movs	r2, #159	; 0x9f
 8000eae:	400b      	ands	r3, r1
 8000eb0:	1a12      	subs	r2, r2, r0
 8000eb2:	019b      	lsls	r3, r3, #6
 8000eb4:	0a58      	lsrs	r0, r3, #9
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	0240      	lsls	r0, r0, #9
 8000eba:	05d2      	lsls	r2, r2, #23
 8000ebc:	0a40      	lsrs	r0, r0, #9
 8000ebe:	07e4      	lsls	r4, r4, #31
 8000ec0:	4310      	orrs	r0, r2
 8000ec2:	4320      	orrs	r0, r4
 8000ec4:	bd70      	pop	{r4, r5, r6, pc}
 8000ec6:	2400      	movs	r4, #0
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2000      	movs	r0, #0
 8000ecc:	e7f4      	b.n	8000eb8 <__aeabi_i2f+0x74>
 8000ece:	0268      	lsls	r0, r5, #9
 8000ed0:	0a40      	lsrs	r0, r0, #9
 8000ed2:	e7f1      	b.n	8000eb8 <__aeabi_i2f+0x74>
 8000ed4:	fbffffff 	.word	0xfbffffff

08000ed8 <__aeabi_ui2f>:
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	1e04      	subs	r4, r0, #0
 8000edc:	d034      	beq.n	8000f48 <__aeabi_ui2f+0x70>
 8000ede:	f001 f9a1 	bl	8002224 <__clzsi2>
 8000ee2:	229e      	movs	r2, #158	; 0x9e
 8000ee4:	1a12      	subs	r2, r2, r0
 8000ee6:	2a96      	cmp	r2, #150	; 0x96
 8000ee8:	dc07      	bgt.n	8000efa <__aeabi_ui2f+0x22>
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	2808      	cmp	r0, #8
 8000eee:	dd2e      	ble.n	8000f4e <__aeabi_ui2f+0x76>
 8000ef0:	3808      	subs	r0, #8
 8000ef2:	4084      	lsls	r4, r0
 8000ef4:	0260      	lsls	r0, r4, #9
 8000ef6:	0a40      	lsrs	r0, r0, #9
 8000ef8:	e021      	b.n	8000f3e <__aeabi_ui2f+0x66>
 8000efa:	2a99      	cmp	r2, #153	; 0x99
 8000efc:	dd09      	ble.n	8000f12 <__aeabi_ui2f+0x3a>
 8000efe:	0003      	movs	r3, r0
 8000f00:	0021      	movs	r1, r4
 8000f02:	331b      	adds	r3, #27
 8000f04:	4099      	lsls	r1, r3
 8000f06:	1e4b      	subs	r3, r1, #1
 8000f08:	4199      	sbcs	r1, r3
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	1a1b      	subs	r3, r3, r0
 8000f0e:	40dc      	lsrs	r4, r3
 8000f10:	430c      	orrs	r4, r1
 8000f12:	2805      	cmp	r0, #5
 8000f14:	dd01      	ble.n	8000f1a <__aeabi_ui2f+0x42>
 8000f16:	1f43      	subs	r3, r0, #5
 8000f18:	409c      	lsls	r4, r3
 8000f1a:	0023      	movs	r3, r4
 8000f1c:	490d      	ldr	r1, [pc, #52]	; (8000f54 <__aeabi_ui2f+0x7c>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	0765      	lsls	r5, r4, #29
 8000f22:	d009      	beq.n	8000f38 <__aeabi_ui2f+0x60>
 8000f24:	250f      	movs	r5, #15
 8000f26:	402c      	ands	r4, r5
 8000f28:	2c04      	cmp	r4, #4
 8000f2a:	d005      	beq.n	8000f38 <__aeabi_ui2f+0x60>
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	015c      	lsls	r4, r3, #5
 8000f30:	d502      	bpl.n	8000f38 <__aeabi_ui2f+0x60>
 8000f32:	229f      	movs	r2, #159	; 0x9f
 8000f34:	400b      	ands	r3, r1
 8000f36:	1a12      	subs	r2, r2, r0
 8000f38:	019b      	lsls	r3, r3, #6
 8000f3a:	0a58      	lsrs	r0, r3, #9
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	0240      	lsls	r0, r0, #9
 8000f40:	05d2      	lsls	r2, r2, #23
 8000f42:	0a40      	lsrs	r0, r0, #9
 8000f44:	4310      	orrs	r0, r2
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	e7f7      	b.n	8000f3e <__aeabi_ui2f+0x66>
 8000f4e:	0260      	lsls	r0, r4, #9
 8000f50:	0a40      	lsrs	r0, r0, #9
 8000f52:	e7f4      	b.n	8000f3e <__aeabi_ui2f+0x66>
 8000f54:	fbffffff 	.word	0xfbffffff

08000f58 <__aeabi_dadd>:
 8000f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5a:	464f      	mov	r7, r9
 8000f5c:	4646      	mov	r6, r8
 8000f5e:	46d6      	mov	lr, sl
 8000f60:	000c      	movs	r4, r1
 8000f62:	0309      	lsls	r1, r1, #12
 8000f64:	b5c0      	push	{r6, r7, lr}
 8000f66:	0a49      	lsrs	r1, r1, #9
 8000f68:	0f47      	lsrs	r7, r0, #29
 8000f6a:	005e      	lsls	r6, r3, #1
 8000f6c:	4339      	orrs	r1, r7
 8000f6e:	031f      	lsls	r7, r3, #12
 8000f70:	0fdb      	lsrs	r3, r3, #31
 8000f72:	469c      	mov	ip, r3
 8000f74:	0065      	lsls	r5, r4, #1
 8000f76:	0a7b      	lsrs	r3, r7, #9
 8000f78:	0f57      	lsrs	r7, r2, #29
 8000f7a:	431f      	orrs	r7, r3
 8000f7c:	0d6d      	lsrs	r5, r5, #21
 8000f7e:	0fe4      	lsrs	r4, r4, #31
 8000f80:	0d76      	lsrs	r6, r6, #21
 8000f82:	46a1      	mov	r9, r4
 8000f84:	00c0      	lsls	r0, r0, #3
 8000f86:	46b8      	mov	r8, r7
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	1bab      	subs	r3, r5, r6
 8000f8c:	4564      	cmp	r4, ip
 8000f8e:	d07b      	beq.n	8001088 <__aeabi_dadd+0x130>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	dd5f      	ble.n	8001054 <__aeabi_dadd+0xfc>
 8000f94:	2e00      	cmp	r6, #0
 8000f96:	d000      	beq.n	8000f9a <__aeabi_dadd+0x42>
 8000f98:	e0a4      	b.n	80010e4 <__aeabi_dadd+0x18c>
 8000f9a:	003e      	movs	r6, r7
 8000f9c:	4316      	orrs	r6, r2
 8000f9e:	d100      	bne.n	8000fa2 <__aeabi_dadd+0x4a>
 8000fa0:	e112      	b.n	80011c8 <__aeabi_dadd+0x270>
 8000fa2:	1e5e      	subs	r6, r3, #1
 8000fa4:	2e00      	cmp	r6, #0
 8000fa6:	d000      	beq.n	8000faa <__aeabi_dadd+0x52>
 8000fa8:	e19e      	b.n	80012e8 <__aeabi_dadd+0x390>
 8000faa:	1a87      	subs	r7, r0, r2
 8000fac:	4643      	mov	r3, r8
 8000fae:	42b8      	cmp	r0, r7
 8000fb0:	4180      	sbcs	r0, r0
 8000fb2:	2501      	movs	r5, #1
 8000fb4:	1ac9      	subs	r1, r1, r3
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	1a09      	subs	r1, r1, r0
 8000fba:	020b      	lsls	r3, r1, #8
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_dadd+0x68>
 8000fbe:	e131      	b.n	8001224 <__aeabi_dadd+0x2cc>
 8000fc0:	0249      	lsls	r1, r1, #9
 8000fc2:	0a4e      	lsrs	r6, r1, #9
 8000fc4:	2e00      	cmp	r6, #0
 8000fc6:	d100      	bne.n	8000fca <__aeabi_dadd+0x72>
 8000fc8:	e16e      	b.n	80012a8 <__aeabi_dadd+0x350>
 8000fca:	0030      	movs	r0, r6
 8000fcc:	f001 f92a 	bl	8002224 <__clzsi2>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	2b1f      	cmp	r3, #31
 8000fd6:	dd00      	ble.n	8000fda <__aeabi_dadd+0x82>
 8000fd8:	e161      	b.n	800129e <__aeabi_dadd+0x346>
 8000fda:	2220      	movs	r2, #32
 8000fdc:	0039      	movs	r1, r7
 8000fde:	1ad2      	subs	r2, r2, r3
 8000fe0:	409e      	lsls	r6, r3
 8000fe2:	40d1      	lsrs	r1, r2
 8000fe4:	409f      	lsls	r7, r3
 8000fe6:	430e      	orrs	r6, r1
 8000fe8:	429d      	cmp	r5, r3
 8000fea:	dd00      	ble.n	8000fee <__aeabi_dadd+0x96>
 8000fec:	e151      	b.n	8001292 <__aeabi_dadd+0x33a>
 8000fee:	1b5d      	subs	r5, r3, r5
 8000ff0:	1c6b      	adds	r3, r5, #1
 8000ff2:	2b1f      	cmp	r3, #31
 8000ff4:	dd00      	ble.n	8000ff8 <__aeabi_dadd+0xa0>
 8000ff6:	e17c      	b.n	80012f2 <__aeabi_dadd+0x39a>
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	1ac9      	subs	r1, r1, r3
 8000ffc:	003d      	movs	r5, r7
 8000ffe:	0030      	movs	r0, r6
 8001000:	408f      	lsls	r7, r1
 8001002:	4088      	lsls	r0, r1
 8001004:	40dd      	lsrs	r5, r3
 8001006:	1e79      	subs	r1, r7, #1
 8001008:	418f      	sbcs	r7, r1
 800100a:	0031      	movs	r1, r6
 800100c:	2207      	movs	r2, #7
 800100e:	4328      	orrs	r0, r5
 8001010:	40d9      	lsrs	r1, r3
 8001012:	2500      	movs	r5, #0
 8001014:	4307      	orrs	r7, r0
 8001016:	403a      	ands	r2, r7
 8001018:	2a00      	cmp	r2, #0
 800101a:	d009      	beq.n	8001030 <__aeabi_dadd+0xd8>
 800101c:	230f      	movs	r3, #15
 800101e:	403b      	ands	r3, r7
 8001020:	2b04      	cmp	r3, #4
 8001022:	d005      	beq.n	8001030 <__aeabi_dadd+0xd8>
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	42bb      	cmp	r3, r7
 8001028:	41bf      	sbcs	r7, r7
 800102a:	427f      	negs	r7, r7
 800102c:	19c9      	adds	r1, r1, r7
 800102e:	001f      	movs	r7, r3
 8001030:	020b      	lsls	r3, r1, #8
 8001032:	d400      	bmi.n	8001036 <__aeabi_dadd+0xde>
 8001034:	e226      	b.n	8001484 <__aeabi_dadd+0x52c>
 8001036:	1c6a      	adds	r2, r5, #1
 8001038:	4bc6      	ldr	r3, [pc, #792]	; (8001354 <__aeabi_dadd+0x3fc>)
 800103a:	0555      	lsls	r5, r2, #21
 800103c:	0d6d      	lsrs	r5, r5, #21
 800103e:	429a      	cmp	r2, r3
 8001040:	d100      	bne.n	8001044 <__aeabi_dadd+0xec>
 8001042:	e106      	b.n	8001252 <__aeabi_dadd+0x2fa>
 8001044:	4ac4      	ldr	r2, [pc, #784]	; (8001358 <__aeabi_dadd+0x400>)
 8001046:	08ff      	lsrs	r7, r7, #3
 8001048:	400a      	ands	r2, r1
 800104a:	0753      	lsls	r3, r2, #29
 800104c:	0252      	lsls	r2, r2, #9
 800104e:	433b      	orrs	r3, r7
 8001050:	0b12      	lsrs	r2, r2, #12
 8001052:	e08e      	b.n	8001172 <__aeabi_dadd+0x21a>
 8001054:	2b00      	cmp	r3, #0
 8001056:	d000      	beq.n	800105a <__aeabi_dadd+0x102>
 8001058:	e0b8      	b.n	80011cc <__aeabi_dadd+0x274>
 800105a:	1c6b      	adds	r3, r5, #1
 800105c:	055b      	lsls	r3, r3, #21
 800105e:	0d5b      	lsrs	r3, r3, #21
 8001060:	2b01      	cmp	r3, #1
 8001062:	dc00      	bgt.n	8001066 <__aeabi_dadd+0x10e>
 8001064:	e130      	b.n	80012c8 <__aeabi_dadd+0x370>
 8001066:	1a87      	subs	r7, r0, r2
 8001068:	4643      	mov	r3, r8
 800106a:	42b8      	cmp	r0, r7
 800106c:	41b6      	sbcs	r6, r6
 800106e:	1acb      	subs	r3, r1, r3
 8001070:	4276      	negs	r6, r6
 8001072:	1b9e      	subs	r6, r3, r6
 8001074:	0233      	lsls	r3, r6, #8
 8001076:	d500      	bpl.n	800107a <__aeabi_dadd+0x122>
 8001078:	e14c      	b.n	8001314 <__aeabi_dadd+0x3bc>
 800107a:	003b      	movs	r3, r7
 800107c:	4333      	orrs	r3, r6
 800107e:	d1a1      	bne.n	8000fc4 <__aeabi_dadd+0x6c>
 8001080:	2200      	movs	r2, #0
 8001082:	2400      	movs	r4, #0
 8001084:	2500      	movs	r5, #0
 8001086:	e070      	b.n	800116a <__aeabi_dadd+0x212>
 8001088:	2b00      	cmp	r3, #0
 800108a:	dc00      	bgt.n	800108e <__aeabi_dadd+0x136>
 800108c:	e0e5      	b.n	800125a <__aeabi_dadd+0x302>
 800108e:	2e00      	cmp	r6, #0
 8001090:	d100      	bne.n	8001094 <__aeabi_dadd+0x13c>
 8001092:	e083      	b.n	800119c <__aeabi_dadd+0x244>
 8001094:	4eaf      	ldr	r6, [pc, #700]	; (8001354 <__aeabi_dadd+0x3fc>)
 8001096:	42b5      	cmp	r5, r6
 8001098:	d060      	beq.n	800115c <__aeabi_dadd+0x204>
 800109a:	2680      	movs	r6, #128	; 0x80
 800109c:	0436      	lsls	r6, r6, #16
 800109e:	4337      	orrs	r7, r6
 80010a0:	46b8      	mov	r8, r7
 80010a2:	2b38      	cmp	r3, #56	; 0x38
 80010a4:	dc00      	bgt.n	80010a8 <__aeabi_dadd+0x150>
 80010a6:	e13e      	b.n	8001326 <__aeabi_dadd+0x3ce>
 80010a8:	4643      	mov	r3, r8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	001f      	movs	r7, r3
 80010ae:	1e7a      	subs	r2, r7, #1
 80010b0:	4197      	sbcs	r7, r2
 80010b2:	183f      	adds	r7, r7, r0
 80010b4:	4287      	cmp	r7, r0
 80010b6:	4180      	sbcs	r0, r0
 80010b8:	4240      	negs	r0, r0
 80010ba:	1809      	adds	r1, r1, r0
 80010bc:	020b      	lsls	r3, r1, #8
 80010be:	d400      	bmi.n	80010c2 <__aeabi_dadd+0x16a>
 80010c0:	e0b0      	b.n	8001224 <__aeabi_dadd+0x2cc>
 80010c2:	4ba4      	ldr	r3, [pc, #656]	; (8001354 <__aeabi_dadd+0x3fc>)
 80010c4:	3501      	adds	r5, #1
 80010c6:	429d      	cmp	r5, r3
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x174>
 80010ca:	e0c3      	b.n	8001254 <__aeabi_dadd+0x2fc>
 80010cc:	4aa2      	ldr	r2, [pc, #648]	; (8001358 <__aeabi_dadd+0x400>)
 80010ce:	087b      	lsrs	r3, r7, #1
 80010d0:	400a      	ands	r2, r1
 80010d2:	2101      	movs	r1, #1
 80010d4:	400f      	ands	r7, r1
 80010d6:	431f      	orrs	r7, r3
 80010d8:	0851      	lsrs	r1, r2, #1
 80010da:	07d3      	lsls	r3, r2, #31
 80010dc:	2207      	movs	r2, #7
 80010de:	431f      	orrs	r7, r3
 80010e0:	403a      	ands	r2, r7
 80010e2:	e799      	b.n	8001018 <__aeabi_dadd+0xc0>
 80010e4:	4e9b      	ldr	r6, [pc, #620]	; (8001354 <__aeabi_dadd+0x3fc>)
 80010e6:	42b5      	cmp	r5, r6
 80010e8:	d038      	beq.n	800115c <__aeabi_dadd+0x204>
 80010ea:	2680      	movs	r6, #128	; 0x80
 80010ec:	0436      	lsls	r6, r6, #16
 80010ee:	4337      	orrs	r7, r6
 80010f0:	46b8      	mov	r8, r7
 80010f2:	2b38      	cmp	r3, #56	; 0x38
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dadd+0x1a0>
 80010f6:	e0dc      	b.n	80012b2 <__aeabi_dadd+0x35a>
 80010f8:	2b1f      	cmp	r3, #31
 80010fa:	dc00      	bgt.n	80010fe <__aeabi_dadd+0x1a6>
 80010fc:	e130      	b.n	8001360 <__aeabi_dadd+0x408>
 80010fe:	001e      	movs	r6, r3
 8001100:	4647      	mov	r7, r8
 8001102:	3e20      	subs	r6, #32
 8001104:	40f7      	lsrs	r7, r6
 8001106:	46bc      	mov	ip, r7
 8001108:	2b20      	cmp	r3, #32
 800110a:	d004      	beq.n	8001116 <__aeabi_dadd+0x1be>
 800110c:	2640      	movs	r6, #64	; 0x40
 800110e:	1af3      	subs	r3, r6, r3
 8001110:	4646      	mov	r6, r8
 8001112:	409e      	lsls	r6, r3
 8001114:	4332      	orrs	r2, r6
 8001116:	0017      	movs	r7, r2
 8001118:	4663      	mov	r3, ip
 800111a:	1e7a      	subs	r2, r7, #1
 800111c:	4197      	sbcs	r7, r2
 800111e:	431f      	orrs	r7, r3
 8001120:	e0cc      	b.n	80012bc <__aeabi_dadd+0x364>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <__aeabi_dadd+0x1d0>
 8001126:	e204      	b.n	8001532 <__aeabi_dadd+0x5da>
 8001128:	4643      	mov	r3, r8
 800112a:	4313      	orrs	r3, r2
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x1d8>
 800112e:	e159      	b.n	80013e4 <__aeabi_dadd+0x48c>
 8001130:	074b      	lsls	r3, r1, #29
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	4318      	orrs	r0, r3
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	08c9      	lsrs	r1, r1, #3
 800113a:	031b      	lsls	r3, r3, #12
 800113c:	4219      	tst	r1, r3
 800113e:	d008      	beq.n	8001152 <__aeabi_dadd+0x1fa>
 8001140:	4645      	mov	r5, r8
 8001142:	08ed      	lsrs	r5, r5, #3
 8001144:	421d      	tst	r5, r3
 8001146:	d104      	bne.n	8001152 <__aeabi_dadd+0x1fa>
 8001148:	4643      	mov	r3, r8
 800114a:	08d0      	lsrs	r0, r2, #3
 800114c:	0759      	lsls	r1, r3, #29
 800114e:	4308      	orrs	r0, r1
 8001150:	0029      	movs	r1, r5
 8001152:	0f42      	lsrs	r2, r0, #29
 8001154:	00c9      	lsls	r1, r1, #3
 8001156:	4d7f      	ldr	r5, [pc, #508]	; (8001354 <__aeabi_dadd+0x3fc>)
 8001158:	4311      	orrs	r1, r2
 800115a:	00c0      	lsls	r0, r0, #3
 800115c:	074b      	lsls	r3, r1, #29
 800115e:	08ca      	lsrs	r2, r1, #3
 8001160:	497c      	ldr	r1, [pc, #496]	; (8001354 <__aeabi_dadd+0x3fc>)
 8001162:	08c0      	lsrs	r0, r0, #3
 8001164:	4303      	orrs	r3, r0
 8001166:	428d      	cmp	r5, r1
 8001168:	d068      	beq.n	800123c <__aeabi_dadd+0x2e4>
 800116a:	0312      	lsls	r2, r2, #12
 800116c:	056d      	lsls	r5, r5, #21
 800116e:	0b12      	lsrs	r2, r2, #12
 8001170:	0d6d      	lsrs	r5, r5, #21
 8001172:	2100      	movs	r1, #0
 8001174:	0312      	lsls	r2, r2, #12
 8001176:	0018      	movs	r0, r3
 8001178:	0b13      	lsrs	r3, r2, #12
 800117a:	0d0a      	lsrs	r2, r1, #20
 800117c:	0512      	lsls	r2, r2, #20
 800117e:	431a      	orrs	r2, r3
 8001180:	4b76      	ldr	r3, [pc, #472]	; (800135c <__aeabi_dadd+0x404>)
 8001182:	052d      	lsls	r5, r5, #20
 8001184:	4013      	ands	r3, r2
 8001186:	432b      	orrs	r3, r5
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	07e4      	lsls	r4, r4, #31
 800118c:	085b      	lsrs	r3, r3, #1
 800118e:	4323      	orrs	r3, r4
 8001190:	0019      	movs	r1, r3
 8001192:	bc1c      	pop	{r2, r3, r4}
 8001194:	4690      	mov	r8, r2
 8001196:	4699      	mov	r9, r3
 8001198:	46a2      	mov	sl, r4
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	003e      	movs	r6, r7
 800119e:	4316      	orrs	r6, r2
 80011a0:	d012      	beq.n	80011c8 <__aeabi_dadd+0x270>
 80011a2:	1e5e      	subs	r6, r3, #1
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d000      	beq.n	80011aa <__aeabi_dadd+0x252>
 80011a8:	e100      	b.n	80013ac <__aeabi_dadd+0x454>
 80011aa:	1887      	adds	r7, r0, r2
 80011ac:	4287      	cmp	r7, r0
 80011ae:	4180      	sbcs	r0, r0
 80011b0:	4441      	add	r1, r8
 80011b2:	4240      	negs	r0, r0
 80011b4:	1809      	adds	r1, r1, r0
 80011b6:	2501      	movs	r5, #1
 80011b8:	020b      	lsls	r3, r1, #8
 80011ba:	d533      	bpl.n	8001224 <__aeabi_dadd+0x2cc>
 80011bc:	2502      	movs	r5, #2
 80011be:	e785      	b.n	80010cc <__aeabi_dadd+0x174>
 80011c0:	4664      	mov	r4, ip
 80011c2:	0033      	movs	r3, r6
 80011c4:	4641      	mov	r1, r8
 80011c6:	0010      	movs	r0, r2
 80011c8:	001d      	movs	r5, r3
 80011ca:	e7c7      	b.n	800115c <__aeabi_dadd+0x204>
 80011cc:	2d00      	cmp	r5, #0
 80011ce:	d000      	beq.n	80011d2 <__aeabi_dadd+0x27a>
 80011d0:	e0da      	b.n	8001388 <__aeabi_dadd+0x430>
 80011d2:	000c      	movs	r4, r1
 80011d4:	4304      	orrs	r4, r0
 80011d6:	d0f3      	beq.n	80011c0 <__aeabi_dadd+0x268>
 80011d8:	1c5c      	adds	r4, r3, #1
 80011da:	d100      	bne.n	80011de <__aeabi_dadd+0x286>
 80011dc:	e19f      	b.n	800151e <__aeabi_dadd+0x5c6>
 80011de:	4c5d      	ldr	r4, [pc, #372]	; (8001354 <__aeabi_dadd+0x3fc>)
 80011e0:	42a6      	cmp	r6, r4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_dadd+0x28e>
 80011e4:	e12f      	b.n	8001446 <__aeabi_dadd+0x4ee>
 80011e6:	43db      	mvns	r3, r3
 80011e8:	2b38      	cmp	r3, #56	; 0x38
 80011ea:	dd00      	ble.n	80011ee <__aeabi_dadd+0x296>
 80011ec:	e166      	b.n	80014bc <__aeabi_dadd+0x564>
 80011ee:	2b1f      	cmp	r3, #31
 80011f0:	dd00      	ble.n	80011f4 <__aeabi_dadd+0x29c>
 80011f2:	e183      	b.n	80014fc <__aeabi_dadd+0x5a4>
 80011f4:	2420      	movs	r4, #32
 80011f6:	0005      	movs	r5, r0
 80011f8:	1ae4      	subs	r4, r4, r3
 80011fa:	000f      	movs	r7, r1
 80011fc:	40dd      	lsrs	r5, r3
 80011fe:	40d9      	lsrs	r1, r3
 8001200:	40a0      	lsls	r0, r4
 8001202:	4643      	mov	r3, r8
 8001204:	40a7      	lsls	r7, r4
 8001206:	1a5b      	subs	r3, r3, r1
 8001208:	1e44      	subs	r4, r0, #1
 800120a:	41a0      	sbcs	r0, r4
 800120c:	4698      	mov	r8, r3
 800120e:	432f      	orrs	r7, r5
 8001210:	4338      	orrs	r0, r7
 8001212:	1a17      	subs	r7, r2, r0
 8001214:	42ba      	cmp	r2, r7
 8001216:	4192      	sbcs	r2, r2
 8001218:	4643      	mov	r3, r8
 800121a:	4252      	negs	r2, r2
 800121c:	1a99      	subs	r1, r3, r2
 800121e:	4664      	mov	r4, ip
 8001220:	0035      	movs	r5, r6
 8001222:	e6ca      	b.n	8000fba <__aeabi_dadd+0x62>
 8001224:	2207      	movs	r2, #7
 8001226:	403a      	ands	r2, r7
 8001228:	2a00      	cmp	r2, #0
 800122a:	d000      	beq.n	800122e <__aeabi_dadd+0x2d6>
 800122c:	e6f6      	b.n	800101c <__aeabi_dadd+0xc4>
 800122e:	074b      	lsls	r3, r1, #29
 8001230:	08ca      	lsrs	r2, r1, #3
 8001232:	4948      	ldr	r1, [pc, #288]	; (8001354 <__aeabi_dadd+0x3fc>)
 8001234:	08ff      	lsrs	r7, r7, #3
 8001236:	433b      	orrs	r3, r7
 8001238:	428d      	cmp	r5, r1
 800123a:	d196      	bne.n	800116a <__aeabi_dadd+0x212>
 800123c:	0019      	movs	r1, r3
 800123e:	4311      	orrs	r1, r2
 8001240:	d100      	bne.n	8001244 <__aeabi_dadd+0x2ec>
 8001242:	e19e      	b.n	8001582 <__aeabi_dadd+0x62a>
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	0309      	lsls	r1, r1, #12
 8001248:	430a      	orrs	r2, r1
 800124a:	0312      	lsls	r2, r2, #12
 800124c:	0b12      	lsrs	r2, r2, #12
 800124e:	4d41      	ldr	r5, [pc, #260]	; (8001354 <__aeabi_dadd+0x3fc>)
 8001250:	e78f      	b.n	8001172 <__aeabi_dadd+0x21a>
 8001252:	0015      	movs	r5, r2
 8001254:	2200      	movs	r2, #0
 8001256:	2300      	movs	r3, #0
 8001258:	e78b      	b.n	8001172 <__aeabi_dadd+0x21a>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x308>
 800125e:	e0c7      	b.n	80013f0 <__aeabi_dadd+0x498>
 8001260:	1c6b      	adds	r3, r5, #1
 8001262:	055f      	lsls	r7, r3, #21
 8001264:	0d7f      	lsrs	r7, r7, #21
 8001266:	2f01      	cmp	r7, #1
 8001268:	dc00      	bgt.n	800126c <__aeabi_dadd+0x314>
 800126a:	e0f1      	b.n	8001450 <__aeabi_dadd+0x4f8>
 800126c:	4d39      	ldr	r5, [pc, #228]	; (8001354 <__aeabi_dadd+0x3fc>)
 800126e:	42ab      	cmp	r3, r5
 8001270:	d100      	bne.n	8001274 <__aeabi_dadd+0x31c>
 8001272:	e0b9      	b.n	80013e8 <__aeabi_dadd+0x490>
 8001274:	1885      	adds	r5, r0, r2
 8001276:	000a      	movs	r2, r1
 8001278:	4285      	cmp	r5, r0
 800127a:	4189      	sbcs	r1, r1
 800127c:	4442      	add	r2, r8
 800127e:	4249      	negs	r1, r1
 8001280:	1851      	adds	r1, r2, r1
 8001282:	2207      	movs	r2, #7
 8001284:	07cf      	lsls	r7, r1, #31
 8001286:	086d      	lsrs	r5, r5, #1
 8001288:	432f      	orrs	r7, r5
 800128a:	0849      	lsrs	r1, r1, #1
 800128c:	403a      	ands	r2, r7
 800128e:	001d      	movs	r5, r3
 8001290:	e6c2      	b.n	8001018 <__aeabi_dadd+0xc0>
 8001292:	2207      	movs	r2, #7
 8001294:	4930      	ldr	r1, [pc, #192]	; (8001358 <__aeabi_dadd+0x400>)
 8001296:	1aed      	subs	r5, r5, r3
 8001298:	4031      	ands	r1, r6
 800129a:	403a      	ands	r2, r7
 800129c:	e6bc      	b.n	8001018 <__aeabi_dadd+0xc0>
 800129e:	003e      	movs	r6, r7
 80012a0:	3828      	subs	r0, #40	; 0x28
 80012a2:	4086      	lsls	r6, r0
 80012a4:	2700      	movs	r7, #0
 80012a6:	e69f      	b.n	8000fe8 <__aeabi_dadd+0x90>
 80012a8:	0038      	movs	r0, r7
 80012aa:	f000 ffbb 	bl	8002224 <__clzsi2>
 80012ae:	3020      	adds	r0, #32
 80012b0:	e68e      	b.n	8000fd0 <__aeabi_dadd+0x78>
 80012b2:	4643      	mov	r3, r8
 80012b4:	4313      	orrs	r3, r2
 80012b6:	001f      	movs	r7, r3
 80012b8:	1e7a      	subs	r2, r7, #1
 80012ba:	4197      	sbcs	r7, r2
 80012bc:	1bc7      	subs	r7, r0, r7
 80012be:	42b8      	cmp	r0, r7
 80012c0:	4180      	sbcs	r0, r0
 80012c2:	4240      	negs	r0, r0
 80012c4:	1a09      	subs	r1, r1, r0
 80012c6:	e678      	b.n	8000fba <__aeabi_dadd+0x62>
 80012c8:	000e      	movs	r6, r1
 80012ca:	003b      	movs	r3, r7
 80012cc:	4306      	orrs	r6, r0
 80012ce:	4313      	orrs	r3, r2
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d161      	bne.n	8001398 <__aeabi_dadd+0x440>
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d000      	beq.n	80012da <__aeabi_dadd+0x382>
 80012d8:	e0f4      	b.n	80014c4 <__aeabi_dadd+0x56c>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dadd+0x388>
 80012de:	e11b      	b.n	8001518 <__aeabi_dadd+0x5c0>
 80012e0:	4664      	mov	r4, ip
 80012e2:	0039      	movs	r1, r7
 80012e4:	0010      	movs	r0, r2
 80012e6:	e739      	b.n	800115c <__aeabi_dadd+0x204>
 80012e8:	4f1a      	ldr	r7, [pc, #104]	; (8001354 <__aeabi_dadd+0x3fc>)
 80012ea:	42bb      	cmp	r3, r7
 80012ec:	d07a      	beq.n	80013e4 <__aeabi_dadd+0x48c>
 80012ee:	0033      	movs	r3, r6
 80012f0:	e6ff      	b.n	80010f2 <__aeabi_dadd+0x19a>
 80012f2:	0030      	movs	r0, r6
 80012f4:	3d1f      	subs	r5, #31
 80012f6:	40e8      	lsrs	r0, r5
 80012f8:	2b20      	cmp	r3, #32
 80012fa:	d003      	beq.n	8001304 <__aeabi_dadd+0x3ac>
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	409e      	lsls	r6, r3
 8001302:	4337      	orrs	r7, r6
 8001304:	1e7b      	subs	r3, r7, #1
 8001306:	419f      	sbcs	r7, r3
 8001308:	2207      	movs	r2, #7
 800130a:	4307      	orrs	r7, r0
 800130c:	403a      	ands	r2, r7
 800130e:	2100      	movs	r1, #0
 8001310:	2500      	movs	r5, #0
 8001312:	e789      	b.n	8001228 <__aeabi_dadd+0x2d0>
 8001314:	1a17      	subs	r7, r2, r0
 8001316:	4643      	mov	r3, r8
 8001318:	42ba      	cmp	r2, r7
 800131a:	41b6      	sbcs	r6, r6
 800131c:	1a59      	subs	r1, r3, r1
 800131e:	4276      	negs	r6, r6
 8001320:	1b8e      	subs	r6, r1, r6
 8001322:	4664      	mov	r4, ip
 8001324:	e64e      	b.n	8000fc4 <__aeabi_dadd+0x6c>
 8001326:	2b1f      	cmp	r3, #31
 8001328:	dd00      	ble.n	800132c <__aeabi_dadd+0x3d4>
 800132a:	e0ad      	b.n	8001488 <__aeabi_dadd+0x530>
 800132c:	2620      	movs	r6, #32
 800132e:	4647      	mov	r7, r8
 8001330:	1af6      	subs	r6, r6, r3
 8001332:	40b7      	lsls	r7, r6
 8001334:	46b9      	mov	r9, r7
 8001336:	0017      	movs	r7, r2
 8001338:	46b2      	mov	sl, r6
 800133a:	40df      	lsrs	r7, r3
 800133c:	464e      	mov	r6, r9
 800133e:	433e      	orrs	r6, r7
 8001340:	0037      	movs	r7, r6
 8001342:	4656      	mov	r6, sl
 8001344:	40b2      	lsls	r2, r6
 8001346:	1e56      	subs	r6, r2, #1
 8001348:	41b2      	sbcs	r2, r6
 800134a:	4317      	orrs	r7, r2
 800134c:	4642      	mov	r2, r8
 800134e:	40da      	lsrs	r2, r3
 8001350:	1889      	adds	r1, r1, r2
 8001352:	e6ae      	b.n	80010b2 <__aeabi_dadd+0x15a>
 8001354:	000007ff 	.word	0x000007ff
 8001358:	ff7fffff 	.word	0xff7fffff
 800135c:	800fffff 	.word	0x800fffff
 8001360:	2620      	movs	r6, #32
 8001362:	4647      	mov	r7, r8
 8001364:	1af6      	subs	r6, r6, r3
 8001366:	40b7      	lsls	r7, r6
 8001368:	46b9      	mov	r9, r7
 800136a:	0017      	movs	r7, r2
 800136c:	46b2      	mov	sl, r6
 800136e:	40df      	lsrs	r7, r3
 8001370:	464e      	mov	r6, r9
 8001372:	433e      	orrs	r6, r7
 8001374:	0037      	movs	r7, r6
 8001376:	4656      	mov	r6, sl
 8001378:	40b2      	lsls	r2, r6
 800137a:	1e56      	subs	r6, r2, #1
 800137c:	41b2      	sbcs	r2, r6
 800137e:	4317      	orrs	r7, r2
 8001380:	4642      	mov	r2, r8
 8001382:	40da      	lsrs	r2, r3
 8001384:	1a89      	subs	r1, r1, r2
 8001386:	e799      	b.n	80012bc <__aeabi_dadd+0x364>
 8001388:	4c7f      	ldr	r4, [pc, #508]	; (8001588 <__aeabi_dadd+0x630>)
 800138a:	42a6      	cmp	r6, r4
 800138c:	d05b      	beq.n	8001446 <__aeabi_dadd+0x4ee>
 800138e:	2480      	movs	r4, #128	; 0x80
 8001390:	0424      	lsls	r4, r4, #16
 8001392:	425b      	negs	r3, r3
 8001394:	4321      	orrs	r1, r4
 8001396:	e727      	b.n	80011e8 <__aeabi_dadd+0x290>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d10c      	bne.n	80013b6 <__aeabi_dadd+0x45e>
 800139c:	2b00      	cmp	r3, #0
 800139e:	d100      	bne.n	80013a2 <__aeabi_dadd+0x44a>
 80013a0:	e0cb      	b.n	800153a <__aeabi_dadd+0x5e2>
 80013a2:	4664      	mov	r4, ip
 80013a4:	0039      	movs	r1, r7
 80013a6:	0010      	movs	r0, r2
 80013a8:	4d77      	ldr	r5, [pc, #476]	; (8001588 <__aeabi_dadd+0x630>)
 80013aa:	e6d7      	b.n	800115c <__aeabi_dadd+0x204>
 80013ac:	4f76      	ldr	r7, [pc, #472]	; (8001588 <__aeabi_dadd+0x630>)
 80013ae:	42bb      	cmp	r3, r7
 80013b0:	d018      	beq.n	80013e4 <__aeabi_dadd+0x48c>
 80013b2:	0033      	movs	r3, r6
 80013b4:	e675      	b.n	80010a2 <__aeabi_dadd+0x14a>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d014      	beq.n	80013e4 <__aeabi_dadd+0x48c>
 80013ba:	074b      	lsls	r3, r1, #29
 80013bc:	08c0      	lsrs	r0, r0, #3
 80013be:	4318      	orrs	r0, r3
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	08c9      	lsrs	r1, r1, #3
 80013c4:	031b      	lsls	r3, r3, #12
 80013c6:	4219      	tst	r1, r3
 80013c8:	d007      	beq.n	80013da <__aeabi_dadd+0x482>
 80013ca:	08fc      	lsrs	r4, r7, #3
 80013cc:	421c      	tst	r4, r3
 80013ce:	d104      	bne.n	80013da <__aeabi_dadd+0x482>
 80013d0:	0779      	lsls	r1, r7, #29
 80013d2:	08d0      	lsrs	r0, r2, #3
 80013d4:	4308      	orrs	r0, r1
 80013d6:	46e1      	mov	r9, ip
 80013d8:	0021      	movs	r1, r4
 80013da:	464c      	mov	r4, r9
 80013dc:	0f42      	lsrs	r2, r0, #29
 80013de:	00c9      	lsls	r1, r1, #3
 80013e0:	4311      	orrs	r1, r2
 80013e2:	00c0      	lsls	r0, r0, #3
 80013e4:	4d68      	ldr	r5, [pc, #416]	; (8001588 <__aeabi_dadd+0x630>)
 80013e6:	e6b9      	b.n	800115c <__aeabi_dadd+0x204>
 80013e8:	001d      	movs	r5, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	2300      	movs	r3, #0
 80013ee:	e6c0      	b.n	8001172 <__aeabi_dadd+0x21a>
 80013f0:	2d00      	cmp	r5, #0
 80013f2:	d15b      	bne.n	80014ac <__aeabi_dadd+0x554>
 80013f4:	000d      	movs	r5, r1
 80013f6:	4305      	orrs	r5, r0
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x4a4>
 80013fa:	e6e2      	b.n	80011c2 <__aeabi_dadd+0x26a>
 80013fc:	1c5d      	adds	r5, r3, #1
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x4aa>
 8001400:	e0b0      	b.n	8001564 <__aeabi_dadd+0x60c>
 8001402:	4d61      	ldr	r5, [pc, #388]	; (8001588 <__aeabi_dadd+0x630>)
 8001404:	42ae      	cmp	r6, r5
 8001406:	d01f      	beq.n	8001448 <__aeabi_dadd+0x4f0>
 8001408:	43db      	mvns	r3, r3
 800140a:	2b38      	cmp	r3, #56	; 0x38
 800140c:	dc71      	bgt.n	80014f2 <__aeabi_dadd+0x59a>
 800140e:	2b1f      	cmp	r3, #31
 8001410:	dd00      	ble.n	8001414 <__aeabi_dadd+0x4bc>
 8001412:	e096      	b.n	8001542 <__aeabi_dadd+0x5ea>
 8001414:	2520      	movs	r5, #32
 8001416:	000f      	movs	r7, r1
 8001418:	1aed      	subs	r5, r5, r3
 800141a:	40af      	lsls	r7, r5
 800141c:	46b9      	mov	r9, r7
 800141e:	0007      	movs	r7, r0
 8001420:	46aa      	mov	sl, r5
 8001422:	40df      	lsrs	r7, r3
 8001424:	464d      	mov	r5, r9
 8001426:	433d      	orrs	r5, r7
 8001428:	002f      	movs	r7, r5
 800142a:	4655      	mov	r5, sl
 800142c:	40a8      	lsls	r0, r5
 800142e:	40d9      	lsrs	r1, r3
 8001430:	1e45      	subs	r5, r0, #1
 8001432:	41a8      	sbcs	r0, r5
 8001434:	4488      	add	r8, r1
 8001436:	4307      	orrs	r7, r0
 8001438:	18bf      	adds	r7, r7, r2
 800143a:	4297      	cmp	r7, r2
 800143c:	4192      	sbcs	r2, r2
 800143e:	4251      	negs	r1, r2
 8001440:	4441      	add	r1, r8
 8001442:	0035      	movs	r5, r6
 8001444:	e63a      	b.n	80010bc <__aeabi_dadd+0x164>
 8001446:	4664      	mov	r4, ip
 8001448:	0035      	movs	r5, r6
 800144a:	4641      	mov	r1, r8
 800144c:	0010      	movs	r0, r2
 800144e:	e685      	b.n	800115c <__aeabi_dadd+0x204>
 8001450:	000b      	movs	r3, r1
 8001452:	4303      	orrs	r3, r0
 8001454:	2d00      	cmp	r5, #0
 8001456:	d000      	beq.n	800145a <__aeabi_dadd+0x502>
 8001458:	e663      	b.n	8001122 <__aeabi_dadd+0x1ca>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f5      	beq.n	800144a <__aeabi_dadd+0x4f2>
 800145e:	4643      	mov	r3, r8
 8001460:	4313      	orrs	r3, r2
 8001462:	d100      	bne.n	8001466 <__aeabi_dadd+0x50e>
 8001464:	e67a      	b.n	800115c <__aeabi_dadd+0x204>
 8001466:	1887      	adds	r7, r0, r2
 8001468:	4287      	cmp	r7, r0
 800146a:	4180      	sbcs	r0, r0
 800146c:	2207      	movs	r2, #7
 800146e:	4441      	add	r1, r8
 8001470:	4240      	negs	r0, r0
 8001472:	1809      	adds	r1, r1, r0
 8001474:	403a      	ands	r2, r7
 8001476:	020b      	lsls	r3, r1, #8
 8001478:	d400      	bmi.n	800147c <__aeabi_dadd+0x524>
 800147a:	e6d5      	b.n	8001228 <__aeabi_dadd+0x2d0>
 800147c:	4b43      	ldr	r3, [pc, #268]	; (800158c <__aeabi_dadd+0x634>)
 800147e:	3501      	adds	r5, #1
 8001480:	4019      	ands	r1, r3
 8001482:	e5c9      	b.n	8001018 <__aeabi_dadd+0xc0>
 8001484:	0038      	movs	r0, r7
 8001486:	e669      	b.n	800115c <__aeabi_dadd+0x204>
 8001488:	001e      	movs	r6, r3
 800148a:	4647      	mov	r7, r8
 800148c:	3e20      	subs	r6, #32
 800148e:	40f7      	lsrs	r7, r6
 8001490:	46bc      	mov	ip, r7
 8001492:	2b20      	cmp	r3, #32
 8001494:	d004      	beq.n	80014a0 <__aeabi_dadd+0x548>
 8001496:	2640      	movs	r6, #64	; 0x40
 8001498:	1af3      	subs	r3, r6, r3
 800149a:	4646      	mov	r6, r8
 800149c:	409e      	lsls	r6, r3
 800149e:	4332      	orrs	r2, r6
 80014a0:	0017      	movs	r7, r2
 80014a2:	4663      	mov	r3, ip
 80014a4:	1e7a      	subs	r2, r7, #1
 80014a6:	4197      	sbcs	r7, r2
 80014a8:	431f      	orrs	r7, r3
 80014aa:	e602      	b.n	80010b2 <__aeabi_dadd+0x15a>
 80014ac:	4d36      	ldr	r5, [pc, #216]	; (8001588 <__aeabi_dadd+0x630>)
 80014ae:	42ae      	cmp	r6, r5
 80014b0:	d0ca      	beq.n	8001448 <__aeabi_dadd+0x4f0>
 80014b2:	2580      	movs	r5, #128	; 0x80
 80014b4:	042d      	lsls	r5, r5, #16
 80014b6:	425b      	negs	r3, r3
 80014b8:	4329      	orrs	r1, r5
 80014ba:	e7a6      	b.n	800140a <__aeabi_dadd+0x4b2>
 80014bc:	4308      	orrs	r0, r1
 80014be:	1e41      	subs	r1, r0, #1
 80014c0:	4188      	sbcs	r0, r1
 80014c2:	e6a6      	b.n	8001212 <__aeabi_dadd+0x2ba>
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d100      	bne.n	80014ca <__aeabi_dadd+0x572>
 80014c8:	e648      	b.n	800115c <__aeabi_dadd+0x204>
 80014ca:	1a87      	subs	r7, r0, r2
 80014cc:	4643      	mov	r3, r8
 80014ce:	42b8      	cmp	r0, r7
 80014d0:	41b6      	sbcs	r6, r6
 80014d2:	1acb      	subs	r3, r1, r3
 80014d4:	4276      	negs	r6, r6
 80014d6:	1b9e      	subs	r6, r3, r6
 80014d8:	0233      	lsls	r3, r6, #8
 80014da:	d54b      	bpl.n	8001574 <__aeabi_dadd+0x61c>
 80014dc:	1a17      	subs	r7, r2, r0
 80014de:	4643      	mov	r3, r8
 80014e0:	42ba      	cmp	r2, r7
 80014e2:	4192      	sbcs	r2, r2
 80014e4:	1a59      	subs	r1, r3, r1
 80014e6:	4252      	negs	r2, r2
 80014e8:	1a89      	subs	r1, r1, r2
 80014ea:	2207      	movs	r2, #7
 80014ec:	4664      	mov	r4, ip
 80014ee:	403a      	ands	r2, r7
 80014f0:	e592      	b.n	8001018 <__aeabi_dadd+0xc0>
 80014f2:	4301      	orrs	r1, r0
 80014f4:	000f      	movs	r7, r1
 80014f6:	1e79      	subs	r1, r7, #1
 80014f8:	418f      	sbcs	r7, r1
 80014fa:	e79d      	b.n	8001438 <__aeabi_dadd+0x4e0>
 80014fc:	001c      	movs	r4, r3
 80014fe:	000f      	movs	r7, r1
 8001500:	3c20      	subs	r4, #32
 8001502:	40e7      	lsrs	r7, r4
 8001504:	2b20      	cmp	r3, #32
 8001506:	d003      	beq.n	8001510 <__aeabi_dadd+0x5b8>
 8001508:	2440      	movs	r4, #64	; 0x40
 800150a:	1ae3      	subs	r3, r4, r3
 800150c:	4099      	lsls	r1, r3
 800150e:	4308      	orrs	r0, r1
 8001510:	1e41      	subs	r1, r0, #1
 8001512:	4188      	sbcs	r0, r1
 8001514:	4338      	orrs	r0, r7
 8001516:	e67c      	b.n	8001212 <__aeabi_dadd+0x2ba>
 8001518:	2200      	movs	r2, #0
 800151a:	2400      	movs	r4, #0
 800151c:	e625      	b.n	800116a <__aeabi_dadd+0x212>
 800151e:	1a17      	subs	r7, r2, r0
 8001520:	4643      	mov	r3, r8
 8001522:	42ba      	cmp	r2, r7
 8001524:	4192      	sbcs	r2, r2
 8001526:	1a59      	subs	r1, r3, r1
 8001528:	4252      	negs	r2, r2
 800152a:	1a89      	subs	r1, r1, r2
 800152c:	4664      	mov	r4, ip
 800152e:	0035      	movs	r5, r6
 8001530:	e543      	b.n	8000fba <__aeabi_dadd+0x62>
 8001532:	4641      	mov	r1, r8
 8001534:	0010      	movs	r0, r2
 8001536:	4d14      	ldr	r5, [pc, #80]	; (8001588 <__aeabi_dadd+0x630>)
 8001538:	e610      	b.n	800115c <__aeabi_dadd+0x204>
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	2400      	movs	r4, #0
 800153e:	0312      	lsls	r2, r2, #12
 8001540:	e680      	b.n	8001244 <__aeabi_dadd+0x2ec>
 8001542:	001d      	movs	r5, r3
 8001544:	000f      	movs	r7, r1
 8001546:	3d20      	subs	r5, #32
 8001548:	40ef      	lsrs	r7, r5
 800154a:	46bc      	mov	ip, r7
 800154c:	2b20      	cmp	r3, #32
 800154e:	d003      	beq.n	8001558 <__aeabi_dadd+0x600>
 8001550:	2540      	movs	r5, #64	; 0x40
 8001552:	1aeb      	subs	r3, r5, r3
 8001554:	4099      	lsls	r1, r3
 8001556:	4308      	orrs	r0, r1
 8001558:	0007      	movs	r7, r0
 800155a:	4663      	mov	r3, ip
 800155c:	1e78      	subs	r0, r7, #1
 800155e:	4187      	sbcs	r7, r0
 8001560:	431f      	orrs	r7, r3
 8001562:	e769      	b.n	8001438 <__aeabi_dadd+0x4e0>
 8001564:	1887      	adds	r7, r0, r2
 8001566:	4297      	cmp	r7, r2
 8001568:	419b      	sbcs	r3, r3
 800156a:	4441      	add	r1, r8
 800156c:	425b      	negs	r3, r3
 800156e:	18c9      	adds	r1, r1, r3
 8001570:	0035      	movs	r5, r6
 8001572:	e5a3      	b.n	80010bc <__aeabi_dadd+0x164>
 8001574:	003b      	movs	r3, r7
 8001576:	4333      	orrs	r3, r6
 8001578:	d0ce      	beq.n	8001518 <__aeabi_dadd+0x5c0>
 800157a:	2207      	movs	r2, #7
 800157c:	0031      	movs	r1, r6
 800157e:	403a      	ands	r2, r7
 8001580:	e652      	b.n	8001228 <__aeabi_dadd+0x2d0>
 8001582:	2300      	movs	r3, #0
 8001584:	001a      	movs	r2, r3
 8001586:	e5f4      	b.n	8001172 <__aeabi_dadd+0x21a>
 8001588:	000007ff 	.word	0x000007ff
 800158c:	ff7fffff 	.word	0xff7fffff

08001590 <__aeabi_ddiv>:
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	4657      	mov	r7, sl
 8001594:	46de      	mov	lr, fp
 8001596:	464e      	mov	r6, r9
 8001598:	4645      	mov	r5, r8
 800159a:	b5e0      	push	{r5, r6, r7, lr}
 800159c:	4683      	mov	fp, r0
 800159e:	0007      	movs	r7, r0
 80015a0:	030e      	lsls	r6, r1, #12
 80015a2:	0048      	lsls	r0, r1, #1
 80015a4:	b085      	sub	sp, #20
 80015a6:	4692      	mov	sl, r2
 80015a8:	001c      	movs	r4, r3
 80015aa:	0b36      	lsrs	r6, r6, #12
 80015ac:	0d40      	lsrs	r0, r0, #21
 80015ae:	0fcd      	lsrs	r5, r1, #31
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d100      	bne.n	80015b6 <__aeabi_ddiv+0x26>
 80015b4:	e09d      	b.n	80016f2 <__aeabi_ddiv+0x162>
 80015b6:	4b95      	ldr	r3, [pc, #596]	; (800180c <__aeabi_ddiv+0x27c>)
 80015b8:	4298      	cmp	r0, r3
 80015ba:	d039      	beq.n	8001630 <__aeabi_ddiv+0xa0>
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	00f6      	lsls	r6, r6, #3
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	431e      	orrs	r6, r3
 80015c4:	4a92      	ldr	r2, [pc, #584]	; (8001810 <__aeabi_ddiv+0x280>)
 80015c6:	0f7b      	lsrs	r3, r7, #29
 80015c8:	4333      	orrs	r3, r6
 80015ca:	4699      	mov	r9, r3
 80015cc:	4694      	mov	ip, r2
 80015ce:	0003      	movs	r3, r0
 80015d0:	4463      	add	r3, ip
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	2600      	movs	r6, #0
 80015d8:	00ff      	lsls	r7, r7, #3
 80015da:	9302      	str	r3, [sp, #8]
 80015dc:	0323      	lsls	r3, r4, #12
 80015de:	0b1b      	lsrs	r3, r3, #12
 80015e0:	4698      	mov	r8, r3
 80015e2:	0063      	lsls	r3, r4, #1
 80015e4:	0fe4      	lsrs	r4, r4, #31
 80015e6:	4652      	mov	r2, sl
 80015e8:	0d5b      	lsrs	r3, r3, #21
 80015ea:	9401      	str	r4, [sp, #4]
 80015ec:	d100      	bne.n	80015f0 <__aeabi_ddiv+0x60>
 80015ee:	e0b3      	b.n	8001758 <__aeabi_ddiv+0x1c8>
 80015f0:	4986      	ldr	r1, [pc, #536]	; (800180c <__aeabi_ddiv+0x27c>)
 80015f2:	428b      	cmp	r3, r1
 80015f4:	d100      	bne.n	80015f8 <__aeabi_ddiv+0x68>
 80015f6:	e09e      	b.n	8001736 <__aeabi_ddiv+0x1a6>
 80015f8:	4642      	mov	r2, r8
 80015fa:	00d1      	lsls	r1, r2, #3
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	430a      	orrs	r2, r1
 8001602:	4651      	mov	r1, sl
 8001604:	0f49      	lsrs	r1, r1, #29
 8001606:	4311      	orrs	r1, r2
 8001608:	468b      	mov	fp, r1
 800160a:	4981      	ldr	r1, [pc, #516]	; (8001810 <__aeabi_ddiv+0x280>)
 800160c:	4652      	mov	r2, sl
 800160e:	468c      	mov	ip, r1
 8001610:	9900      	ldr	r1, [sp, #0]
 8001612:	4463      	add	r3, ip
 8001614:	1acb      	subs	r3, r1, r3
 8001616:	2100      	movs	r1, #0
 8001618:	00d2      	lsls	r2, r2, #3
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	002b      	movs	r3, r5
 800161e:	4063      	eors	r3, r4
 8001620:	469a      	mov	sl, r3
 8001622:	2e0f      	cmp	r6, #15
 8001624:	d900      	bls.n	8001628 <__aeabi_ddiv+0x98>
 8001626:	e105      	b.n	8001834 <__aeabi_ddiv+0x2a4>
 8001628:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <__aeabi_ddiv+0x284>)
 800162a:	00b6      	lsls	r6, r6, #2
 800162c:	599b      	ldr	r3, [r3, r6]
 800162e:	469f      	mov	pc, r3
 8001630:	465b      	mov	r3, fp
 8001632:	4333      	orrs	r3, r6
 8001634:	4699      	mov	r9, r3
 8001636:	d000      	beq.n	800163a <__aeabi_ddiv+0xaa>
 8001638:	e0b8      	b.n	80017ac <__aeabi_ddiv+0x21c>
 800163a:	2302      	movs	r3, #2
 800163c:	2608      	movs	r6, #8
 800163e:	2700      	movs	r7, #0
 8001640:	9000      	str	r0, [sp, #0]
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	e7ca      	b.n	80015dc <__aeabi_ddiv+0x4c>
 8001646:	46cb      	mov	fp, r9
 8001648:	003a      	movs	r2, r7
 800164a:	9902      	ldr	r1, [sp, #8]
 800164c:	9501      	str	r5, [sp, #4]
 800164e:	9b01      	ldr	r3, [sp, #4]
 8001650:	469a      	mov	sl, r3
 8001652:	2902      	cmp	r1, #2
 8001654:	d027      	beq.n	80016a6 <__aeabi_ddiv+0x116>
 8001656:	2903      	cmp	r1, #3
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0xcc>
 800165a:	e280      	b.n	8001b5e <__aeabi_ddiv+0x5ce>
 800165c:	2901      	cmp	r1, #1
 800165e:	d044      	beq.n	80016ea <__aeabi_ddiv+0x15a>
 8001660:	496d      	ldr	r1, [pc, #436]	; (8001818 <__aeabi_ddiv+0x288>)
 8001662:	9b00      	ldr	r3, [sp, #0]
 8001664:	468c      	mov	ip, r1
 8001666:	4463      	add	r3, ip
 8001668:	001c      	movs	r4, r3
 800166a:	2c00      	cmp	r4, #0
 800166c:	dd38      	ble.n	80016e0 <__aeabi_ddiv+0x150>
 800166e:	0753      	lsls	r3, r2, #29
 8001670:	d000      	beq.n	8001674 <__aeabi_ddiv+0xe4>
 8001672:	e213      	b.n	8001a9c <__aeabi_ddiv+0x50c>
 8001674:	08d2      	lsrs	r2, r2, #3
 8001676:	465b      	mov	r3, fp
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	d509      	bpl.n	8001690 <__aeabi_ddiv+0x100>
 800167c:	4659      	mov	r1, fp
 800167e:	4b67      	ldr	r3, [pc, #412]	; (800181c <__aeabi_ddiv+0x28c>)
 8001680:	4019      	ands	r1, r3
 8001682:	468b      	mov	fp, r1
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	00c9      	lsls	r1, r1, #3
 8001688:	468c      	mov	ip, r1
 800168a:	9b00      	ldr	r3, [sp, #0]
 800168c:	4463      	add	r3, ip
 800168e:	001c      	movs	r4, r3
 8001690:	4b63      	ldr	r3, [pc, #396]	; (8001820 <__aeabi_ddiv+0x290>)
 8001692:	429c      	cmp	r4, r3
 8001694:	dc07      	bgt.n	80016a6 <__aeabi_ddiv+0x116>
 8001696:	465b      	mov	r3, fp
 8001698:	0564      	lsls	r4, r4, #21
 800169a:	075f      	lsls	r7, r3, #29
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	4317      	orrs	r7, r2
 80016a0:	0b1b      	lsrs	r3, r3, #12
 80016a2:	0d62      	lsrs	r2, r4, #21
 80016a4:	e002      	b.n	80016ac <__aeabi_ddiv+0x11c>
 80016a6:	2300      	movs	r3, #0
 80016a8:	2700      	movs	r7, #0
 80016aa:	4a58      	ldr	r2, [pc, #352]	; (800180c <__aeabi_ddiv+0x27c>)
 80016ac:	2100      	movs	r1, #0
 80016ae:	031b      	lsls	r3, r3, #12
 80016b0:	0b1c      	lsrs	r4, r3, #12
 80016b2:	0d0b      	lsrs	r3, r1, #20
 80016b4:	051b      	lsls	r3, r3, #20
 80016b6:	4323      	orrs	r3, r4
 80016b8:	0514      	lsls	r4, r2, #20
 80016ba:	4a5a      	ldr	r2, [pc, #360]	; (8001824 <__aeabi_ddiv+0x294>)
 80016bc:	0038      	movs	r0, r7
 80016be:	4013      	ands	r3, r2
 80016c0:	431c      	orrs	r4, r3
 80016c2:	4653      	mov	r3, sl
 80016c4:	0064      	lsls	r4, r4, #1
 80016c6:	07db      	lsls	r3, r3, #31
 80016c8:	0864      	lsrs	r4, r4, #1
 80016ca:	431c      	orrs	r4, r3
 80016cc:	0021      	movs	r1, r4
 80016ce:	b005      	add	sp, #20
 80016d0:	bc3c      	pop	{r2, r3, r4, r5}
 80016d2:	4690      	mov	r8, r2
 80016d4:	4699      	mov	r9, r3
 80016d6:	46a2      	mov	sl, r4
 80016d8:	46ab      	mov	fp, r5
 80016da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016dc:	2201      	movs	r2, #1
 80016de:	4252      	negs	r2, r2
 80016e0:	2301      	movs	r3, #1
 80016e2:	1b1b      	subs	r3, r3, r4
 80016e4:	2b38      	cmp	r3, #56	; 0x38
 80016e6:	dc00      	bgt.n	80016ea <__aeabi_ddiv+0x15a>
 80016e8:	e1ad      	b.n	8001a46 <__aeabi_ddiv+0x4b6>
 80016ea:	2200      	movs	r2, #0
 80016ec:	2300      	movs	r3, #0
 80016ee:	2700      	movs	r7, #0
 80016f0:	e7dc      	b.n	80016ac <__aeabi_ddiv+0x11c>
 80016f2:	465b      	mov	r3, fp
 80016f4:	4333      	orrs	r3, r6
 80016f6:	4699      	mov	r9, r3
 80016f8:	d05e      	beq.n	80017b8 <__aeabi_ddiv+0x228>
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x170>
 80016fe:	e18a      	b.n	8001a16 <__aeabi_ddiv+0x486>
 8001700:	0030      	movs	r0, r6
 8001702:	f000 fd8f 	bl	8002224 <__clzsi2>
 8001706:	0003      	movs	r3, r0
 8001708:	3b0b      	subs	r3, #11
 800170a:	2b1c      	cmp	r3, #28
 800170c:	dd00      	ble.n	8001710 <__aeabi_ddiv+0x180>
 800170e:	e17b      	b.n	8001a08 <__aeabi_ddiv+0x478>
 8001710:	221d      	movs	r2, #29
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	465a      	mov	r2, fp
 8001716:	0001      	movs	r1, r0
 8001718:	40da      	lsrs	r2, r3
 800171a:	3908      	subs	r1, #8
 800171c:	408e      	lsls	r6, r1
 800171e:	0013      	movs	r3, r2
 8001720:	465f      	mov	r7, fp
 8001722:	4333      	orrs	r3, r6
 8001724:	4699      	mov	r9, r3
 8001726:	408f      	lsls	r7, r1
 8001728:	4b3f      	ldr	r3, [pc, #252]	; (8001828 <__aeabi_ddiv+0x298>)
 800172a:	2600      	movs	r6, #0
 800172c:	1a1b      	subs	r3, r3, r0
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	e752      	b.n	80015dc <__aeabi_ddiv+0x4c>
 8001736:	4641      	mov	r1, r8
 8001738:	4653      	mov	r3, sl
 800173a:	430b      	orrs	r3, r1
 800173c:	493b      	ldr	r1, [pc, #236]	; (800182c <__aeabi_ddiv+0x29c>)
 800173e:	469b      	mov	fp, r3
 8001740:	468c      	mov	ip, r1
 8001742:	9b00      	ldr	r3, [sp, #0]
 8001744:	4463      	add	r3, ip
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	465b      	mov	r3, fp
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13b      	bne.n	80017c6 <__aeabi_ddiv+0x236>
 800174e:	2302      	movs	r3, #2
 8001750:	2200      	movs	r2, #0
 8001752:	431e      	orrs	r6, r3
 8001754:	2102      	movs	r1, #2
 8001756:	e761      	b.n	800161c <__aeabi_ddiv+0x8c>
 8001758:	4643      	mov	r3, r8
 800175a:	4313      	orrs	r3, r2
 800175c:	469b      	mov	fp, r3
 800175e:	d037      	beq.n	80017d0 <__aeabi_ddiv+0x240>
 8001760:	4643      	mov	r3, r8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <__aeabi_ddiv+0x1d8>
 8001766:	e162      	b.n	8001a2e <__aeabi_ddiv+0x49e>
 8001768:	4640      	mov	r0, r8
 800176a:	f000 fd5b 	bl	8002224 <__clzsi2>
 800176e:	0003      	movs	r3, r0
 8001770:	3b0b      	subs	r3, #11
 8001772:	2b1c      	cmp	r3, #28
 8001774:	dd00      	ble.n	8001778 <__aeabi_ddiv+0x1e8>
 8001776:	e153      	b.n	8001a20 <__aeabi_ddiv+0x490>
 8001778:	0002      	movs	r2, r0
 800177a:	4641      	mov	r1, r8
 800177c:	3a08      	subs	r2, #8
 800177e:	4091      	lsls	r1, r2
 8001780:	4688      	mov	r8, r1
 8001782:	211d      	movs	r1, #29
 8001784:	1acb      	subs	r3, r1, r3
 8001786:	4651      	mov	r1, sl
 8001788:	40d9      	lsrs	r1, r3
 800178a:	000b      	movs	r3, r1
 800178c:	4641      	mov	r1, r8
 800178e:	430b      	orrs	r3, r1
 8001790:	469b      	mov	fp, r3
 8001792:	4653      	mov	r3, sl
 8001794:	4093      	lsls	r3, r2
 8001796:	001a      	movs	r2, r3
 8001798:	9b00      	ldr	r3, [sp, #0]
 800179a:	4925      	ldr	r1, [pc, #148]	; (8001830 <__aeabi_ddiv+0x2a0>)
 800179c:	469c      	mov	ip, r3
 800179e:	4460      	add	r0, ip
 80017a0:	0003      	movs	r3, r0
 80017a2:	468c      	mov	ip, r1
 80017a4:	4463      	add	r3, ip
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2100      	movs	r1, #0
 80017aa:	e737      	b.n	800161c <__aeabi_ddiv+0x8c>
 80017ac:	2303      	movs	r3, #3
 80017ae:	46b1      	mov	r9, r6
 80017b0:	9000      	str	r0, [sp, #0]
 80017b2:	260c      	movs	r6, #12
 80017b4:	9302      	str	r3, [sp, #8]
 80017b6:	e711      	b.n	80015dc <__aeabi_ddiv+0x4c>
 80017b8:	2300      	movs	r3, #0
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	2604      	movs	r6, #4
 80017c0:	2700      	movs	r7, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e70a      	b.n	80015dc <__aeabi_ddiv+0x4c>
 80017c6:	2303      	movs	r3, #3
 80017c8:	46c3      	mov	fp, r8
 80017ca:	431e      	orrs	r6, r3
 80017cc:	2103      	movs	r1, #3
 80017ce:	e725      	b.n	800161c <__aeabi_ddiv+0x8c>
 80017d0:	3301      	adds	r3, #1
 80017d2:	431e      	orrs	r6, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	2101      	movs	r1, #1
 80017d8:	e720      	b.n	800161c <__aeabi_ddiv+0x8c>
 80017da:	2300      	movs	r3, #0
 80017dc:	469a      	mov	sl, r3
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	2700      	movs	r7, #0
 80017e2:	031b      	lsls	r3, r3, #12
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <__aeabi_ddiv+0x27c>)
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x11c>
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	4649      	mov	r1, r9
 80017ec:	031b      	lsls	r3, r3, #12
 80017ee:	4219      	tst	r1, r3
 80017f0:	d100      	bne.n	80017f4 <__aeabi_ddiv+0x264>
 80017f2:	e0e2      	b.n	80019ba <__aeabi_ddiv+0x42a>
 80017f4:	4659      	mov	r1, fp
 80017f6:	4219      	tst	r1, r3
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0x26c>
 80017fa:	e0de      	b.n	80019ba <__aeabi_ddiv+0x42a>
 80017fc:	430b      	orrs	r3, r1
 80017fe:	031b      	lsls	r3, r3, #12
 8001800:	0017      	movs	r7, r2
 8001802:	0b1b      	lsrs	r3, r3, #12
 8001804:	46a2      	mov	sl, r4
 8001806:	4a01      	ldr	r2, [pc, #4]	; (800180c <__aeabi_ddiv+0x27c>)
 8001808:	e750      	b.n	80016ac <__aeabi_ddiv+0x11c>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	000007ff 	.word	0x000007ff
 8001810:	fffffc01 	.word	0xfffffc01
 8001814:	08007000 	.word	0x08007000
 8001818:	000003ff 	.word	0x000003ff
 800181c:	feffffff 	.word	0xfeffffff
 8001820:	000007fe 	.word	0x000007fe
 8001824:	800fffff 	.word	0x800fffff
 8001828:	fffffc0d 	.word	0xfffffc0d
 800182c:	fffff801 	.word	0xfffff801
 8001830:	000003f3 	.word	0x000003f3
 8001834:	45d9      	cmp	r9, fp
 8001836:	d900      	bls.n	800183a <__aeabi_ddiv+0x2aa>
 8001838:	e0cb      	b.n	80019d2 <__aeabi_ddiv+0x442>
 800183a:	d100      	bne.n	800183e <__aeabi_ddiv+0x2ae>
 800183c:	e0c6      	b.n	80019cc <__aeabi_ddiv+0x43c>
 800183e:	003c      	movs	r4, r7
 8001840:	4648      	mov	r0, r9
 8001842:	2700      	movs	r7, #0
 8001844:	9b00      	ldr	r3, [sp, #0]
 8001846:	3b01      	subs	r3, #1
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	465b      	mov	r3, fp
 800184c:	0e16      	lsrs	r6, r2, #24
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	431e      	orrs	r6, r3
 8001852:	0213      	lsls	r3, r2, #8
 8001854:	4698      	mov	r8, r3
 8001856:	0433      	lsls	r3, r6, #16
 8001858:	0c1b      	lsrs	r3, r3, #16
 800185a:	4699      	mov	r9, r3
 800185c:	0c31      	lsrs	r1, r6, #16
 800185e:	9101      	str	r1, [sp, #4]
 8001860:	f7fe fcd8 	bl	8000214 <__aeabi_uidivmod>
 8001864:	464a      	mov	r2, r9
 8001866:	4342      	muls	r2, r0
 8001868:	040b      	lsls	r3, r1, #16
 800186a:	0c21      	lsrs	r1, r4, #16
 800186c:	0005      	movs	r5, r0
 800186e:	4319      	orrs	r1, r3
 8001870:	428a      	cmp	r2, r1
 8001872:	d907      	bls.n	8001884 <__aeabi_ddiv+0x2f4>
 8001874:	1989      	adds	r1, r1, r6
 8001876:	3d01      	subs	r5, #1
 8001878:	428e      	cmp	r6, r1
 800187a:	d803      	bhi.n	8001884 <__aeabi_ddiv+0x2f4>
 800187c:	428a      	cmp	r2, r1
 800187e:	d901      	bls.n	8001884 <__aeabi_ddiv+0x2f4>
 8001880:	1e85      	subs	r5, r0, #2
 8001882:	1989      	adds	r1, r1, r6
 8001884:	1a88      	subs	r0, r1, r2
 8001886:	9901      	ldr	r1, [sp, #4]
 8001888:	f7fe fcc4 	bl	8000214 <__aeabi_uidivmod>
 800188c:	0409      	lsls	r1, r1, #16
 800188e:	468c      	mov	ip, r1
 8001890:	464a      	mov	r2, r9
 8001892:	0421      	lsls	r1, r4, #16
 8001894:	4664      	mov	r4, ip
 8001896:	4342      	muls	r2, r0
 8001898:	0c09      	lsrs	r1, r1, #16
 800189a:	0003      	movs	r3, r0
 800189c:	4321      	orrs	r1, r4
 800189e:	428a      	cmp	r2, r1
 80018a0:	d904      	bls.n	80018ac <__aeabi_ddiv+0x31c>
 80018a2:	1989      	adds	r1, r1, r6
 80018a4:	3b01      	subs	r3, #1
 80018a6:	428e      	cmp	r6, r1
 80018a8:	d800      	bhi.n	80018ac <__aeabi_ddiv+0x31c>
 80018aa:	e0f1      	b.n	8001a90 <__aeabi_ddiv+0x500>
 80018ac:	042d      	lsls	r5, r5, #16
 80018ae:	431d      	orrs	r5, r3
 80018b0:	46ab      	mov	fp, r5
 80018b2:	4643      	mov	r3, r8
 80018b4:	1a89      	subs	r1, r1, r2
 80018b6:	4642      	mov	r2, r8
 80018b8:	0c28      	lsrs	r0, r5, #16
 80018ba:	0412      	lsls	r2, r2, #16
 80018bc:	0c1d      	lsrs	r5, r3, #16
 80018be:	465b      	mov	r3, fp
 80018c0:	0c14      	lsrs	r4, r2, #16
 80018c2:	0022      	movs	r2, r4
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	435a      	muls	r2, r3
 80018ca:	9403      	str	r4, [sp, #12]
 80018cc:	436b      	muls	r3, r5
 80018ce:	4344      	muls	r4, r0
 80018d0:	9502      	str	r5, [sp, #8]
 80018d2:	4368      	muls	r0, r5
 80018d4:	191b      	adds	r3, r3, r4
 80018d6:	0c15      	lsrs	r5, r2, #16
 80018d8:	18eb      	adds	r3, r5, r3
 80018da:	429c      	cmp	r4, r3
 80018dc:	d903      	bls.n	80018e6 <__aeabi_ddiv+0x356>
 80018de:	2480      	movs	r4, #128	; 0x80
 80018e0:	0264      	lsls	r4, r4, #9
 80018e2:	46a4      	mov	ip, r4
 80018e4:	4460      	add	r0, ip
 80018e6:	0c1c      	lsrs	r4, r3, #16
 80018e8:	0415      	lsls	r5, r2, #16
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	0c2d      	lsrs	r5, r5, #16
 80018ee:	1820      	adds	r0, r4, r0
 80018f0:	195d      	adds	r5, r3, r5
 80018f2:	4281      	cmp	r1, r0
 80018f4:	d377      	bcc.n	80019e6 <__aeabi_ddiv+0x456>
 80018f6:	d073      	beq.n	80019e0 <__aeabi_ddiv+0x450>
 80018f8:	1a0c      	subs	r4, r1, r0
 80018fa:	4aa2      	ldr	r2, [pc, #648]	; (8001b84 <__aeabi_ddiv+0x5f4>)
 80018fc:	1b7d      	subs	r5, r7, r5
 80018fe:	42af      	cmp	r7, r5
 8001900:	41bf      	sbcs	r7, r7
 8001902:	4694      	mov	ip, r2
 8001904:	9b00      	ldr	r3, [sp, #0]
 8001906:	427f      	negs	r7, r7
 8001908:	4463      	add	r3, ip
 800190a:	1be0      	subs	r0, r4, r7
 800190c:	001c      	movs	r4, r3
 800190e:	4286      	cmp	r6, r0
 8001910:	d100      	bne.n	8001914 <__aeabi_ddiv+0x384>
 8001912:	e0db      	b.n	8001acc <__aeabi_ddiv+0x53c>
 8001914:	9901      	ldr	r1, [sp, #4]
 8001916:	f7fe fc7d 	bl	8000214 <__aeabi_uidivmod>
 800191a:	464a      	mov	r2, r9
 800191c:	4342      	muls	r2, r0
 800191e:	040b      	lsls	r3, r1, #16
 8001920:	0c29      	lsrs	r1, r5, #16
 8001922:	0007      	movs	r7, r0
 8001924:	4319      	orrs	r1, r3
 8001926:	428a      	cmp	r2, r1
 8001928:	d907      	bls.n	800193a <__aeabi_ddiv+0x3aa>
 800192a:	1989      	adds	r1, r1, r6
 800192c:	3f01      	subs	r7, #1
 800192e:	428e      	cmp	r6, r1
 8001930:	d803      	bhi.n	800193a <__aeabi_ddiv+0x3aa>
 8001932:	428a      	cmp	r2, r1
 8001934:	d901      	bls.n	800193a <__aeabi_ddiv+0x3aa>
 8001936:	1e87      	subs	r7, r0, #2
 8001938:	1989      	adds	r1, r1, r6
 800193a:	1a88      	subs	r0, r1, r2
 800193c:	9901      	ldr	r1, [sp, #4]
 800193e:	f7fe fc69 	bl	8000214 <__aeabi_uidivmod>
 8001942:	0409      	lsls	r1, r1, #16
 8001944:	464a      	mov	r2, r9
 8001946:	4689      	mov	r9, r1
 8001948:	0429      	lsls	r1, r5, #16
 800194a:	464d      	mov	r5, r9
 800194c:	4342      	muls	r2, r0
 800194e:	0c09      	lsrs	r1, r1, #16
 8001950:	0003      	movs	r3, r0
 8001952:	4329      	orrs	r1, r5
 8001954:	428a      	cmp	r2, r1
 8001956:	d907      	bls.n	8001968 <__aeabi_ddiv+0x3d8>
 8001958:	1989      	adds	r1, r1, r6
 800195a:	3b01      	subs	r3, #1
 800195c:	428e      	cmp	r6, r1
 800195e:	d803      	bhi.n	8001968 <__aeabi_ddiv+0x3d8>
 8001960:	428a      	cmp	r2, r1
 8001962:	d901      	bls.n	8001968 <__aeabi_ddiv+0x3d8>
 8001964:	1e83      	subs	r3, r0, #2
 8001966:	1989      	adds	r1, r1, r6
 8001968:	043f      	lsls	r7, r7, #16
 800196a:	1a89      	subs	r1, r1, r2
 800196c:	003a      	movs	r2, r7
 800196e:	9f03      	ldr	r7, [sp, #12]
 8001970:	431a      	orrs	r2, r3
 8001972:	0038      	movs	r0, r7
 8001974:	0413      	lsls	r3, r2, #16
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	4358      	muls	r0, r3
 800197a:	4681      	mov	r9, r0
 800197c:	9802      	ldr	r0, [sp, #8]
 800197e:	0c15      	lsrs	r5, r2, #16
 8001980:	436f      	muls	r7, r5
 8001982:	4343      	muls	r3, r0
 8001984:	4345      	muls	r5, r0
 8001986:	4648      	mov	r0, r9
 8001988:	0c00      	lsrs	r0, r0, #16
 800198a:	4684      	mov	ip, r0
 800198c:	19db      	adds	r3, r3, r7
 800198e:	4463      	add	r3, ip
 8001990:	429f      	cmp	r7, r3
 8001992:	d903      	bls.n	800199c <__aeabi_ddiv+0x40c>
 8001994:	2080      	movs	r0, #128	; 0x80
 8001996:	0240      	lsls	r0, r0, #9
 8001998:	4684      	mov	ip, r0
 800199a:	4465      	add	r5, ip
 800199c:	4648      	mov	r0, r9
 800199e:	0c1f      	lsrs	r7, r3, #16
 80019a0:	0400      	lsls	r0, r0, #16
 80019a2:	041b      	lsls	r3, r3, #16
 80019a4:	0c00      	lsrs	r0, r0, #16
 80019a6:	197d      	adds	r5, r7, r5
 80019a8:	1818      	adds	r0, r3, r0
 80019aa:	42a9      	cmp	r1, r5
 80019ac:	d200      	bcs.n	80019b0 <__aeabi_ddiv+0x420>
 80019ae:	e084      	b.n	8001aba <__aeabi_ddiv+0x52a>
 80019b0:	d100      	bne.n	80019b4 <__aeabi_ddiv+0x424>
 80019b2:	e07f      	b.n	8001ab4 <__aeabi_ddiv+0x524>
 80019b4:	2301      	movs	r3, #1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	e657      	b.n	800166a <__aeabi_ddiv+0xda>
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	464a      	mov	r2, r9
 80019be:	031b      	lsls	r3, r3, #12
 80019c0:	4313      	orrs	r3, r2
 80019c2:	031b      	lsls	r3, r3, #12
 80019c4:	0b1b      	lsrs	r3, r3, #12
 80019c6:	46aa      	mov	sl, r5
 80019c8:	4a6f      	ldr	r2, [pc, #444]	; (8001b88 <__aeabi_ddiv+0x5f8>)
 80019ca:	e66f      	b.n	80016ac <__aeabi_ddiv+0x11c>
 80019cc:	42ba      	cmp	r2, r7
 80019ce:	d900      	bls.n	80019d2 <__aeabi_ddiv+0x442>
 80019d0:	e735      	b.n	800183e <__aeabi_ddiv+0x2ae>
 80019d2:	464b      	mov	r3, r9
 80019d4:	07dc      	lsls	r4, r3, #31
 80019d6:	0858      	lsrs	r0, r3, #1
 80019d8:	087b      	lsrs	r3, r7, #1
 80019da:	431c      	orrs	r4, r3
 80019dc:	07ff      	lsls	r7, r7, #31
 80019de:	e734      	b.n	800184a <__aeabi_ddiv+0x2ba>
 80019e0:	2400      	movs	r4, #0
 80019e2:	42af      	cmp	r7, r5
 80019e4:	d289      	bcs.n	80018fa <__aeabi_ddiv+0x36a>
 80019e6:	4447      	add	r7, r8
 80019e8:	4547      	cmp	r7, r8
 80019ea:	41a4      	sbcs	r4, r4
 80019ec:	465b      	mov	r3, fp
 80019ee:	4264      	negs	r4, r4
 80019f0:	19a4      	adds	r4, r4, r6
 80019f2:	1864      	adds	r4, r4, r1
 80019f4:	3b01      	subs	r3, #1
 80019f6:	42a6      	cmp	r6, r4
 80019f8:	d21e      	bcs.n	8001a38 <__aeabi_ddiv+0x4a8>
 80019fa:	42a0      	cmp	r0, r4
 80019fc:	d86d      	bhi.n	8001ada <__aeabi_ddiv+0x54a>
 80019fe:	d100      	bne.n	8001a02 <__aeabi_ddiv+0x472>
 8001a00:	e0b6      	b.n	8001b70 <__aeabi_ddiv+0x5e0>
 8001a02:	1a24      	subs	r4, r4, r0
 8001a04:	469b      	mov	fp, r3
 8001a06:	e778      	b.n	80018fa <__aeabi_ddiv+0x36a>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	465a      	mov	r2, fp
 8001a0c:	3b28      	subs	r3, #40	; 0x28
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	2700      	movs	r7, #0
 8001a12:	4691      	mov	r9, r2
 8001a14:	e688      	b.n	8001728 <__aeabi_ddiv+0x198>
 8001a16:	4658      	mov	r0, fp
 8001a18:	f000 fc04 	bl	8002224 <__clzsi2>
 8001a1c:	3020      	adds	r0, #32
 8001a1e:	e672      	b.n	8001706 <__aeabi_ddiv+0x176>
 8001a20:	0003      	movs	r3, r0
 8001a22:	4652      	mov	r2, sl
 8001a24:	3b28      	subs	r3, #40	; 0x28
 8001a26:	409a      	lsls	r2, r3
 8001a28:	4693      	mov	fp, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	e6b4      	b.n	8001798 <__aeabi_ddiv+0x208>
 8001a2e:	4650      	mov	r0, sl
 8001a30:	f000 fbf8 	bl	8002224 <__clzsi2>
 8001a34:	3020      	adds	r0, #32
 8001a36:	e69a      	b.n	800176e <__aeabi_ddiv+0x1de>
 8001a38:	42a6      	cmp	r6, r4
 8001a3a:	d1e2      	bne.n	8001a02 <__aeabi_ddiv+0x472>
 8001a3c:	45b8      	cmp	r8, r7
 8001a3e:	d9dc      	bls.n	80019fa <__aeabi_ddiv+0x46a>
 8001a40:	1a34      	subs	r4, r6, r0
 8001a42:	469b      	mov	fp, r3
 8001a44:	e759      	b.n	80018fa <__aeabi_ddiv+0x36a>
 8001a46:	2b1f      	cmp	r3, #31
 8001a48:	dc65      	bgt.n	8001b16 <__aeabi_ddiv+0x586>
 8001a4a:	4c50      	ldr	r4, [pc, #320]	; (8001b8c <__aeabi_ddiv+0x5fc>)
 8001a4c:	9900      	ldr	r1, [sp, #0]
 8001a4e:	46a4      	mov	ip, r4
 8001a50:	465c      	mov	r4, fp
 8001a52:	4461      	add	r1, ip
 8001a54:	0008      	movs	r0, r1
 8001a56:	408c      	lsls	r4, r1
 8001a58:	0011      	movs	r1, r2
 8001a5a:	4082      	lsls	r2, r0
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	1e50      	subs	r0, r2, #1
 8001a60:	4182      	sbcs	r2, r0
 8001a62:	430c      	orrs	r4, r1
 8001a64:	4314      	orrs	r4, r2
 8001a66:	465a      	mov	r2, fp
 8001a68:	40da      	lsrs	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	0762      	lsls	r2, r4, #29
 8001a6e:	d009      	beq.n	8001a84 <__aeabi_ddiv+0x4f4>
 8001a70:	220f      	movs	r2, #15
 8001a72:	4022      	ands	r2, r4
 8001a74:	2a04      	cmp	r2, #4
 8001a76:	d005      	beq.n	8001a84 <__aeabi_ddiv+0x4f4>
 8001a78:	0022      	movs	r2, r4
 8001a7a:	1d14      	adds	r4, r2, #4
 8001a7c:	4294      	cmp	r4, r2
 8001a7e:	4189      	sbcs	r1, r1
 8001a80:	4249      	negs	r1, r1
 8001a82:	185b      	adds	r3, r3, r1
 8001a84:	021a      	lsls	r2, r3, #8
 8001a86:	d562      	bpl.n	8001b4e <__aeabi_ddiv+0x5be>
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2700      	movs	r7, #0
 8001a8e:	e60d      	b.n	80016ac <__aeabi_ddiv+0x11c>
 8001a90:	428a      	cmp	r2, r1
 8001a92:	d800      	bhi.n	8001a96 <__aeabi_ddiv+0x506>
 8001a94:	e70a      	b.n	80018ac <__aeabi_ddiv+0x31c>
 8001a96:	1e83      	subs	r3, r0, #2
 8001a98:	1989      	adds	r1, r1, r6
 8001a9a:	e707      	b.n	80018ac <__aeabi_ddiv+0x31c>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d100      	bne.n	8001aa6 <__aeabi_ddiv+0x516>
 8001aa4:	e5e6      	b.n	8001674 <__aeabi_ddiv+0xe4>
 8001aa6:	1d17      	adds	r7, r2, #4
 8001aa8:	4297      	cmp	r7, r2
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	4253      	negs	r3, r2
 8001aae:	449b      	add	fp, r3
 8001ab0:	08fa      	lsrs	r2, r7, #3
 8001ab2:	e5e0      	b.n	8001676 <__aeabi_ddiv+0xe6>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0x52a>
 8001ab8:	e5d7      	b.n	800166a <__aeabi_ddiv+0xda>
 8001aba:	1871      	adds	r1, r6, r1
 8001abc:	1e53      	subs	r3, r2, #1
 8001abe:	42b1      	cmp	r1, r6
 8001ac0:	d327      	bcc.n	8001b12 <__aeabi_ddiv+0x582>
 8001ac2:	42a9      	cmp	r1, r5
 8001ac4:	d315      	bcc.n	8001af2 <__aeabi_ddiv+0x562>
 8001ac6:	d058      	beq.n	8001b7a <__aeabi_ddiv+0x5ea>
 8001ac8:	001a      	movs	r2, r3
 8001aca:	e773      	b.n	80019b4 <__aeabi_ddiv+0x424>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	dc00      	bgt.n	8001ad2 <__aeabi_ddiv+0x542>
 8001ad0:	e604      	b.n	80016dc <__aeabi_ddiv+0x14c>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	449b      	add	fp, r3
 8001ad8:	e5cd      	b.n	8001676 <__aeabi_ddiv+0xe6>
 8001ada:	2302      	movs	r3, #2
 8001adc:	4447      	add	r7, r8
 8001ade:	4547      	cmp	r7, r8
 8001ae0:	4189      	sbcs	r1, r1
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	469c      	mov	ip, r3
 8001ae6:	4249      	negs	r1, r1
 8001ae8:	1989      	adds	r1, r1, r6
 8001aea:	190c      	adds	r4, r1, r4
 8001aec:	44e3      	add	fp, ip
 8001aee:	1a24      	subs	r4, r4, r0
 8001af0:	e703      	b.n	80018fa <__aeabi_ddiv+0x36a>
 8001af2:	4643      	mov	r3, r8
 8001af4:	005f      	lsls	r7, r3, #1
 8001af6:	4547      	cmp	r7, r8
 8001af8:	419b      	sbcs	r3, r3
 8001afa:	46b8      	mov	r8, r7
 8001afc:	425b      	negs	r3, r3
 8001afe:	199e      	adds	r6, r3, r6
 8001b00:	3a02      	subs	r2, #2
 8001b02:	1989      	adds	r1, r1, r6
 8001b04:	42a9      	cmp	r1, r5
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x57a>
 8001b08:	e754      	b.n	80019b4 <__aeabi_ddiv+0x424>
 8001b0a:	4540      	cmp	r0, r8
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_ddiv+0x580>
 8001b0e:	e751      	b.n	80019b4 <__aeabi_ddiv+0x424>
 8001b10:	e5ab      	b.n	800166a <__aeabi_ddiv+0xda>
 8001b12:	001a      	movs	r2, r3
 8001b14:	e7f6      	b.n	8001b04 <__aeabi_ddiv+0x574>
 8001b16:	211f      	movs	r1, #31
 8001b18:	465f      	mov	r7, fp
 8001b1a:	4249      	negs	r1, r1
 8001b1c:	1b0c      	subs	r4, r1, r4
 8001b1e:	40e7      	lsrs	r7, r4
 8001b20:	2b20      	cmp	r3, #32
 8001b22:	d007      	beq.n	8001b34 <__aeabi_ddiv+0x5a4>
 8001b24:	491a      	ldr	r1, [pc, #104]	; (8001b90 <__aeabi_ddiv+0x600>)
 8001b26:	9b00      	ldr	r3, [sp, #0]
 8001b28:	468c      	mov	ip, r1
 8001b2a:	4463      	add	r3, ip
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	465b      	mov	r3, fp
 8001b30:	4083      	lsls	r3, r0
 8001b32:	431a      	orrs	r2, r3
 8001b34:	1e50      	subs	r0, r2, #1
 8001b36:	4182      	sbcs	r2, r0
 8001b38:	433a      	orrs	r2, r7
 8001b3a:	2707      	movs	r7, #7
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4017      	ands	r7, r2
 8001b40:	d009      	beq.n	8001b56 <__aeabi_ddiv+0x5c6>
 8001b42:	210f      	movs	r1, #15
 8001b44:	2300      	movs	r3, #0
 8001b46:	4011      	ands	r1, r2
 8001b48:	0014      	movs	r4, r2
 8001b4a:	2904      	cmp	r1, #4
 8001b4c:	d195      	bne.n	8001a7a <__aeabi_ddiv+0x4ea>
 8001b4e:	0022      	movs	r2, r4
 8001b50:	075f      	lsls	r7, r3, #29
 8001b52:	025b      	lsls	r3, r3, #9
 8001b54:	0b1b      	lsrs	r3, r3, #12
 8001b56:	08d2      	lsrs	r2, r2, #3
 8001b58:	4317      	orrs	r7, r2
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	e5a6      	b.n	80016ac <__aeabi_ddiv+0x11c>
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	4659      	mov	r1, fp
 8001b62:	031b      	lsls	r3, r3, #12
 8001b64:	430b      	orrs	r3, r1
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	0017      	movs	r7, r2
 8001b6a:	0b1b      	lsrs	r3, r3, #12
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <__aeabi_ddiv+0x5f8>)
 8001b6e:	e59d      	b.n	80016ac <__aeabi_ddiv+0x11c>
 8001b70:	42bd      	cmp	r5, r7
 8001b72:	d8b2      	bhi.n	8001ada <__aeabi_ddiv+0x54a>
 8001b74:	469b      	mov	fp, r3
 8001b76:	2400      	movs	r4, #0
 8001b78:	e6bf      	b.n	80018fa <__aeabi_ddiv+0x36a>
 8001b7a:	4580      	cmp	r8, r0
 8001b7c:	d3b9      	bcc.n	8001af2 <__aeabi_ddiv+0x562>
 8001b7e:	001a      	movs	r2, r3
 8001b80:	e7c3      	b.n	8001b0a <__aeabi_ddiv+0x57a>
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	000003ff 	.word	0x000003ff
 8001b88:	000007ff 	.word	0x000007ff
 8001b8c:	0000041e 	.word	0x0000041e
 8001b90:	0000043e 	.word	0x0000043e

08001b94 <__aeabi_dmul>:
 8001b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b96:	4657      	mov	r7, sl
 8001b98:	46de      	mov	lr, fp
 8001b9a:	464e      	mov	r6, r9
 8001b9c:	4645      	mov	r5, r8
 8001b9e:	b5e0      	push	{r5, r6, r7, lr}
 8001ba0:	4683      	mov	fp, r0
 8001ba2:	0006      	movs	r6, r0
 8001ba4:	030f      	lsls	r7, r1, #12
 8001ba6:	0048      	lsls	r0, r1, #1
 8001ba8:	b087      	sub	sp, #28
 8001baa:	4692      	mov	sl, r2
 8001bac:	001d      	movs	r5, r3
 8001bae:	0b3f      	lsrs	r7, r7, #12
 8001bb0:	0d40      	lsrs	r0, r0, #21
 8001bb2:	0fcc      	lsrs	r4, r1, #31
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dmul+0x26>
 8001bb8:	e06f      	b.n	8001c9a <__aeabi_dmul+0x106>
 8001bba:	4bde      	ldr	r3, [pc, #888]	; (8001f34 <__aeabi_dmul+0x3a0>)
 8001bbc:	4298      	cmp	r0, r3
 8001bbe:	d038      	beq.n	8001c32 <__aeabi_dmul+0x9e>
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	00ff      	lsls	r7, r7, #3
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	431f      	orrs	r7, r3
 8001bc8:	0f73      	lsrs	r3, r6, #29
 8001bca:	433b      	orrs	r3, r7
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	4bda      	ldr	r3, [pc, #872]	; (8001f38 <__aeabi_dmul+0x3a4>)
 8001bd0:	2700      	movs	r7, #0
 8001bd2:	4699      	mov	r9, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	469b      	mov	fp, r3
 8001bd8:	00f6      	lsls	r6, r6, #3
 8001bda:	4481      	add	r9, r0
 8001bdc:	032b      	lsls	r3, r5, #12
 8001bde:	0069      	lsls	r1, r5, #1
 8001be0:	0b1b      	lsrs	r3, r3, #12
 8001be2:	4652      	mov	r2, sl
 8001be4:	4698      	mov	r8, r3
 8001be6:	0d49      	lsrs	r1, r1, #21
 8001be8:	0fed      	lsrs	r5, r5, #31
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dmul+0x5c>
 8001bee:	e085      	b.n	8001cfc <__aeabi_dmul+0x168>
 8001bf0:	4bd0      	ldr	r3, [pc, #832]	; (8001f34 <__aeabi_dmul+0x3a0>)
 8001bf2:	4299      	cmp	r1, r3
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dmul+0x64>
 8001bf6:	e073      	b.n	8001ce0 <__aeabi_dmul+0x14c>
 8001bf8:	4643      	mov	r3, r8
 8001bfa:	00da      	lsls	r2, r3, #3
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4652      	mov	r2, sl
 8001c04:	48cc      	ldr	r0, [pc, #816]	; (8001f38 <__aeabi_dmul+0x3a4>)
 8001c06:	0f52      	lsrs	r2, r2, #29
 8001c08:	4684      	mov	ip, r0
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	4652      	mov	r2, sl
 8001c0e:	2000      	movs	r0, #0
 8001c10:	4461      	add	r1, ip
 8001c12:	00d2      	lsls	r2, r2, #3
 8001c14:	4489      	add	r9, r1
 8001c16:	0021      	movs	r1, r4
 8001c18:	4069      	eors	r1, r5
 8001c1a:	9100      	str	r1, [sp, #0]
 8001c1c:	468c      	mov	ip, r1
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4449      	add	r1, r9
 8001c22:	468a      	mov	sl, r1
 8001c24:	2f0f      	cmp	r7, #15
 8001c26:	d900      	bls.n	8001c2a <__aeabi_dmul+0x96>
 8001c28:	e090      	b.n	8001d4c <__aeabi_dmul+0x1b8>
 8001c2a:	49c4      	ldr	r1, [pc, #784]	; (8001f3c <__aeabi_dmul+0x3a8>)
 8001c2c:	00bf      	lsls	r7, r7, #2
 8001c2e:	59cf      	ldr	r7, [r1, r7]
 8001c30:	46bf      	mov	pc, r7
 8001c32:	465b      	mov	r3, fp
 8001c34:	433b      	orrs	r3, r7
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	d000      	beq.n	8001c3c <__aeabi_dmul+0xa8>
 8001c3a:	e16a      	b.n	8001f12 <__aeabi_dmul+0x37e>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	2708      	movs	r7, #8
 8001c40:	2600      	movs	r6, #0
 8001c42:	4681      	mov	r9, r0
 8001c44:	469b      	mov	fp, r3
 8001c46:	e7c9      	b.n	8001bdc <__aeabi_dmul+0x48>
 8001c48:	0032      	movs	r2, r6
 8001c4a:	4658      	mov	r0, fp
 8001c4c:	9b01      	ldr	r3, [sp, #4]
 8001c4e:	4661      	mov	r1, ip
 8001c50:	9100      	str	r1, [sp, #0]
 8001c52:	2802      	cmp	r0, #2
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dmul+0xc4>
 8001c56:	e075      	b.n	8001d44 <__aeabi_dmul+0x1b0>
 8001c58:	2803      	cmp	r0, #3
 8001c5a:	d100      	bne.n	8001c5e <__aeabi_dmul+0xca>
 8001c5c:	e1fe      	b.n	800205c <__aeabi_dmul+0x4c8>
 8001c5e:	2801      	cmp	r0, #1
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dmul+0xd0>
 8001c62:	e12c      	b.n	8001ebe <__aeabi_dmul+0x32a>
 8001c64:	2300      	movs	r3, #0
 8001c66:	2700      	movs	r7, #0
 8001c68:	2600      	movs	r6, #0
 8001c6a:	2500      	movs	r5, #0
 8001c6c:	033f      	lsls	r7, r7, #12
 8001c6e:	0d2a      	lsrs	r2, r5, #20
 8001c70:	0b3f      	lsrs	r7, r7, #12
 8001c72:	48b3      	ldr	r0, [pc, #716]	; (8001f40 <__aeabi_dmul+0x3ac>)
 8001c74:	0512      	lsls	r2, r2, #20
 8001c76:	433a      	orrs	r2, r7
 8001c78:	4002      	ands	r2, r0
 8001c7a:	051b      	lsls	r3, r3, #20
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	9a00      	ldr	r2, [sp, #0]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	07d1      	lsls	r1, r2, #31
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	430b      	orrs	r3, r1
 8001c88:	0030      	movs	r0, r6
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	b007      	add	sp, #28
 8001c8e:	bc3c      	pop	{r2, r3, r4, r5}
 8001c90:	4690      	mov	r8, r2
 8001c92:	4699      	mov	r9, r3
 8001c94:	46a2      	mov	sl, r4
 8001c96:	46ab      	mov	fp, r5
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	465b      	mov	r3, fp
 8001c9c:	433b      	orrs	r3, r7
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dmul+0x110>
 8001ca2:	e12f      	b.n	8001f04 <__aeabi_dmul+0x370>
 8001ca4:	2f00      	cmp	r7, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_dmul+0x116>
 8001ca8:	e1a5      	b.n	8001ff6 <__aeabi_dmul+0x462>
 8001caa:	0038      	movs	r0, r7
 8001cac:	f000 faba 	bl	8002224 <__clzsi2>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	3b0b      	subs	r3, #11
 8001cb4:	2b1c      	cmp	r3, #28
 8001cb6:	dd00      	ble.n	8001cba <__aeabi_dmul+0x126>
 8001cb8:	e196      	b.n	8001fe8 <__aeabi_dmul+0x454>
 8001cba:	221d      	movs	r2, #29
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	465a      	mov	r2, fp
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	40da      	lsrs	r2, r3
 8001cc4:	465e      	mov	r6, fp
 8001cc6:	3908      	subs	r1, #8
 8001cc8:	408f      	lsls	r7, r1
 8001cca:	0013      	movs	r3, r2
 8001ccc:	408e      	lsls	r6, r1
 8001cce:	433b      	orrs	r3, r7
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	4b9c      	ldr	r3, [pc, #624]	; (8001f44 <__aeabi_dmul+0x3b0>)
 8001cd4:	2700      	movs	r7, #0
 8001cd6:	1a1b      	subs	r3, r3, r0
 8001cd8:	4699      	mov	r9, r3
 8001cda:	2300      	movs	r3, #0
 8001cdc:	469b      	mov	fp, r3
 8001cde:	e77d      	b.n	8001bdc <__aeabi_dmul+0x48>
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	4653      	mov	r3, sl
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	4993      	ldr	r1, [pc, #588]	; (8001f34 <__aeabi_dmul+0x3a0>)
 8001ce8:	468c      	mov	ip, r1
 8001cea:	44e1      	add	r9, ip
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d000      	beq.n	8001cf2 <__aeabi_dmul+0x15e>
 8001cf0:	e11a      	b.n	8001f28 <__aeabi_dmul+0x394>
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	4317      	orrs	r7, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	e78c      	b.n	8001c16 <__aeabi_dmul+0x82>
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dmul+0x16e>
 8001d00:	e10d      	b.n	8001f1e <__aeabi_dmul+0x38a>
 8001d02:	4643      	mov	r3, r8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d100      	bne.n	8001d0a <__aeabi_dmul+0x176>
 8001d08:	e181      	b.n	800200e <__aeabi_dmul+0x47a>
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	f000 fa8a 	bl	8002224 <__clzsi2>
 8001d10:	0002      	movs	r2, r0
 8001d12:	3a0b      	subs	r2, #11
 8001d14:	2a1c      	cmp	r2, #28
 8001d16:	dd00      	ble.n	8001d1a <__aeabi_dmul+0x186>
 8001d18:	e172      	b.n	8002000 <__aeabi_dmul+0x46c>
 8001d1a:	0001      	movs	r1, r0
 8001d1c:	4643      	mov	r3, r8
 8001d1e:	3908      	subs	r1, #8
 8001d20:	408b      	lsls	r3, r1
 8001d22:	4698      	mov	r8, r3
 8001d24:	231d      	movs	r3, #29
 8001d26:	1a9a      	subs	r2, r3, r2
 8001d28:	4653      	mov	r3, sl
 8001d2a:	40d3      	lsrs	r3, r2
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	4643      	mov	r3, r8
 8001d30:	4313      	orrs	r3, r2
 8001d32:	4652      	mov	r2, sl
 8001d34:	408a      	lsls	r2, r1
 8001d36:	4649      	mov	r1, r9
 8001d38:	1a08      	subs	r0, r1, r0
 8001d3a:	4982      	ldr	r1, [pc, #520]	; (8001f44 <__aeabi_dmul+0x3b0>)
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	4481      	add	r9, r0
 8001d40:	2000      	movs	r0, #0
 8001d42:	e768      	b.n	8001c16 <__aeabi_dmul+0x82>
 8001d44:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <__aeabi_dmul+0x3a0>)
 8001d46:	2700      	movs	r7, #0
 8001d48:	2600      	movs	r6, #0
 8001d4a:	e78e      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001d4c:	0c14      	lsrs	r4, r2, #16
 8001d4e:	0412      	lsls	r2, r2, #16
 8001d50:	0c12      	lsrs	r2, r2, #16
 8001d52:	0011      	movs	r1, r2
 8001d54:	0c37      	lsrs	r7, r6, #16
 8001d56:	0436      	lsls	r6, r6, #16
 8001d58:	0c35      	lsrs	r5, r6, #16
 8001d5a:	4379      	muls	r1, r7
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	468c      	mov	ip, r1
 8001d60:	002e      	movs	r6, r5
 8001d62:	4360      	muls	r0, r4
 8001d64:	4460      	add	r0, ip
 8001d66:	4683      	mov	fp, r0
 8001d68:	4356      	muls	r6, r2
 8001d6a:	0021      	movs	r1, r4
 8001d6c:	0c30      	lsrs	r0, r6, #16
 8001d6e:	4680      	mov	r8, r0
 8001d70:	4658      	mov	r0, fp
 8001d72:	4379      	muls	r1, r7
 8001d74:	4440      	add	r0, r8
 8001d76:	9102      	str	r1, [sp, #8]
 8001d78:	4584      	cmp	ip, r0
 8001d7a:	d906      	bls.n	8001d8a <__aeabi_dmul+0x1f6>
 8001d7c:	4688      	mov	r8, r1
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0249      	lsls	r1, r1, #9
 8001d82:	468c      	mov	ip, r1
 8001d84:	44e0      	add	r8, ip
 8001d86:	4641      	mov	r1, r8
 8001d88:	9102      	str	r1, [sp, #8]
 8001d8a:	0436      	lsls	r6, r6, #16
 8001d8c:	0c01      	lsrs	r1, r0, #16
 8001d8e:	0c36      	lsrs	r6, r6, #16
 8001d90:	0400      	lsls	r0, r0, #16
 8001d92:	468b      	mov	fp, r1
 8001d94:	1981      	adds	r1, r0, r6
 8001d96:	0c1e      	lsrs	r6, r3, #16
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	0c1b      	lsrs	r3, r3, #16
 8001d9c:	9103      	str	r1, [sp, #12]
 8001d9e:	0019      	movs	r1, r3
 8001da0:	4379      	muls	r1, r7
 8001da2:	468c      	mov	ip, r1
 8001da4:	0028      	movs	r0, r5
 8001da6:	4375      	muls	r5, r6
 8001da8:	4465      	add	r5, ip
 8001daa:	46a8      	mov	r8, r5
 8001dac:	4358      	muls	r0, r3
 8001dae:	0c05      	lsrs	r5, r0, #16
 8001db0:	4445      	add	r5, r8
 8001db2:	4377      	muls	r7, r6
 8001db4:	42a9      	cmp	r1, r5
 8001db6:	d903      	bls.n	8001dc0 <__aeabi_dmul+0x22c>
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0249      	lsls	r1, r1, #9
 8001dbc:	468c      	mov	ip, r1
 8001dbe:	4467      	add	r7, ip
 8001dc0:	0c29      	lsrs	r1, r5, #16
 8001dc2:	468c      	mov	ip, r1
 8001dc4:	0039      	movs	r1, r7
 8001dc6:	0400      	lsls	r0, r0, #16
 8001dc8:	0c00      	lsrs	r0, r0, #16
 8001dca:	042d      	lsls	r5, r5, #16
 8001dcc:	182d      	adds	r5, r5, r0
 8001dce:	4461      	add	r1, ip
 8001dd0:	44ab      	add	fp, r5
 8001dd2:	9105      	str	r1, [sp, #20]
 8001dd4:	4659      	mov	r1, fp
 8001dd6:	9104      	str	r1, [sp, #16]
 8001dd8:	9901      	ldr	r1, [sp, #4]
 8001dda:	040f      	lsls	r7, r1, #16
 8001ddc:	0c3f      	lsrs	r7, r7, #16
 8001dde:	0c08      	lsrs	r0, r1, #16
 8001de0:	0039      	movs	r1, r7
 8001de2:	4351      	muls	r1, r2
 8001de4:	4342      	muls	r2, r0
 8001de6:	4690      	mov	r8, r2
 8001de8:	0002      	movs	r2, r0
 8001dea:	468c      	mov	ip, r1
 8001dec:	0c09      	lsrs	r1, r1, #16
 8001dee:	468b      	mov	fp, r1
 8001df0:	4362      	muls	r2, r4
 8001df2:	437c      	muls	r4, r7
 8001df4:	4444      	add	r4, r8
 8001df6:	445c      	add	r4, fp
 8001df8:	45a0      	cmp	r8, r4
 8001dfa:	d903      	bls.n	8001e04 <__aeabi_dmul+0x270>
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	0249      	lsls	r1, r1, #9
 8001e00:	4688      	mov	r8, r1
 8001e02:	4442      	add	r2, r8
 8001e04:	0c21      	lsrs	r1, r4, #16
 8001e06:	4688      	mov	r8, r1
 8001e08:	4661      	mov	r1, ip
 8001e0a:	0409      	lsls	r1, r1, #16
 8001e0c:	0c09      	lsrs	r1, r1, #16
 8001e0e:	468c      	mov	ip, r1
 8001e10:	0039      	movs	r1, r7
 8001e12:	4359      	muls	r1, r3
 8001e14:	4343      	muls	r3, r0
 8001e16:	4370      	muls	r0, r6
 8001e18:	437e      	muls	r6, r7
 8001e1a:	0c0f      	lsrs	r7, r1, #16
 8001e1c:	18f6      	adds	r6, r6, r3
 8001e1e:	0424      	lsls	r4, r4, #16
 8001e20:	19be      	adds	r6, r7, r6
 8001e22:	4464      	add	r4, ip
 8001e24:	4442      	add	r2, r8
 8001e26:	468c      	mov	ip, r1
 8001e28:	42b3      	cmp	r3, r6
 8001e2a:	d903      	bls.n	8001e34 <__aeabi_dmul+0x2a0>
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	025b      	lsls	r3, r3, #9
 8001e30:	4698      	mov	r8, r3
 8001e32:	4440      	add	r0, r8
 8001e34:	9b02      	ldr	r3, [sp, #8]
 8001e36:	4661      	mov	r1, ip
 8001e38:	4698      	mov	r8, r3
 8001e3a:	9b04      	ldr	r3, [sp, #16]
 8001e3c:	0437      	lsls	r7, r6, #16
 8001e3e:	4443      	add	r3, r8
 8001e40:	469b      	mov	fp, r3
 8001e42:	45ab      	cmp	fp, r5
 8001e44:	41ad      	sbcs	r5, r5
 8001e46:	426b      	negs	r3, r5
 8001e48:	040d      	lsls	r5, r1, #16
 8001e4a:	9905      	ldr	r1, [sp, #20]
 8001e4c:	0c2d      	lsrs	r5, r5, #16
 8001e4e:	468c      	mov	ip, r1
 8001e50:	197f      	adds	r7, r7, r5
 8001e52:	4467      	add	r7, ip
 8001e54:	18fd      	adds	r5, r7, r3
 8001e56:	46a8      	mov	r8, r5
 8001e58:	465d      	mov	r5, fp
 8001e5a:	192d      	adds	r5, r5, r4
 8001e5c:	42a5      	cmp	r5, r4
 8001e5e:	41a4      	sbcs	r4, r4
 8001e60:	4693      	mov	fp, r2
 8001e62:	4264      	negs	r4, r4
 8001e64:	46a4      	mov	ip, r4
 8001e66:	44c3      	add	fp, r8
 8001e68:	44dc      	add	ip, fp
 8001e6a:	428f      	cmp	r7, r1
 8001e6c:	41bf      	sbcs	r7, r7
 8001e6e:	4598      	cmp	r8, r3
 8001e70:	419b      	sbcs	r3, r3
 8001e72:	4593      	cmp	fp, r2
 8001e74:	4192      	sbcs	r2, r2
 8001e76:	45a4      	cmp	ip, r4
 8001e78:	41a4      	sbcs	r4, r4
 8001e7a:	425b      	negs	r3, r3
 8001e7c:	427f      	negs	r7, r7
 8001e7e:	431f      	orrs	r7, r3
 8001e80:	0c36      	lsrs	r6, r6, #16
 8001e82:	4252      	negs	r2, r2
 8001e84:	4264      	negs	r4, r4
 8001e86:	19bf      	adds	r7, r7, r6
 8001e88:	4322      	orrs	r2, r4
 8001e8a:	18bf      	adds	r7, r7, r2
 8001e8c:	4662      	mov	r2, ip
 8001e8e:	1838      	adds	r0, r7, r0
 8001e90:	0243      	lsls	r3, r0, #9
 8001e92:	0dd2      	lsrs	r2, r2, #23
 8001e94:	9903      	ldr	r1, [sp, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	026a      	lsls	r2, r5, #9
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	1e50      	subs	r0, r2, #1
 8001e9e:	4182      	sbcs	r2, r0
 8001ea0:	4661      	mov	r1, ip
 8001ea2:	0ded      	lsrs	r5, r5, #23
 8001ea4:	432a      	orrs	r2, r5
 8001ea6:	024e      	lsls	r6, r1, #9
 8001ea8:	4332      	orrs	r2, r6
 8001eaa:	01d9      	lsls	r1, r3, #7
 8001eac:	d400      	bmi.n	8001eb0 <__aeabi_dmul+0x31c>
 8001eae:	e0b3      	b.n	8002018 <__aeabi_dmul+0x484>
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	0850      	lsrs	r0, r2, #1
 8001eb4:	4032      	ands	r2, r6
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	07de      	lsls	r6, r3, #31
 8001eba:	4332      	orrs	r2, r6
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	4c22      	ldr	r4, [pc, #136]	; (8001f48 <__aeabi_dmul+0x3b4>)
 8001ec0:	4454      	add	r4, sl
 8001ec2:	2c00      	cmp	r4, #0
 8001ec4:	dd62      	ble.n	8001f8c <__aeabi_dmul+0x3f8>
 8001ec6:	0751      	lsls	r1, r2, #29
 8001ec8:	d009      	beq.n	8001ede <__aeabi_dmul+0x34a>
 8001eca:	200f      	movs	r0, #15
 8001ecc:	4010      	ands	r0, r2
 8001ece:	2804      	cmp	r0, #4
 8001ed0:	d005      	beq.n	8001ede <__aeabi_dmul+0x34a>
 8001ed2:	1d10      	adds	r0, r2, #4
 8001ed4:	4290      	cmp	r0, r2
 8001ed6:	4192      	sbcs	r2, r2
 8001ed8:	4252      	negs	r2, r2
 8001eda:	189b      	adds	r3, r3, r2
 8001edc:	0002      	movs	r2, r0
 8001ede:	01d9      	lsls	r1, r3, #7
 8001ee0:	d504      	bpl.n	8001eec <__aeabi_dmul+0x358>
 8001ee2:	2480      	movs	r4, #128	; 0x80
 8001ee4:	4819      	ldr	r0, [pc, #100]	; (8001f4c <__aeabi_dmul+0x3b8>)
 8001ee6:	00e4      	lsls	r4, r4, #3
 8001ee8:	4003      	ands	r3, r0
 8001eea:	4454      	add	r4, sl
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <__aeabi_dmul+0x3bc>)
 8001eee:	4284      	cmp	r4, r0
 8001ef0:	dd00      	ble.n	8001ef4 <__aeabi_dmul+0x360>
 8001ef2:	e727      	b.n	8001d44 <__aeabi_dmul+0x1b0>
 8001ef4:	075e      	lsls	r6, r3, #29
 8001ef6:	025b      	lsls	r3, r3, #9
 8001ef8:	08d2      	lsrs	r2, r2, #3
 8001efa:	0b1f      	lsrs	r7, r3, #12
 8001efc:	0563      	lsls	r3, r4, #21
 8001efe:	4316      	orrs	r6, r2
 8001f00:	0d5b      	lsrs	r3, r3, #21
 8001f02:	e6b2      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001f04:	2300      	movs	r3, #0
 8001f06:	4699      	mov	r9, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	2704      	movs	r7, #4
 8001f0c:	2600      	movs	r6, #0
 8001f0e:	469b      	mov	fp, r3
 8001f10:	e664      	b.n	8001bdc <__aeabi_dmul+0x48>
 8001f12:	2303      	movs	r3, #3
 8001f14:	9701      	str	r7, [sp, #4]
 8001f16:	4681      	mov	r9, r0
 8001f18:	270c      	movs	r7, #12
 8001f1a:	469b      	mov	fp, r3
 8001f1c:	e65e      	b.n	8001bdc <__aeabi_dmul+0x48>
 8001f1e:	2201      	movs	r2, #1
 8001f20:	2001      	movs	r0, #1
 8001f22:	4317      	orrs	r7, r2
 8001f24:	2200      	movs	r2, #0
 8001f26:	e676      	b.n	8001c16 <__aeabi_dmul+0x82>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	2003      	movs	r0, #3
 8001f2c:	431f      	orrs	r7, r3
 8001f2e:	4643      	mov	r3, r8
 8001f30:	e671      	b.n	8001c16 <__aeabi_dmul+0x82>
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	000007ff 	.word	0x000007ff
 8001f38:	fffffc01 	.word	0xfffffc01
 8001f3c:	08007040 	.word	0x08007040
 8001f40:	800fffff 	.word	0x800fffff
 8001f44:	fffffc0d 	.word	0xfffffc0d
 8001f48:	000003ff 	.word	0x000003ff
 8001f4c:	feffffff 	.word	0xfeffffff
 8001f50:	000007fe 	.word	0x000007fe
 8001f54:	2300      	movs	r3, #0
 8001f56:	2780      	movs	r7, #128	; 0x80
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	033f      	lsls	r7, r7, #12
 8001f5c:	2600      	movs	r6, #0
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <__aeabi_dmul+0x4d8>)
 8001f60:	e683      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001f62:	9b01      	ldr	r3, [sp, #4]
 8001f64:	0032      	movs	r2, r6
 8001f66:	46a4      	mov	ip, r4
 8001f68:	4658      	mov	r0, fp
 8001f6a:	e670      	b.n	8001c4e <__aeabi_dmul+0xba>
 8001f6c:	46ac      	mov	ip, r5
 8001f6e:	e66e      	b.n	8001c4e <__aeabi_dmul+0xba>
 8001f70:	2780      	movs	r7, #128	; 0x80
 8001f72:	9901      	ldr	r1, [sp, #4]
 8001f74:	033f      	lsls	r7, r7, #12
 8001f76:	4239      	tst	r1, r7
 8001f78:	d02d      	beq.n	8001fd6 <__aeabi_dmul+0x442>
 8001f7a:	423b      	tst	r3, r7
 8001f7c:	d12b      	bne.n	8001fd6 <__aeabi_dmul+0x442>
 8001f7e:	431f      	orrs	r7, r3
 8001f80:	033f      	lsls	r7, r7, #12
 8001f82:	0b3f      	lsrs	r7, r7, #12
 8001f84:	9500      	str	r5, [sp, #0]
 8001f86:	0016      	movs	r6, r2
 8001f88:	4b38      	ldr	r3, [pc, #224]	; (800206c <__aeabi_dmul+0x4d8>)
 8001f8a:	e66e      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001f8c:	2501      	movs	r5, #1
 8001f8e:	1b2d      	subs	r5, r5, r4
 8001f90:	2d38      	cmp	r5, #56	; 0x38
 8001f92:	dd00      	ble.n	8001f96 <__aeabi_dmul+0x402>
 8001f94:	e666      	b.n	8001c64 <__aeabi_dmul+0xd0>
 8001f96:	2d1f      	cmp	r5, #31
 8001f98:	dc40      	bgt.n	800201c <__aeabi_dmul+0x488>
 8001f9a:	4835      	ldr	r0, [pc, #212]	; (8002070 <__aeabi_dmul+0x4dc>)
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	4450      	add	r0, sl
 8001fa0:	0016      	movs	r6, r2
 8001fa2:	4082      	lsls	r2, r0
 8001fa4:	4084      	lsls	r4, r0
 8001fa6:	40ee      	lsrs	r6, r5
 8001fa8:	1e50      	subs	r0, r2, #1
 8001faa:	4182      	sbcs	r2, r0
 8001fac:	4334      	orrs	r4, r6
 8001fae:	4314      	orrs	r4, r2
 8001fb0:	40eb      	lsrs	r3, r5
 8001fb2:	0762      	lsls	r2, r4, #29
 8001fb4:	d009      	beq.n	8001fca <__aeabi_dmul+0x436>
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	4022      	ands	r2, r4
 8001fba:	2a04      	cmp	r2, #4
 8001fbc:	d005      	beq.n	8001fca <__aeabi_dmul+0x436>
 8001fbe:	0022      	movs	r2, r4
 8001fc0:	1d14      	adds	r4, r2, #4
 8001fc2:	4294      	cmp	r4, r2
 8001fc4:	4180      	sbcs	r0, r0
 8001fc6:	4240      	negs	r0, r0
 8001fc8:	181b      	adds	r3, r3, r0
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	d53e      	bpl.n	800204c <__aeabi_dmul+0x4b8>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	2700      	movs	r7, #0
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	e649      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001fd6:	2780      	movs	r7, #128	; 0x80
 8001fd8:	9b01      	ldr	r3, [sp, #4]
 8001fda:	033f      	lsls	r7, r7, #12
 8001fdc:	431f      	orrs	r7, r3
 8001fde:	033f      	lsls	r7, r7, #12
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	9400      	str	r4, [sp, #0]
 8001fe4:	4b21      	ldr	r3, [pc, #132]	; (800206c <__aeabi_dmul+0x4d8>)
 8001fe6:	e640      	b.n	8001c6a <__aeabi_dmul+0xd6>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	465a      	mov	r2, fp
 8001fec:	3b28      	subs	r3, #40	; 0x28
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	9201      	str	r2, [sp, #4]
 8001ff4:	e66d      	b.n	8001cd2 <__aeabi_dmul+0x13e>
 8001ff6:	4658      	mov	r0, fp
 8001ff8:	f000 f914 	bl	8002224 <__clzsi2>
 8001ffc:	3020      	adds	r0, #32
 8001ffe:	e657      	b.n	8001cb0 <__aeabi_dmul+0x11c>
 8002000:	0003      	movs	r3, r0
 8002002:	4652      	mov	r2, sl
 8002004:	3b28      	subs	r3, #40	; 0x28
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	2200      	movs	r2, #0
 800200c:	e693      	b.n	8001d36 <__aeabi_dmul+0x1a2>
 800200e:	4650      	mov	r0, sl
 8002010:	f000 f908 	bl	8002224 <__clzsi2>
 8002014:	3020      	adds	r0, #32
 8002016:	e67b      	b.n	8001d10 <__aeabi_dmul+0x17c>
 8002018:	46ca      	mov	sl, r9
 800201a:	e750      	b.n	8001ebe <__aeabi_dmul+0x32a>
 800201c:	201f      	movs	r0, #31
 800201e:	001e      	movs	r6, r3
 8002020:	4240      	negs	r0, r0
 8002022:	1b04      	subs	r4, r0, r4
 8002024:	40e6      	lsrs	r6, r4
 8002026:	2d20      	cmp	r5, #32
 8002028:	d003      	beq.n	8002032 <__aeabi_dmul+0x49e>
 800202a:	4c12      	ldr	r4, [pc, #72]	; (8002074 <__aeabi_dmul+0x4e0>)
 800202c:	4454      	add	r4, sl
 800202e:	40a3      	lsls	r3, r4
 8002030:	431a      	orrs	r2, r3
 8002032:	1e50      	subs	r0, r2, #1
 8002034:	4182      	sbcs	r2, r0
 8002036:	4332      	orrs	r2, r6
 8002038:	2607      	movs	r6, #7
 800203a:	2700      	movs	r7, #0
 800203c:	4016      	ands	r6, r2
 800203e:	d009      	beq.n	8002054 <__aeabi_dmul+0x4c0>
 8002040:	200f      	movs	r0, #15
 8002042:	2300      	movs	r3, #0
 8002044:	4010      	ands	r0, r2
 8002046:	0014      	movs	r4, r2
 8002048:	2804      	cmp	r0, #4
 800204a:	d1b9      	bne.n	8001fc0 <__aeabi_dmul+0x42c>
 800204c:	0022      	movs	r2, r4
 800204e:	075e      	lsls	r6, r3, #29
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	0b1f      	lsrs	r7, r3, #12
 8002054:	08d2      	lsrs	r2, r2, #3
 8002056:	4316      	orrs	r6, r2
 8002058:	2300      	movs	r3, #0
 800205a:	e606      	b.n	8001c6a <__aeabi_dmul+0xd6>
 800205c:	2780      	movs	r7, #128	; 0x80
 800205e:	033f      	lsls	r7, r7, #12
 8002060:	431f      	orrs	r7, r3
 8002062:	033f      	lsls	r7, r7, #12
 8002064:	0b3f      	lsrs	r7, r7, #12
 8002066:	0016      	movs	r6, r2
 8002068:	4b00      	ldr	r3, [pc, #0]	; (800206c <__aeabi_dmul+0x4d8>)
 800206a:	e5fe      	b.n	8001c6a <__aeabi_dmul+0xd6>
 800206c:	000007ff 	.word	0x000007ff
 8002070:	0000041e 	.word	0x0000041e
 8002074:	0000043e 	.word	0x0000043e

08002078 <__aeabi_f2d>:
 8002078:	0041      	lsls	r1, r0, #1
 800207a:	0e09      	lsrs	r1, r1, #24
 800207c:	1c4b      	adds	r3, r1, #1
 800207e:	b570      	push	{r4, r5, r6, lr}
 8002080:	b2db      	uxtb	r3, r3
 8002082:	0246      	lsls	r6, r0, #9
 8002084:	0a75      	lsrs	r5, r6, #9
 8002086:	0fc4      	lsrs	r4, r0, #31
 8002088:	2b01      	cmp	r3, #1
 800208a:	dd14      	ble.n	80020b6 <__aeabi_f2d+0x3e>
 800208c:	23e0      	movs	r3, #224	; 0xe0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	076d      	lsls	r5, r5, #29
 8002092:	0b36      	lsrs	r6, r6, #12
 8002094:	18cb      	adds	r3, r1, r3
 8002096:	2100      	movs	r1, #0
 8002098:	0d0a      	lsrs	r2, r1, #20
 800209a:	0028      	movs	r0, r5
 800209c:	0512      	lsls	r2, r2, #20
 800209e:	4d1c      	ldr	r5, [pc, #112]	; (8002110 <__aeabi_f2d+0x98>)
 80020a0:	4332      	orrs	r2, r6
 80020a2:	055b      	lsls	r3, r3, #21
 80020a4:	402a      	ands	r2, r5
 80020a6:	085b      	lsrs	r3, r3, #1
 80020a8:	4313      	orrs	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	07e4      	lsls	r4, r4, #31
 80020ae:	085b      	lsrs	r3, r3, #1
 80020b0:	4323      	orrs	r3, r4
 80020b2:	0019      	movs	r1, r3
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	2900      	cmp	r1, #0
 80020b8:	d114      	bne.n	80020e4 <__aeabi_f2d+0x6c>
 80020ba:	2d00      	cmp	r5, #0
 80020bc:	d01e      	beq.n	80020fc <__aeabi_f2d+0x84>
 80020be:	0028      	movs	r0, r5
 80020c0:	f000 f8b0 	bl	8002224 <__clzsi2>
 80020c4:	280a      	cmp	r0, #10
 80020c6:	dc1c      	bgt.n	8002102 <__aeabi_f2d+0x8a>
 80020c8:	230b      	movs	r3, #11
 80020ca:	002a      	movs	r2, r5
 80020cc:	1a1b      	subs	r3, r3, r0
 80020ce:	40da      	lsrs	r2, r3
 80020d0:	0003      	movs	r3, r0
 80020d2:	3315      	adds	r3, #21
 80020d4:	409d      	lsls	r5, r3
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <__aeabi_f2d+0x9c>)
 80020d8:	0312      	lsls	r2, r2, #12
 80020da:	1a1b      	subs	r3, r3, r0
 80020dc:	055b      	lsls	r3, r3, #21
 80020de:	0b16      	lsrs	r6, r2, #12
 80020e0:	0d5b      	lsrs	r3, r3, #21
 80020e2:	e7d8      	b.n	8002096 <__aeabi_f2d+0x1e>
 80020e4:	2d00      	cmp	r5, #0
 80020e6:	d006      	beq.n	80020f6 <__aeabi_f2d+0x7e>
 80020e8:	0b32      	lsrs	r2, r6, #12
 80020ea:	2680      	movs	r6, #128	; 0x80
 80020ec:	0336      	lsls	r6, r6, #12
 80020ee:	076d      	lsls	r5, r5, #29
 80020f0:	4316      	orrs	r6, r2
 80020f2:	4b09      	ldr	r3, [pc, #36]	; (8002118 <__aeabi_f2d+0xa0>)
 80020f4:	e7cf      	b.n	8002096 <__aeabi_f2d+0x1e>
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <__aeabi_f2d+0xa0>)
 80020f8:	2600      	movs	r6, #0
 80020fa:	e7cc      	b.n	8002096 <__aeabi_f2d+0x1e>
 80020fc:	2300      	movs	r3, #0
 80020fe:	2600      	movs	r6, #0
 8002100:	e7c9      	b.n	8002096 <__aeabi_f2d+0x1e>
 8002102:	0003      	movs	r3, r0
 8002104:	002a      	movs	r2, r5
 8002106:	3b0b      	subs	r3, #11
 8002108:	409a      	lsls	r2, r3
 800210a:	2500      	movs	r5, #0
 800210c:	e7e3      	b.n	80020d6 <__aeabi_f2d+0x5e>
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	800fffff 	.word	0x800fffff
 8002114:	00000389 	.word	0x00000389
 8002118:	000007ff 	.word	0x000007ff

0800211c <__aeabi_d2f>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	004c      	lsls	r4, r1, #1
 8002120:	0d64      	lsrs	r4, r4, #21
 8002122:	030b      	lsls	r3, r1, #12
 8002124:	1c62      	adds	r2, r4, #1
 8002126:	0a5b      	lsrs	r3, r3, #9
 8002128:	0f46      	lsrs	r6, r0, #29
 800212a:	0552      	lsls	r2, r2, #21
 800212c:	0fc9      	lsrs	r1, r1, #31
 800212e:	431e      	orrs	r6, r3
 8002130:	00c5      	lsls	r5, r0, #3
 8002132:	0d52      	lsrs	r2, r2, #21
 8002134:	2a01      	cmp	r2, #1
 8002136:	dd29      	ble.n	800218c <__aeabi_d2f+0x70>
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <__aeabi_d2f+0xfc>)
 800213a:	18e7      	adds	r7, r4, r3
 800213c:	2ffe      	cmp	r7, #254	; 0xfe
 800213e:	dc1c      	bgt.n	800217a <__aeabi_d2f+0x5e>
 8002140:	2f00      	cmp	r7, #0
 8002142:	dd3b      	ble.n	80021bc <__aeabi_d2f+0xa0>
 8002144:	0180      	lsls	r0, r0, #6
 8002146:	1e43      	subs	r3, r0, #1
 8002148:	4198      	sbcs	r0, r3
 800214a:	2207      	movs	r2, #7
 800214c:	00f3      	lsls	r3, r6, #3
 800214e:	0f6d      	lsrs	r5, r5, #29
 8002150:	4303      	orrs	r3, r0
 8002152:	432b      	orrs	r3, r5
 8002154:	401a      	ands	r2, r3
 8002156:	2a00      	cmp	r2, #0
 8002158:	d004      	beq.n	8002164 <__aeabi_d2f+0x48>
 800215a:	220f      	movs	r2, #15
 800215c:	401a      	ands	r2, r3
 800215e:	2a04      	cmp	r2, #4
 8002160:	d000      	beq.n	8002164 <__aeabi_d2f+0x48>
 8002162:	3304      	adds	r3, #4
 8002164:	2280      	movs	r2, #128	; 0x80
 8002166:	04d2      	lsls	r2, r2, #19
 8002168:	401a      	ands	r2, r3
 800216a:	d024      	beq.n	80021b6 <__aeabi_d2f+0x9a>
 800216c:	3701      	adds	r7, #1
 800216e:	b2fa      	uxtb	r2, r7
 8002170:	2fff      	cmp	r7, #255	; 0xff
 8002172:	d002      	beq.n	800217a <__aeabi_d2f+0x5e>
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	0a58      	lsrs	r0, r3, #9
 8002178:	e001      	b.n	800217e <__aeabi_d2f+0x62>
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	2000      	movs	r0, #0
 800217e:	0240      	lsls	r0, r0, #9
 8002180:	05d2      	lsls	r2, r2, #23
 8002182:	0a40      	lsrs	r0, r0, #9
 8002184:	07c9      	lsls	r1, r1, #31
 8002186:	4310      	orrs	r0, r2
 8002188:	4308      	orrs	r0, r1
 800218a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218c:	4335      	orrs	r5, r6
 800218e:	2c00      	cmp	r4, #0
 8002190:	d104      	bne.n	800219c <__aeabi_d2f+0x80>
 8002192:	2d00      	cmp	r5, #0
 8002194:	d10a      	bne.n	80021ac <__aeabi_d2f+0x90>
 8002196:	2200      	movs	r2, #0
 8002198:	2000      	movs	r0, #0
 800219a:	e7f0      	b.n	800217e <__aeabi_d2f+0x62>
 800219c:	2d00      	cmp	r5, #0
 800219e:	d0ec      	beq.n	800217a <__aeabi_d2f+0x5e>
 80021a0:	2080      	movs	r0, #128	; 0x80
 80021a2:	03c0      	lsls	r0, r0, #15
 80021a4:	4330      	orrs	r0, r6
 80021a6:	22ff      	movs	r2, #255	; 0xff
 80021a8:	e7e9      	b.n	800217e <__aeabi_d2f+0x62>
 80021aa:	2400      	movs	r4, #0
 80021ac:	2300      	movs	r3, #0
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	0a58      	lsrs	r0, r3, #9
 80021b2:	b2e2      	uxtb	r2, r4
 80021b4:	e7e3      	b.n	800217e <__aeabi_d2f+0x62>
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	003c      	movs	r4, r7
 80021ba:	e7f8      	b.n	80021ae <__aeabi_d2f+0x92>
 80021bc:	003b      	movs	r3, r7
 80021be:	3317      	adds	r3, #23
 80021c0:	dbf3      	blt.n	80021aa <__aeabi_d2f+0x8e>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	4333      	orrs	r3, r6
 80021c8:	261e      	movs	r6, #30
 80021ca:	1bf6      	subs	r6, r6, r7
 80021cc:	2e1f      	cmp	r6, #31
 80021ce:	dd14      	ble.n	80021fa <__aeabi_d2f+0xde>
 80021d0:	2202      	movs	r2, #2
 80021d2:	4252      	negs	r2, r2
 80021d4:	1bd7      	subs	r7, r2, r7
 80021d6:	001a      	movs	r2, r3
 80021d8:	40fa      	lsrs	r2, r7
 80021da:	0017      	movs	r7, r2
 80021dc:	2e20      	cmp	r6, #32
 80021de:	d004      	beq.n	80021ea <__aeabi_d2f+0xce>
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <__aeabi_d2f+0x100>)
 80021e2:	4694      	mov	ip, r2
 80021e4:	4464      	add	r4, ip
 80021e6:	40a3      	lsls	r3, r4
 80021e8:	431d      	orrs	r5, r3
 80021ea:	002b      	movs	r3, r5
 80021ec:	1e5d      	subs	r5, r3, #1
 80021ee:	41ab      	sbcs	r3, r5
 80021f0:	2207      	movs	r2, #7
 80021f2:	433b      	orrs	r3, r7
 80021f4:	401a      	ands	r2, r3
 80021f6:	2700      	movs	r7, #0
 80021f8:	e7ad      	b.n	8002156 <__aeabi_d2f+0x3a>
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <__aeabi_d2f+0x104>)
 80021fc:	0028      	movs	r0, r5
 80021fe:	18a2      	adds	r2, r4, r2
 8002200:	4095      	lsls	r5, r2
 8002202:	4093      	lsls	r3, r2
 8002204:	1e6c      	subs	r4, r5, #1
 8002206:	41a5      	sbcs	r5, r4
 8002208:	40f0      	lsrs	r0, r6
 800220a:	2207      	movs	r2, #7
 800220c:	432b      	orrs	r3, r5
 800220e:	4303      	orrs	r3, r0
 8002210:	401a      	ands	r2, r3
 8002212:	2700      	movs	r7, #0
 8002214:	e79f      	b.n	8002156 <__aeabi_d2f+0x3a>
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	fffffc80 	.word	0xfffffc80
 800221c:	fffffca2 	.word	0xfffffca2
 8002220:	fffffc82 	.word	0xfffffc82

08002224 <__clzsi2>:
 8002224:	211c      	movs	r1, #28
 8002226:	2301      	movs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	4298      	cmp	r0, r3
 800222c:	d301      	bcc.n	8002232 <__clzsi2+0xe>
 800222e:	0c00      	lsrs	r0, r0, #16
 8002230:	3910      	subs	r1, #16
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	4298      	cmp	r0, r3
 8002236:	d301      	bcc.n	800223c <__clzsi2+0x18>
 8002238:	0a00      	lsrs	r0, r0, #8
 800223a:	3908      	subs	r1, #8
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0x22>
 8002242:	0900      	lsrs	r0, r0, #4
 8002244:	3904      	subs	r1, #4
 8002246:	a202      	add	r2, pc, #8	; (adr r2, 8002250 <__clzsi2+0x2c>)
 8002248:	5c10      	ldrb	r0, [r2, r0]
 800224a:	1840      	adds	r0, r0, r1
 800224c:	4770      	bx	lr
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	02020304 	.word	0x02020304
 8002254:	01010101 	.word	0x01010101
	...

08002260 <esp8266_reset>:
#include "main.h"
#include "ESP8266.h"

int esp8266_reset(UART_HandleTypeDef * UARTx){
 8002260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	uint8_t AT_RST[14] = "AT+RESTORE\r\n";
 8002268:	2008      	movs	r0, #8
 800226a:	1839      	adds	r1, r7, r0
 800226c:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <esp8266_reset+0x40>)
 800226e:	000b      	movs	r3, r1
 8002270:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002272:	c370      	stmia	r3!, {r4, r5, r6}
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	230d      	movs	r3, #13
 800227a:	2200      	movs	r2, #0
 800227c:	54ca      	strb	r2, [r1, r3]

	//Reset ESP8266
	HAL_UART_Transmit(UARTx, AT_RST, sizeof(AT_RST), 100);
 800227e:	1839      	adds	r1, r7, r0
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	2364      	movs	r3, #100	; 0x64
 8002284:	220e      	movs	r2, #14
 8002286:	f003 fb15 	bl	80058b4 <HAL_UART_Transmit>

	HAL_Delay(1000);
 800228a:	23fa      	movs	r3, #250	; 0xfa
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	0018      	movs	r0, r3
 8002290:	f002 fa5a 	bl	8004748 <HAL_Delay>

	return ESP8266_SUCCESS;
 8002294:	2301      	movs	r3, #1
}
 8002296:	0018      	movs	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	b007      	add	sp, #28
 800229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	08006d20 	.word	0x08006d20

080022a4 <esp8266_init>:

int esp8266_init(UART_HandleTypeDef * UARTx){
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	b0ac      	sub	sp, #176	; 0xb0
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	uint8_t AT[4] = "AT\r\n";
 80022ac:	23a0      	movs	r3, #160	; 0xa0
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	4a69      	ldr	r2, [pc, #420]	; (8002458 <esp8266_init+0x1b4>)
 80022b2:	601a      	str	r2, [r3, #0]
	uint8_t AT_resp[sizeof(AT)+7];

	uint8_t AT_CWMODE[13] = "AT+CWMODE=3\r\n";
 80022b4:	2384      	movs	r3, #132	; 0x84
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	4a68      	ldr	r2, [pc, #416]	; (800245c <esp8266_init+0x1b8>)
 80022ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022bc:	c313      	stmia	r3!, {r0, r1, r4}
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	701a      	strb	r2, [r3, #0]
	uint8_t AT_CWMODE_resp[sizeof(AT_CWMODE)+7];

	//Set up AP network name and pass word: AT+CWSAP\"<name>\", \"<password>\",1,4\r\n
	uint8_t AT_CWSAP[45] = "AT+CWSAP=\"SmartBlinds1\",\"group2blinds\",1,4\r\n";
 80022c2:	2340      	movs	r3, #64	; 0x40
 80022c4:	18fb      	adds	r3, r7, r3
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <esp8266_init+0x1bc>)
 80022c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ca:	c313      	stmia	r3!, {r0, r1, r4}
 80022cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022ce:	c313      	stmia	r3!, {r0, r1, r4}
 80022d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022d2:	c313      	stmia	r3!, {r0, r1, r4}
 80022d4:	ca03      	ldmia	r2!, {r0, r1}
 80022d6:	c303      	stmia	r3!, {r0, r1}
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	701a      	strb	r2, [r3, #0]
	int tries;
	int success_flag;
	HAL_StatusTypeDef status;

	//Check if ESP8266 is connected
	tries = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	22ac      	movs	r2, #172	; 0xac
 80022e0:	18ba      	adds	r2, r7, r2
 80022e2:	6013      	str	r3, [r2, #0]
	success_flag = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	22a8      	movs	r2, #168	; 0xa8
 80022e8:	18ba      	adds	r2, r7, r2
 80022ea:	6013      	str	r3, [r2, #0]
	status = HAL_ERROR;
 80022ec:	23a7      	movs	r3, #167	; 0xa7
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 80022f4:	e02a      	b.n	800234c <esp8266_init+0xa8>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f003 fcff 	bl	8005cfc <HAL_UART_AbortReceive>

		tries++;
 80022fe:	22ac      	movs	r2, #172	; 0xac
 8002300:	18bb      	adds	r3, r7, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	18b9      	adds	r1, r7, r2
 8002308:	600b      	str	r3, [r1, #0]
		if (tries == 5){
 800230a:	18bb      	adds	r3, r7, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d102      	bne.n	8002318 <esp8266_init+0x74>
			return ESP8266_FAILED;
 8002312:	2301      	movs	r3, #1
 8002314:	425b      	negs	r3, r3
 8002316:	e09a      	b.n	800244e <esp8266_init+0x1aa>
		}
		HAL_UART_Transmit(UARTx, AT, sizeof(AT), 100);
 8002318:	23a0      	movs	r3, #160	; 0xa0
 800231a:	18f9      	adds	r1, r7, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	2364      	movs	r3, #100	; 0x64
 8002320:	2204      	movs	r2, #4
 8002322:	f003 fac7 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_resp, sizeof(AT_resp), 100);
 8002326:	25a7      	movs	r5, #167	; 0xa7
 8002328:	197c      	adds	r4, r7, r5
 800232a:	2394      	movs	r3, #148	; 0x94
 800232c:	18f9      	adds	r1, r7, r3
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	2364      	movs	r3, #100	; 0x64
 8002332:	220b      	movs	r2, #11
 8002334:	f003 fb66 	bl	8005a04 <HAL_UART_Receive>
 8002338:	0003      	movs	r3, r0
 800233a:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 800233c:	197b      	adds	r3, r7, r5
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d103      	bne.n	800234c <esp8266_init+0xa8>
			success_flag = 1;
 8002344:	2301      	movs	r3, #1
 8002346:	22a8      	movs	r2, #168	; 0xa8
 8002348:	18ba      	adds	r2, r7, r2
 800234a:	6013      	str	r3, [r2, #0]
	while (success_flag == 0){
 800234c:	23a8      	movs	r3, #168	; 0xa8
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0cf      	beq.n	80022f6 <esp8266_init+0x52>
		}
	}

	//Set up ESP8266 as Soft AP
	tries = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	22ac      	movs	r2, #172	; 0xac
 800235a:	18ba      	adds	r2, r7, r2
 800235c:	6013      	str	r3, [r2, #0]
	success_flag = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	22a8      	movs	r2, #168	; 0xa8
 8002362:	18ba      	adds	r2, r7, r2
 8002364:	6013      	str	r3, [r2, #0]
	status = HAL_ERROR;
 8002366:	23a7      	movs	r3, #167	; 0xa7
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	2201      	movs	r2, #1
 800236c:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 800236e:	e02a      	b.n	80023c6 <esp8266_init+0x122>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f003 fcc2 	bl	8005cfc <HAL_UART_AbortReceive>

		tries++;
 8002378:	22ac      	movs	r2, #172	; 0xac
 800237a:	18bb      	adds	r3, r7, r2
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	18b9      	adds	r1, r7, r2
 8002382:	600b      	str	r3, [r1, #0]
		if (tries == 5){
 8002384:	18bb      	adds	r3, r7, r2
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d102      	bne.n	8002392 <esp8266_init+0xee>
			return ESP8266_FAILED;
 800238c:	2301      	movs	r3, #1
 800238e:	425b      	negs	r3, r3
 8002390:	e05d      	b.n	800244e <esp8266_init+0x1aa>
		}
		HAL_UART_Transmit(UARTx, AT_CWMODE, sizeof(AT_CWMODE), 100);
 8002392:	2384      	movs	r3, #132	; 0x84
 8002394:	18f9      	adds	r1, r7, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	2364      	movs	r3, #100	; 0x64
 800239a:	220d      	movs	r2, #13
 800239c:	f003 fa8a 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_CWMODE_resp, sizeof(AT_CWMODE_resp), 100);
 80023a0:	25a7      	movs	r5, #167	; 0xa7
 80023a2:	197c      	adds	r4, r7, r5
 80023a4:	2370      	movs	r3, #112	; 0x70
 80023a6:	18f9      	adds	r1, r7, r3
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	2364      	movs	r3, #100	; 0x64
 80023ac:	2214      	movs	r2, #20
 80023ae:	f003 fb29 	bl	8005a04 <HAL_UART_Receive>
 80023b2:	0003      	movs	r3, r0
 80023b4:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 80023b6:	197b      	adds	r3, r7, r5
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <esp8266_init+0x122>
			success_flag = 1;
 80023be:	2301      	movs	r3, #1
 80023c0:	22a8      	movs	r2, #168	; 0xa8
 80023c2:	18ba      	adds	r2, r7, r2
 80023c4:	6013      	str	r3, [r2, #0]
	while (success_flag == 0){
 80023c6:	23a8      	movs	r3, #168	; 0xa8
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0cf      	beq.n	8002370 <esp8266_init+0xcc>
		}
	}

	//Set up ESP8266's Network
	tries = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	22ac      	movs	r2, #172	; 0xac
 80023d4:	18ba      	adds	r2, r7, r2
 80023d6:	6013      	str	r3, [r2, #0]
	success_flag = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	22a8      	movs	r2, #168	; 0xa8
 80023dc:	18ba      	adds	r2, r7, r2
 80023de:	6013      	str	r3, [r2, #0]
	status = HAL_ERROR;
 80023e0:	23a7      	movs	r3, #167	; 0xa7
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 80023e8:	e02b      	b.n	8002442 <esp8266_init+0x19e>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f003 fc85 	bl	8005cfc <HAL_UART_AbortReceive>

		tries++;
 80023f2:	22ac      	movs	r2, #172	; 0xac
 80023f4:	18bb      	adds	r3, r7, r2
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3301      	adds	r3, #1
 80023fa:	18b9      	adds	r1, r7, r2
 80023fc:	600b      	str	r3, [r1, #0]
		if (tries == 10){
 80023fe:	18bb      	adds	r3, r7, r2
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b0a      	cmp	r3, #10
 8002404:	d102      	bne.n	800240c <esp8266_init+0x168>
			return ESP8266_FAILED;
 8002406:	2301      	movs	r3, #1
 8002408:	425b      	negs	r3, r3
 800240a:	e020      	b.n	800244e <esp8266_init+0x1aa>
		}
		HAL_UART_Transmit(UARTx, AT_CWSAP, sizeof(AT_CWSAP), 100);
 800240c:	2340      	movs	r3, #64	; 0x40
 800240e:	18f9      	adds	r1, r7, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	2364      	movs	r3, #100	; 0x64
 8002414:	222d      	movs	r2, #45	; 0x2d
 8002416:	f003 fa4d 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_CWSAP_resp, sizeof(AT_CWSAP_resp), 300);
 800241a:	25a7      	movs	r5, #167	; 0xa7
 800241c:	197c      	adds	r4, r7, r5
 800241e:	2396      	movs	r3, #150	; 0x96
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	220c      	movs	r2, #12
 8002424:	18b9      	adds	r1, r7, r2
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	2233      	movs	r2, #51	; 0x33
 800242a:	f003 faeb 	bl	8005a04 <HAL_UART_Receive>
 800242e:	0003      	movs	r3, r0
 8002430:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 8002432:	197b      	adds	r3, r7, r5
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <esp8266_init+0x19e>
			success_flag = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	22a8      	movs	r2, #168	; 0xa8
 800243e:	18ba      	adds	r2, r7, r2
 8002440:	6013      	str	r3, [r2, #0]
	while (success_flag == 0){
 8002442:	23a8      	movs	r3, #168	; 0xa8
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ce      	beq.n	80023ea <esp8266_init+0x146>
		}
	}

	return ESP8266_SUCCESS;
 800244c:	2301      	movs	r3, #1
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b02c      	add	sp, #176	; 0xb0
 8002454:	bdb0      	pop	{r4, r5, r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	0a0d5441 	.word	0x0a0d5441
 800245c:	08006d30 	.word	0x08006d30
 8002460:	08006d40 	.word	0x08006d40

08002464 <esp8266_setupTCP>:

int esp8266_setupTCP(UART_HandleTypeDef * UARTx){
 8002464:	b5b0      	push	{r4, r5, r7, lr}
 8002466:	b09a      	sub	sp, #104	; 0x68
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

	uint8_t AT_CIPMUX[13] = "AT+CIPMUX=1\r\n";
 800246c:	2350      	movs	r3, #80	; 0x50
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	4a47      	ldr	r2, [pc, #284]	; (8002590 <esp8266_setupTCP+0x12c>)
 8002472:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002474:	c313      	stmia	r3!, {r0, r1, r4}
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	701a      	strb	r2, [r3, #0]
	uint8_t AT_CIPMUX_resp[sizeof(AT_CIPMUX)+7] = "";
 800247a:	233c      	movs	r3, #60	; 0x3c
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	3304      	adds	r3, #4
 8002484:	2210      	movs	r2, #16
 8002486:	2100      	movs	r1, #0
 8002488:	0018      	movs	r0, r3
 800248a:	f004 fad1 	bl	8006a30 <memset>

	uint8_t AT_CIPSERVER[19] = "AT+CIPSERVER=1,80\r\n";
 800248e:	2328      	movs	r3, #40	; 0x28
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	4a40      	ldr	r2, [pc, #256]	; (8002594 <esp8266_setupTCP+0x130>)
 8002494:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002496:	c313      	stmia	r3!, {r0, r1, r4}
 8002498:	6811      	ldr	r1, [r2, #0]
 800249a:	6019      	str	r1, [r3, #0]
 800249c:	8891      	ldrh	r1, [r2, #4]
 800249e:	8099      	strh	r1, [r3, #4]
 80024a0:	7992      	ldrb	r2, [r2, #6]
 80024a2:	719a      	strb	r2, [r3, #6]
	uint8_t AT_CIPSERVER_resp[sizeof(AT_CIPSERVER)+7] = "";
 80024a4:	230c      	movs	r3, #12
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2216      	movs	r2, #22
 80024b0:	2100      	movs	r1, #0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f004 fabc 	bl	8006a30 <memset>
	int tries;
	int success_flag;
	HAL_StatusTypeDef status;

	//Enable multiple connection - this is necessary for setting up TCP Server
	tries = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	667b      	str	r3, [r7, #100]	; 0x64
	success_flag = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	663b      	str	r3, [r7, #96]	; 0x60
	status = HAL_ERROR;
 80024c0:	235f      	movs	r3, #95	; 0x5f
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 80024c8:	e024      	b.n	8002514 <esp8266_setupTCP+0xb0>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	0018      	movs	r0, r3
 80024ce:	f003 fc15 	bl	8005cfc <HAL_UART_AbortReceive>

		tries++;
 80024d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024d4:	3301      	adds	r3, #1
 80024d6:	667b      	str	r3, [r7, #100]	; 0x64
		if (tries == 5){
 80024d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024da:	2b05      	cmp	r3, #5
 80024dc:	d102      	bne.n	80024e4 <esp8266_setupTCP+0x80>
			return ESP8266_FAILED;
 80024de:	2301      	movs	r3, #1
 80024e0:	425b      	negs	r3, r3
 80024e2:	e050      	b.n	8002586 <esp8266_setupTCP+0x122>
		}
		HAL_UART_Transmit(UARTx, AT_CIPMUX, sizeof(AT_CIPMUX), 100);
 80024e4:	2350      	movs	r3, #80	; 0x50
 80024e6:	18f9      	adds	r1, r7, r3
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	2364      	movs	r3, #100	; 0x64
 80024ec:	220d      	movs	r2, #13
 80024ee:	f003 f9e1 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_CIPMUX_resp, sizeof(AT_CIPMUX_resp), 100);
 80024f2:	255f      	movs	r5, #95	; 0x5f
 80024f4:	197c      	adds	r4, r7, r5
 80024f6:	233c      	movs	r3, #60	; 0x3c
 80024f8:	18f9      	adds	r1, r7, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	2364      	movs	r3, #100	; 0x64
 80024fe:	2214      	movs	r2, #20
 8002500:	f003 fa80 	bl	8005a04 <HAL_UART_Receive>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 8002508:	197b      	adds	r3, r7, r5
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <esp8266_setupTCP+0xb0>
			success_flag = 1;
 8002510:	2301      	movs	r3, #1
 8002512:	663b      	str	r3, [r7, #96]	; 0x60
	while (success_flag == 0){
 8002514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0d7      	beq.n	80024ca <esp8266_setupTCP+0x66>
		}
	}

	//Setup TCP Server
	tries = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	667b      	str	r3, [r7, #100]	; 0x64
	success_flag = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	663b      	str	r3, [r7, #96]	; 0x60
	status = HAL_ERROR;
 8002522:	235f      	movs	r3, #95	; 0x5f
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 800252a:	e024      	b.n	8002576 <esp8266_setupTCP+0x112>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	0018      	movs	r0, r3
 8002530:	f003 fbe4 	bl	8005cfc <HAL_UART_AbortReceive>


		tries++;
 8002534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002536:	3301      	adds	r3, #1
 8002538:	667b      	str	r3, [r7, #100]	; 0x64
		if (tries == 5){
 800253a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253c:	2b05      	cmp	r3, #5
 800253e:	d102      	bne.n	8002546 <esp8266_setupTCP+0xe2>
			return ESP8266_FAILED;
 8002540:	2301      	movs	r3, #1
 8002542:	425b      	negs	r3, r3
 8002544:	e01f      	b.n	8002586 <esp8266_setupTCP+0x122>
		}
		HAL_UART_Transmit(UARTx, AT_CIPSERVER, sizeof(AT_CIPSERVER), 100);
 8002546:	2328      	movs	r3, #40	; 0x28
 8002548:	18f9      	adds	r1, r7, r3
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	2364      	movs	r3, #100	; 0x64
 800254e:	2213      	movs	r2, #19
 8002550:	f003 f9b0 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_CIPSERVER_resp, sizeof(AT_CIPSERVER_resp), 100);
 8002554:	255f      	movs	r5, #95	; 0x5f
 8002556:	197c      	adds	r4, r7, r5
 8002558:	230c      	movs	r3, #12
 800255a:	18f9      	adds	r1, r7, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	221a      	movs	r2, #26
 8002562:	f003 fa4f 	bl	8005a04 <HAL_UART_Receive>
 8002566:	0003      	movs	r3, r0
 8002568:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 800256a:	197b      	adds	r3, r7, r5
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <esp8266_setupTCP+0x112>
			success_flag = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	663b      	str	r3, [r7, #96]	; 0x60
	while (success_flag == 0){
 8002576:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0d7      	beq.n	800252c <esp8266_setupTCP+0xc8>
		}
	}

	//Reset Receiver Buffer
	HAL_UART_AbortReceive(UARTx);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	0018      	movs	r0, r3
 8002580:	f003 fbbc 	bl	8005cfc <HAL_UART_AbortReceive>

	return ESP8266_SUCCESS;
 8002584:	2301      	movs	r3, #1
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b01a      	add	sp, #104	; 0x68
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	08006d70 	.word	0x08006d70
 8002594:	08006d80 	.word	0x08006d80

08002598 <make_ATCWJAP_command>:

int make_ATCWJAP_command(char * AT_command, char * ssid, char * password){
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	int ssid_length, password_length;
    int command_len = 9;
 80025a4:	2309      	movs	r3, #9
 80025a6:	617b      	str	r3, [r7, #20]

	ssid_length = 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
	password_length = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]

	while(ssid[ssid_length-1] != '\0'){
 80025b0:	e00f      	b.n	80025d2 <make_ATCWJAP_command+0x3a>
		AT_command[9+ssid_length-1] = ssid[ssid_length-1];
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	18d2      	adds	r2, r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3308      	adds	r3, #8
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	18cb      	adds	r3, r1, r3
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
		ssid_length ++;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3301      	adds	r3, #1
 80025ca:	61fb      	str	r3, [r7, #28]
		command_len++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
	while(ssid[ssid_length-1] != '\0'){
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b01      	subs	r3, #1
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	18d3      	adds	r3, r2, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e8      	bne.n	80025b2 <make_ATCWJAP_command+0x1a>
	}

	AT_command[9+ssid_length-1] = ',';
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	3308      	adds	r3, #8
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	222c      	movs	r2, #44	; 0x2c
 80025ea:	701a      	strb	r2, [r3, #0]
	command_len++;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	3301      	adds	r3, #1
 80025f0:	617b      	str	r3, [r7, #20]


	while(password[password_length-1] != '\0'){
 80025f2:	e014      	b.n	800261e <make_ATCWJAP_command+0x86>
		AT_command[9+(ssid_length)+(password_length-1)] = password[password_length-1];
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	3b01      	subs	r3, #1
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	18d2      	adds	r2, r2, r3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	3309      	adds	r3, #9
 8002600:	0019      	movs	r1, r3
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	3b01      	subs	r3, #1
 8002606:	18cb      	adds	r3, r1, r3
 8002608:	0019      	movs	r1, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	185b      	adds	r3, r3, r1
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	701a      	strb	r2, [r3, #0]
		password_length ++;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3301      	adds	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
		command_len++;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	3301      	adds	r3, #1
 800261c:	617b      	str	r3, [r7, #20]
	while(password[password_length-1] != '\0'){
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3b01      	subs	r3, #1
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	18d3      	adds	r3, r2, r3
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e3      	bne.n	80025f4 <make_ATCWJAP_command+0x5c>
	}

	AT_command[command_len] = '\r';
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	18d3      	adds	r3, r2, r3
 8002632:	220d      	movs	r2, #13
 8002634:	701a      	strb	r2, [r3, #0]
	command_len++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
	AT_command[command_len] = '\n';
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	18d3      	adds	r3, r2, r3
 8002642:	220a      	movs	r2, #10
 8002644:	701a      	strb	r2, [r3, #0]
	command_len++;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]

	return command_len;
 800264c:	697b      	ldr	r3, [r7, #20]
}
 800264e:	0018      	movs	r0, r3
 8002650:	46bd      	mov	sp, r7
 8002652:	b008      	add	sp, #32
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <esp8266_connectWifi>:

	return ESP8266_SUCCESS;
}


int esp8266_connectWifi(UART_HandleTypeDef * UARTx, char * ssid, char * password){
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b0b8      	sub	sp, #224	; 0xe0
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
	uint8_t AT_CIPSERVER[16] = "AT+CIPSERVER=0\r\n";
 8002664:	23c0      	movs	r3, #192	; 0xc0
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <esp8266_connectWifi+0x108>)
 800266a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800266c:	c313      	stmia	r3!, {r0, r1, r4}
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	601a      	str	r2, [r3, #0]
	uint8_t AT_CIPSERVER_resp[sizeof(AT_CIPSERVER)+7];

	uint8_t AT_CWJAP[50] = "AT+CWJAP=";
 8002672:	2474      	movs	r4, #116	; 0x74
 8002674:	1939      	adds	r1, r7, r4
 8002676:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <esp8266_connectWifi+0x10c>)
 8002678:	000b      	movs	r3, r1
 800267a:	ca21      	ldmia	r2!, {r0, r5}
 800267c:	c321      	stmia	r3!, {r0, r5}
 800267e:	8812      	ldrh	r2, [r2, #0]
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	230a      	movs	r3, #10
 8002684:	18cb      	adds	r3, r1, r3
 8002686:	2228      	movs	r2, #40	; 0x28
 8002688:	2100      	movs	r1, #0
 800268a:	0018      	movs	r0, r3
 800268c:	f004 f9d0 	bl	8006a30 <memset>
	int AT_CWJAP_size = make_ATCWJAP_command((char*) AT_CWJAP, ssid, password);
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	193b      	adds	r3, r7, r4
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff ff7e 	bl	8002598 <make_ATCWJAP_command>
 800269c:	0003      	movs	r3, r0
 800269e:	22d4      	movs	r2, #212	; 0xd4
 80026a0:	18ba      	adds	r2, r7, r2
 80026a2:	6013      	str	r3, [r2, #0]
	int tries;
	int success_flag;
	HAL_StatusTypeDef status;

	//Reset Receiver Buffer
	HAL_UART_AbortReceive(UARTx);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0018      	movs	r0, r3
 80026a8:	f003 fb28 	bl	8005cfc <HAL_UART_AbortReceive>

	//Close TCP Server
	tries = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	22dc      	movs	r2, #220	; 0xdc
 80026b0:	18ba      	adds	r2, r7, r2
 80026b2:	6013      	str	r3, [r2, #0]
	success_flag = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	22d8      	movs	r2, #216	; 0xd8
 80026b8:	18ba      	adds	r2, r7, r2
 80026ba:	6013      	str	r3, [r2, #0]
	status = HAL_ERROR;
 80026bc:	23d3      	movs	r3, #211	; 0xd3
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 80026c4:	e026      	b.n	8002714 <esp8266_connectWifi+0xbc>
		tries++;
 80026c6:	22dc      	movs	r2, #220	; 0xdc
 80026c8:	18bb      	adds	r3, r7, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	18b9      	adds	r1, r7, r2
 80026d0:	600b      	str	r3, [r1, #0]
		if (tries == 5){
 80026d2:	18bb      	adds	r3, r7, r2
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d102      	bne.n	80026e0 <esp8266_connectWifi+0x88>
			return ESP8266_FAILED;
 80026da:	2301      	movs	r3, #1
 80026dc:	425b      	negs	r3, r3
 80026de:	e03b      	b.n	8002758 <esp8266_connectWifi+0x100>
		}
		HAL_UART_Transmit(UARTx, AT_CIPSERVER, sizeof(AT_CIPSERVER), 100);
 80026e0:	23c0      	movs	r3, #192	; 0xc0
 80026e2:	18f9      	adds	r1, r7, r3
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	2364      	movs	r3, #100	; 0x64
 80026e8:	2210      	movs	r2, #16
 80026ea:	f003 f8e3 	bl	80058b4 <HAL_UART_Transmit>
		status = HAL_UART_Receive(UARTx, AT_CIPSERVER_resp, sizeof(AT_CIPSERVER_resp), 100);
 80026ee:	25d3      	movs	r5, #211	; 0xd3
 80026f0:	197c      	adds	r4, r7, r5
 80026f2:	23a8      	movs	r3, #168	; 0xa8
 80026f4:	18f9      	adds	r1, r7, r3
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	2364      	movs	r3, #100	; 0x64
 80026fa:	2217      	movs	r2, #23
 80026fc:	f003 f982 	bl	8005a04 <HAL_UART_Receive>
 8002700:	0003      	movs	r3, r0
 8002702:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 8002704:	197b      	adds	r3, r7, r5
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d103      	bne.n	8002714 <esp8266_connectWifi+0xbc>
			success_flag = 1;
 800270c:	2301      	movs	r3, #1
 800270e:	22d8      	movs	r2, #216	; 0xd8
 8002710:	18ba      	adds	r2, r7, r2
 8002712:	6013      	str	r3, [r2, #0]
	while (success_flag == 0){
 8002714:	23d8      	movs	r3, #216	; 0xd8
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0d3      	beq.n	80026c6 <esp8266_connectWifi+0x6e>
		}
	}

	//Connect to WiFi
	HAL_UART_Transmit(UARTx, AT_CWJAP, AT_CWJAP_size, 100);
 800271e:	23d4      	movs	r3, #212	; 0xd4
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	b29a      	uxth	r2, r3
 8002726:	2374      	movs	r3, #116	; 0x74
 8002728:	18f9      	adds	r1, r7, r3
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	2364      	movs	r3, #100	; 0x64
 800272e:	f003 f8c1 	bl	80058b4 <HAL_UART_Transmit>
	HAL_UART_Receive(UARTx, resp, 100, 6000);
 8002732:	4b0d      	ldr	r3, [pc, #52]	; (8002768 <esp8266_connectWifi+0x110>)
 8002734:	2410      	movs	r4, #16
 8002736:	1939      	adds	r1, r7, r4
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	2264      	movs	r2, #100	; 0x64
 800273c:	f003 f962 	bl	8005a04 <HAL_UART_Receive>


	if (strstr((char*) resp, (char *) "WIFI CONNECTED") != NULL){
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <esp8266_connectWifi+0x114>)
 8002742:	193b      	adds	r3, r7, r4
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f004 f988 	bl	8006a5c <strstr>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <esp8266_connectWifi+0xfc>
		return ESP8266_SUCCESS;
 8002750:	2301      	movs	r3, #1
 8002752:	e001      	b.n	8002758 <esp8266_connectWifi+0x100>
	}
	else{
		return ESP8266_FAILED;
 8002754:	2301      	movs	r3, #1
 8002756:	425b      	negs	r3, r3
	}

}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b038      	add	sp, #224	; 0xe0
 800275e:	bdb0      	pop	{r4, r5, r7, pc}
 8002760:	08006db0 	.word	0x08006db0
 8002764:	08006dc4 	.word	0x08006dc4
 8002768:	00001770 	.word	0x00001770
 800276c:	08006da0 	.word	0x08006da0

08002770 <make_ATcommand_sendmsg>:

int make_ATcommand_sendmsg(char * ATcommand, int message_length){
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
	char string_num[5] = "";
 800277a:	210c      	movs	r1, #12
 800277c:	187b      	adds	r3, r7, r1
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	711a      	strb	r2, [r3, #4]
	int ATcommand_index = 13;
 8002786:	230d      	movs	r3, #13
 8002788:	61fb      	str	r3, [r7, #28]
	int string_num_index = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
	int command_len = 13;
 800278e:	230d      	movs	r3, #13
 8002790:	617b      	str	r3, [r7, #20]

	//Convert int number to string number
	itoa(message_length, string_num,10);
 8002792:	1879      	adds	r1, r7, r1
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	220a      	movs	r2, #10
 8002798:	0018      	movs	r0, r3
 800279a:	f004 f945 	bl	8006a28 <itoa>

	//Construct AT command by first putting size of message
	while(string_num[string_num_index] != '\0'){
 800279e:	e011      	b.n	80027c4 <make_ATcommand_sendmsg+0x54>
		ATcommand[ATcommand_index] = string_num[string_num_index];
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	18d3      	adds	r3, r2, r3
 80027a6:	220c      	movs	r2, #12
 80027a8:	18b9      	adds	r1, r7, r2
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	188a      	adds	r2, r1, r2
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	701a      	strb	r2, [r3, #0]
		ATcommand_index++;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
		string_num_index++;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	3301      	adds	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
		command_len++;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
	while(string_num[string_num_index] != '\0'){
 80027c4:	230c      	movs	r3, #12
 80027c6:	18fa      	adds	r2, r7, r3
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	18d3      	adds	r3, r2, r3
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e6      	bne.n	80027a0 <make_ATcommand_sendmsg+0x30>
	}

	ATcommand[command_len] = '\r';
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	18d3      	adds	r3, r2, r3
 80027d8:	220d      	movs	r2, #13
 80027da:	701a      	strb	r2, [r3, #0]
	command_len++;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3301      	adds	r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
	ATcommand[command_len] = '\n';
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	18d3      	adds	r3, r2, r3
 80027e8:	220a      	movs	r2, #10
 80027ea:	701a      	strb	r2, [r3, #0]
	command_len++;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	617b      	str	r3, [r7, #20]

	return command_len;
 80027f2:	697b      	ldr	r3, [r7, #20]
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b008      	add	sp, #32
 80027fa:	bd80      	pop	{r7, pc}

080027fc <esp8266_sendmsg>:


int esp8266_sendmsg(UART_HandleTypeDef * UARTx, char * message, int message_length){
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	b09f      	sub	sp, #124	; 0x7c
 8002800:	af00      	add	r7, sp, #0
 8002802:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002804:	62b9      	str	r1, [r7, #40]	; 0x28
 8002806:	627a      	str	r2, [r7, #36]	; 0x24
 8002808:	466b      	mov	r3, sp
 800280a:	623b      	str	r3, [r7, #32]
	uint8_t at_command[50] = "AT+CIPSEND=0,";
 800280c:	2610      	movs	r6, #16
 800280e:	2320      	movs	r3, #32
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	1999      	adds	r1, r3, r6
 8002814:	4a49      	ldr	r2, [pc, #292]	; (800293c <esp8266_sendmsg+0x140>)
 8002816:	000b      	movs	r3, r1
 8002818:	ca31      	ldmia	r2!, {r0, r4, r5}
 800281a:	c331      	stmia	r3!, {r0, r4, r5}
 800281c:	8812      	ldrh	r2, [r2, #0]
 800281e:	801a      	strh	r2, [r3, #0]
 8002820:	230e      	movs	r3, #14
 8002822:	18cb      	adds	r3, r1, r3
 8002824:	2224      	movs	r2, #36	; 0x24
 8002826:	2100      	movs	r1, #0
 8002828:	0018      	movs	r0, r3
 800282a:	f004 f901 	bl	8006a30 <memset>
	int command_len = make_ATcommand_sendmsg((char *) at_command, message_length);
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	2320      	movs	r3, #32
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	199b      	adds	r3, r3, r6
 8002836:	0011      	movs	r1, r2
 8002838:	0018      	movs	r0, r3
 800283a:	f7ff ff99 	bl	8002770 <make_ATcommand_sendmsg>
 800283e:	0003      	movs	r3, r0
 8002840:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint8_t at_command_resp[command_len+7];
 8002842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002844:	1dde      	adds	r6, r3, #7
 8002846:	1e73      	subs	r3, r6, #1
 8002848:	66bb      	str	r3, [r7, #104]	; 0x68
 800284a:	0033      	movs	r3, r6
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	000b      	movs	r3, r1
 8002858:	0f5b      	lsrs	r3, r3, #29
 800285a:	0010      	movs	r0, r2
 800285c:	00c0      	lsls	r0, r0, #3
 800285e:	61f8      	str	r0, [r7, #28]
 8002860:	69f8      	ldr	r0, [r7, #28]
 8002862:	4318      	orrs	r0, r3
 8002864:	61f8      	str	r0, [r7, #28]
 8002866:	000b      	movs	r3, r1
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	0033      	movs	r3, r6
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	000b      	movs	r3, r1
 800287a:	0f5b      	lsrs	r3, r3, #29
 800287c:	0010      	movs	r0, r2
 800287e:	00c0      	lsls	r0, r0, #3
 8002880:	6178      	str	r0, [r7, #20]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	4318      	orrs	r0, r3
 8002886:	6178      	str	r0, [r7, #20]
 8002888:	000b      	movs	r3, r1
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	0033      	movs	r3, r6
 8002890:	3307      	adds	r3, #7
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	466a      	mov	r2, sp
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	469d      	mov	sp, r3
 800289c:	466b      	mov	r3, sp
 800289e:	3300      	adds	r3, #0
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
	int tries;
	int success_flag;
	HAL_StatusTypeDef status;

	//Set up the ATcommand to send messsage
	tries = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	673b      	str	r3, [r7, #112]	; 0x70
	success_flag = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	677b      	str	r3, [r7, #116]	; 0x74
	status = HAL_ERROR;
 80028aa:	2343      	movs	r3, #67	; 0x43
 80028ac:	2220      	movs	r2, #32
 80028ae:	4694      	mov	ip, r2
 80028b0:	44bc      	add	ip, r7
 80028b2:	4463      	add	r3, ip
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
	while (success_flag == 0){
 80028b8:	e02a      	b.n	8002910 <esp8266_sendmsg+0x114>

		tries++;
 80028ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028bc:	3301      	adds	r3, #1
 80028be:	673b      	str	r3, [r7, #112]	; 0x70
		if (tries == 5){
 80028c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d102      	bne.n	80028cc <esp8266_sendmsg+0xd0>
			return ESP8266_FAILED;
 80028c6:	2301      	movs	r3, #1
 80028c8:	425b      	negs	r3, r3
 80028ca:	e031      	b.n	8002930 <esp8266_sendmsg+0x134>
		}
		HAL_UART_Transmit(UARTx, at_command, command_len, 100);
 80028cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	2310      	movs	r3, #16
 80028d2:	2120      	movs	r1, #32
 80028d4:	1879      	adds	r1, r7, r1
 80028d6:	18c9      	adds	r1, r1, r3
 80028d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028da:	2364      	movs	r3, #100	; 0x64
 80028dc:	f002 ffea 	bl	80058b4 <HAL_UART_Transmit>

		//Reset Receiver Buffer
		HAL_UART_AbortReceive(UARTx);
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	0018      	movs	r0, r3
 80028e4:	f003 fa0a 	bl	8005cfc <HAL_UART_AbortReceive>

		status = HAL_UART_Receive(UARTx, at_command_resp, sizeof(at_command_resp), 100);
 80028e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80028ea:	b2b2      	uxth	r2, r6
 80028ec:	2543      	movs	r5, #67	; 0x43
 80028ee:	2320      	movs	r3, #32
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	195c      	adds	r4, r3, r5
 80028f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028f6:	2364      	movs	r3, #100	; 0x64
 80028f8:	f003 f884 	bl	8005a04 <HAL_UART_Receive>
 80028fc:	0003      	movs	r3, r0
 80028fe:	7023      	strb	r3, [r4, #0]
		if (status == HAL_OK){
 8002900:	2320      	movs	r3, #32
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	195b      	adds	r3, r3, r5
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <esp8266_sendmsg+0x114>
			success_flag = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	677b      	str	r3, [r7, #116]	; 0x74
	while (success_flag == 0){
 8002910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0d1      	beq.n	80028ba <esp8266_sendmsg+0xbe>
		}
	}

	//Send message
	HAL_UART_Transmit(UARTx, (uint8_t*) message, message_length, 100);
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	b29a      	uxth	r2, r3
 800291a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800291e:	2364      	movs	r3, #100	; 0x64
 8002920:	f002 ffc8 	bl	80058b4 <HAL_UART_Transmit>
	//Wait for some time till message is sent
	HAL_Delay(800);
 8002924:	23c8      	movs	r3, #200	; 0xc8
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	0018      	movs	r0, r3
 800292a:	f001 ff0d 	bl	8004748 <HAL_Delay>

	return ESP8266_SUCCESS;
 800292e:	2301      	movs	r3, #1
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	4695      	mov	sp, r2
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b01f      	add	sp, #124	; 0x7c
 800293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293c:	08006df8 	.word	0x08006df8

08002940 <esp8266_check_wifi_connection>:

int esp8266_check_wifi_connection(UART_HandleTypeDef * UARTx){
 8002940:	b5b0      	push	{r4, r5, r7, lr}
 8002942:	b094      	sub	sp, #80	; 0x50
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
	uint8_t AT_CIPSTATUS[14] = "AT+CIPSTATUS\r\n";
 8002948:	2540      	movs	r5, #64	; 0x40
 800294a:	197b      	adds	r3, r7, r5
 800294c:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <esp8266_check_wifi_connection+0x88>)
 800294e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002950:	c313      	stmia	r3!, {r0, r1, r4}
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	801a      	strh	r2, [r3, #0]
	uint8_t AT_CIPSTATUS_resp[50] = "";
 8002956:	240c      	movs	r4, #12
 8002958:	193b      	adds	r3, r7, r4
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	3304      	adds	r3, #4
 8002960:	222e      	movs	r2, #46	; 0x2e
 8002962:	2100      	movs	r1, #0
 8002964:	0018      	movs	r0, r3
 8002966:	f004 f863 	bl	8006a30 <memset>


	//Wait until ESP8266 boots up
	HAL_Delay(5000);
 800296a:	4b18      	ldr	r3, [pc, #96]	; (80029cc <esp8266_check_wifi_connection+0x8c>)
 800296c:	0018      	movs	r0, r3
 800296e:	f001 feeb 	bl	8004748 <HAL_Delay>

	HAL_UART_Transmit(UARTx, AT_CIPSTATUS, sizeof(AT_CIPSTATUS), 100);
 8002972:	1979      	adds	r1, r7, r5
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	2364      	movs	r3, #100	; 0x64
 8002978:	220e      	movs	r2, #14
 800297a:	f002 ff9b 	bl	80058b4 <HAL_UART_Transmit>

	//Reset Receiver Buffer
	HAL_UART_AbortReceive(UARTx);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	0018      	movs	r0, r3
 8002982:	f003 f9bb 	bl	8005cfc <HAL_UART_AbortReceive>

	HAL_UART_Receive(UARTx, AT_CIPSTATUS_resp, sizeof(AT_CIPSTATUS_resp),500);
 8002986:	23fa      	movs	r3, #250	; 0xfa
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	1939      	adds	r1, r7, r4
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	2232      	movs	r2, #50	; 0x32
 8002990:	f003 f838 	bl	8005a04 <HAL_UART_Receive>

	if (strstr((char*)AT_CIPSTATUS_resp, (char*) "5") != NULL){
 8002994:	193b      	adds	r3, r7, r4
 8002996:	2135      	movs	r1, #53	; 0x35
 8002998:	0018      	movs	r0, r3
 800299a:	f004 f851 	bl	8006a40 <strchr>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <esp8266_check_wifi_connection+0x66>
		//Not connected to WiFi
		return 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e00b      	b.n	80029be <esp8266_check_wifi_connection+0x7e>
	}

	else if (strstr((char*)AT_CIPSTATUS_resp, (char*) "2") != NULL) {
 80029a6:	230c      	movs	r3, #12
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2132      	movs	r1, #50	; 0x32
 80029ac:	0018      	movs	r0, r3
 80029ae:	f004 f847 	bl	8006a40 <strchr>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <esp8266_check_wifi_connection+0x7a>
		return 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e001      	b.n	80029be <esp8266_check_wifi_connection+0x7e>
	}

	return -1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	425b      	negs	r3, r3
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b014      	add	sp, #80	; 0x50
 80029c4:	bdb0      	pop	{r4, r5, r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	08006e2c 	.word	0x08006e2c
 80029cc:	00001388 	.word	0x00001388

080029d0 <esp8266_send_current_data>:

int esp8266_send_current_data(UART_HandleTypeDef * UARTx, char * message, int temp, int bat, int slat, int message_len){
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
	int num_index = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]

	char string_num1[4] = "";
 80029e2:	2118      	movs	r1, #24
 80029e4:	187b      	adds	r3, r7, r1
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
	char string_num2[4] = "";
 80029ea:	2414      	movs	r4, #20
 80029ec:	193b      	adds	r3, r7, r4
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
	char string_num3[4] = "";
 80029f2:	2510      	movs	r5, #16
 80029f4:	197b      	adds	r3, r7, r5
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]

	//Convert temp, slat, bat data to string
	itoa(temp, string_num1,10);
 80029fa:	1879      	adds	r1, r7, r1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	220a      	movs	r2, #10
 8002a00:	0018      	movs	r0, r3
 8002a02:	f004 f811 	bl	8006a28 <itoa>
	itoa(bat, string_num2, 10);
 8002a06:	1939      	adds	r1, r7, r4
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	220a      	movs	r2, #10
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f004 f80b 	bl	8006a28 <itoa>
	itoa(slat, string_num3, 10);
 8002a12:	1979      	adds	r1, r7, r5
 8002a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a16:	220a      	movs	r2, #10
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f004 f805 	bl	8006a28 <itoa>


	//Construct the message
	while (string_num1[num_index] != '\0'){
 8002a1e:	e00e      	b.n	8002a3e <esp8266_send_current_data+0x6e>
		message[message_len] = string_num1[num_index];
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	2218      	movs	r2, #24
 8002a28:	18b9      	adds	r1, r7, r2
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	188a      	adds	r2, r1, r2
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
		num_index ++;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
		message_len ++;
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
	while (string_num1[num_index] != '\0'){
 8002a3e:	2318      	movs	r3, #24
 8002a40:	18fa      	adds	r2, r7, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	18d3      	adds	r3, r2, r3
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e9      	bne.n	8002a20 <esp8266_send_current_data+0x50>
	}
	message[message_len] = ',';
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	222c      	movs	r2, #44	; 0x2c
 8002a54:	701a      	strb	r2, [r3, #0]
	message_len++;
 8002a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a58:	3301      	adds	r3, #1
 8002a5a:	637b      	str	r3, [r7, #52]	; 0x34
	num_index = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
	while (string_num2[num_index] != '\0'){
 8002a60:	e00e      	b.n	8002a80 <esp8266_send_current_data+0xb0>
		message[message_len] = string_num2[num_index];
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	18d3      	adds	r3, r2, r3
 8002a68:	2214      	movs	r2, #20
 8002a6a:	18b9      	adds	r1, r7, r2
 8002a6c:	69fa      	ldr	r2, [r7, #28]
 8002a6e:	188a      	adds	r2, r1, r2
 8002a70:	7812      	ldrb	r2, [r2, #0]
 8002a72:	701a      	strb	r2, [r3, #0]
		num_index ++;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
		message_len ++;
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
	while (string_num2[num_index] != '\0'){
 8002a80:	2314      	movs	r3, #20
 8002a82:	18fa      	adds	r2, r7, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	18d3      	adds	r3, r2, r3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e9      	bne.n	8002a62 <esp8266_send_current_data+0x92>
	}
	message[message_len] = ',';
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	222c      	movs	r2, #44	; 0x2c
 8002a96:	701a      	strb	r2, [r3, #0]
	message_len++;
 8002a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
	num_index = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
	while (string_num3[num_index] != '\0'){
 8002aa2:	e00e      	b.n	8002ac2 <esp8266_send_current_data+0xf2>
		message[message_len] = string_num3[num_index];
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	2210      	movs	r2, #16
 8002aac:	18b9      	adds	r1, r7, r2
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	188a      	adds	r2, r1, r2
 8002ab2:	7812      	ldrb	r2, [r2, #0]
 8002ab4:	701a      	strb	r2, [r3, #0]
		num_index ++;
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61fb      	str	r3, [r7, #28]
		message_len ++;
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	3301      	adds	r3, #1
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
	while (string_num3[num_index] != '\0'){
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	18fa      	adds	r2, r7, r3
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	18d3      	adds	r3, r2, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1e9      	bne.n	8002aa4 <esp8266_send_current_data+0xd4>
	}
	message[message_len] = '\r';
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	220d      	movs	r2, #13
 8002ad8:	701a      	strb	r2, [r3, #0]
	message_len++;
 8002ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002adc:	3301      	adds	r3, #1
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
	message[message_len] = '\n';
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	220a      	movs	r2, #10
 8002ae8:	701a      	strb	r2, [r3, #0]
	message_len++;
 8002aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aec:	3301      	adds	r3, #1
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34

	return esp8266_sendmsg(UARTx, message, message_len);
 8002af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7ff fe80 	bl	80027fc <esp8266_sendmsg>
 8002afc:	0003      	movs	r3, r0

}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b008      	add	sp, #32
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b08 <ADC_Init>:
#include "main.h"

void ADC_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <ADC_Init+0x9c>)
 8002b0e:	695a      	ldr	r2, [r3, #20]
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <ADC_Init+0x9c>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0309      	lsls	r1, r1, #12
 8002b16:	430a      	orrs	r2, r1
 8002b18:	615a      	str	r2, [r3, #20]
	GPIOA->MODER &= ~(3 << (2 * 4));
 8002b1a:	2390      	movs	r3, #144	; 0x90
 8002b1c:	05db      	lsls	r3, r3, #23
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2390      	movs	r3, #144	; 0x90
 8002b22:	05db      	lsls	r3, r3, #23
 8002b24:	4920      	ldr	r1, [pc, #128]	; (8002ba8 <ADC_Init+0xa0>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

	GPIOA->MODER |= (3 << (2 * 4));			//Set PA4 to analog
 8002b2a:	2390      	movs	r3, #144	; 0x90
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2390      	movs	r3, #144	; 0x90
 8002b32:	05db      	lsls	r3, r3, #23
 8002b34:	21c0      	movs	r1, #192	; 0xc0
 8002b36:	0089      	lsls	r1, r1, #2
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (3 << (2 * 0));			//Set PC0 to analog
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <ADC_Init+0xa4>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <ADC_Init+0xa4>)
 8002b42:	2103      	movs	r1, #3
 8002b44:	430a      	orrs	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
	GPIOC->MODER |= (3 << (2 * 1));			//Set PC1 to analog
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <ADC_Init+0xa4>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <ADC_Init+0xa4>)
 8002b4e:	210c      	movs	r1, #12
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;		//Enable ADC in RCC
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <ADC_Init+0x9c>)
 8002b56:	699a      	ldr	r2, [r3, #24]
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <ADC_Init+0x9c>)
 8002b5a:	2180      	movs	r1, #128	; 0x80
 8002b5c:	0089      	lsls	r1, r1, #2
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	619a      	str	r2, [r3, #24]

	RCC->CR2 |= RCC_CR2_HSI14ON;
 8002b62:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <ADC_Init+0x9c>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <ADC_Init+0x9c>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34

	while(!(RCC->CR2 & RCC_CR2_HSI14RDY));
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <ADC_Init+0x9c>)
 8002b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b74:	2202      	movs	r2, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d0fa      	beq.n	8002b70 <ADC_Init+0x68>

	ADC1->CR |= ADC_CR_ADEN;
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <ADC_Init+0xa8>)
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <ADC_Init+0xa8>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	609a      	str	r2, [r3, #8]

	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <ADC_Init+0xa8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d0fa      	beq.n	8002b88 <ADC_Init+0x80>
	while((ADC1->CR & ADC_CR_ADSTART));
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <ADC_Init+0xa8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1fa      	bne.n	8002b94 <ADC_Init+0x8c>
}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	fffffcff 	.word	0xfffffcff
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	40012400 	.word	0x40012400

08002bb4 <ADC_Read>:

int ADC_Read(int channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	ADC1->CHSELR = 0;
 8002bbc:	4b13      	ldr	r3, [pc, #76]	; (8002c0c <ADC_Read+0x58>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	629a      	str	r2, [r3, #40]	; 0x28
	ADC1->CHSELR |= 1 << channel;
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <ADC_Read+0x58>)
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4099      	lsls	r1, r3
 8002bcc:	000b      	movs	r3, r1
 8002bce:	0019      	movs	r1, r3
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <ADC_Read+0x58>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
	while(!(ADC1->ISR & ADC_ISR_ADRDY));
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <ADC_Read+0x58>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0fa      	beq.n	8002bd8 <ADC_Read+0x24>
	ADC1->CR |= ADC_CR_ADSTART;
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <ADC_Read+0x58>)
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <ADC_Read+0x58>)
 8002be8:	2104      	movs	r1, #4
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
	while(!(ADC1->ISR & ADC_ISR_EOC));
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <ADC_Read+0x58>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2204      	movs	r2, #4
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d0fa      	beq.n	8002bf0 <ADC_Read+0x3c>
	int x = ADC1->DR;
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <ADC_Read+0x58>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	60fb      	str	r3, [r7, #12]
	return x;
 8002c00:	68fb      	ldr	r3, [r7, #12]
}
 8002c02:	0018      	movs	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	b004      	add	sp, #16
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	46c0      	nop			; (mov r8, r8)
 8002c0c:	40012400 	.word	0x40012400

08002c10 <Get_Luminosity>:

int Get_Luminosity(int ADC_Lumen)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	//Returns 1 if light
	//Returns 0 if dark
	float Vcc = 5;
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <Get_Luminosity+0x48>)
 8002c1a:	617b      	str	r3, [r7, #20]
	float inputVoltage = ADC_Lumen;
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7fe f911 	bl	8000e44 <__aeabi_i2f>
 8002c22:	1c03      	adds	r3, r0, #0
 8002c24:	613b      	str	r3, [r7, #16]
	float Vo = (inputVoltage / 4096) * Vcc;
 8002c26:	218b      	movs	r1, #139	; 0x8b
 8002c28:	05c9      	lsls	r1, r1, #23
 8002c2a:	6938      	ldr	r0, [r7, #16]
 8002c2c:	f7fd fc1c 	bl	8000468 <__aeabi_fdiv>
 8002c30:	1c03      	adds	r3, r0, #0
 8002c32:	1c19      	adds	r1, r3, #0
 8002c34:	6978      	ldr	r0, [r7, #20]
 8002c36:	f7fd fdef 	bl	8000818 <__aeabi_fmul>
 8002c3a:	1c03      	adds	r3, r0, #0
 8002c3c:	60fb      	str	r3, [r7, #12]

	if(Vo < 2.5)
 8002c3e:	4907      	ldr	r1, [pc, #28]	; (8002c5c <Get_Luminosity+0x4c>)
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7fd fbe9 	bl	8000418 <__aeabi_fcmplt>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d001      	beq.n	8002c4e <Get_Luminosity+0x3e>
	{
		return 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	e000      	b.n	8002c50 <Get_Luminosity+0x40>
	}
	else
	{
		return 1;
 8002c4e:	2301      	movs	r3, #1
	}
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b006      	add	sp, #24
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40a00000 	.word	0x40a00000
 8002c5c:	40200000 	.word	0x40200000

08002c60 <Get_Battery_Percentage>:

int Get_Battery_Percentage(int ADC_Battery)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	//float TrueVoltage = ADC_Battery * 2;
	float TrueVoltage = ((float) ADC_Battery / 4096) * 3;
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fe f8eb 	bl	8000e44 <__aeabi_i2f>
 8002c6e:	1c03      	adds	r3, r0, #0
 8002c70:	218b      	movs	r1, #139	; 0x8b
 8002c72:	05c9      	lsls	r1, r1, #23
 8002c74:	1c18      	adds	r0, r3, #0
 8002c76:	f7fd fbf7 	bl	8000468 <__aeabi_fdiv>
 8002c7a:	1c03      	adds	r3, r0, #0
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <Get_Battery_Percentage+0x78>)
 8002c7e:	1c18      	adds	r0, r3, #0
 8002c80:	f7fd fdca 	bl	8000818 <__aeabi_fmul>
 8002c84:	1c03      	adds	r3, r0, #0
 8002c86:	60fb      	str	r3, [r7, #12]
	float Percentage = ((TrueVoltage) / 1.56) * 100;
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f7ff f9f5 	bl	8002078 <__aeabi_f2d>
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <Get_Battery_Percentage+0x7c>)
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <Get_Battery_Percentage+0x80>)
 8002c92:	f7fe fc7d 	bl	8001590 <__aeabi_ddiv>
 8002c96:	0003      	movs	r3, r0
 8002c98:	000c      	movs	r4, r1
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	0021      	movs	r1, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <Get_Battery_Percentage+0x84>)
 8002ca2:	f7fe ff77 	bl	8001b94 <__aeabi_dmul>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	000c      	movs	r4, r1
 8002caa:	0018      	movs	r0, r3
 8002cac:	0021      	movs	r1, r4
 8002cae:	f7ff fa35 	bl	800211c <__aeabi_d2f>
 8002cb2:	1c03      	adds	r3, r0, #0
 8002cb4:	60bb      	str	r3, [r7, #8]
	if (Percentage > 100)
 8002cb6:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <Get_Battery_Percentage+0x88>)
 8002cb8:	68b8      	ldr	r0, [r7, #8]
 8002cba:	f7fd fbc1 	bl	8000440 <__aeabi_fcmpgt>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d001      	beq.n	8002cc6 <Get_Battery_Percentage+0x66>
	{
		return 100;
 8002cc2:	2364      	movs	r3, #100	; 0x64
 8002cc4:	e003      	b.n	8002cce <Get_Battery_Percentage+0x6e>
	}
	else
	{
		return Percentage;
 8002cc6:	68b8      	ldr	r0, [r7, #8]
 8002cc8:	f7fe f89c 	bl	8000e04 <__aeabi_f2iz>
 8002ccc:	0003      	movs	r3, r0
	}
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b005      	add	sp, #20
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	40400000 	.word	0x40400000
 8002cdc:	8f5c28f6 	.word	0x8f5c28f6
 8002ce0:	3ff8f5c2 	.word	0x3ff8f5c2
 8002ce4:	40590000 	.word	0x40590000
 8002ce8:	42c80000 	.word	0x42c80000

08002cec <Convert_Fahrenheit>:

int Convert_Fahrenheit(float Temperature_C)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
	float Temperature_F = round(Temperature_C * 1.8 + 32);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff f9bf 	bl	8002078 <__aeabi_f2d>
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <Convert_Fahrenheit+0x54>)
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <Convert_Fahrenheit+0x58>)
 8002cfe:	f7fe ff49 	bl	8001b94 <__aeabi_dmul>
 8002d02:	0003      	movs	r3, r0
 8002d04:	000c      	movs	r4, r1
 8002d06:	0018      	movs	r0, r3
 8002d08:	0021      	movs	r1, r4
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <Convert_Fahrenheit+0x5c>)
 8002d0e:	f7fe f923 	bl	8000f58 <__aeabi_dadd>
 8002d12:	0003      	movs	r3, r0
 8002d14:	000c      	movs	r4, r1
 8002d16:	0018      	movs	r0, r3
 8002d18:	0021      	movs	r1, r4
 8002d1a:	f003 ffab 	bl	8006c74 <round>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	000c      	movs	r4, r1
 8002d22:	0018      	movs	r0, r3
 8002d24:	0021      	movs	r1, r4
 8002d26:	f7ff f9f9 	bl	800211c <__aeabi_d2f>
 8002d2a:	1c03      	adds	r3, r0, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
	return (int) Temperature_F;
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f7fe f868 	bl	8000e04 <__aeabi_f2iz>
 8002d34:	0003      	movs	r3, r0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b005      	add	sp, #20
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	46c0      	nop			; (mov r8, r8)
 8002d40:	cccccccd 	.word	0xcccccccd
 8002d44:	3ffccccc 	.word	0x3ffccccc
 8002d48:	40400000 	.word	0x40400000

08002d4c <Get_Temperature>:

float Get_Temperature(int ADC_Temperature)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08a      	sub	sp, #40	; 0x28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	float Resistor = 22000; //10 kOhm resistors used
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <Get_Temperature+0x94>)
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
	float Vcc = 3;	//Vcc = 3V
 8002d58:	4b22      	ldr	r3, [pc, #136]	; (8002de4 <Get_Temperature+0x98>)
 8002d5a:	623b      	str	r3, [r7, #32]
	float Photocell;
	float inputVoltage = ADC_Temperature;
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7fe f871 	bl	8000e44 <__aeabi_i2f>
 8002d62:	1c03      	adds	r3, r0, #0
 8002d64:	61fb      	str	r3, [r7, #28]
	float Vo = (inputVoltage/4096) * Vcc;
 8002d66:	218b      	movs	r1, #139	; 0x8b
 8002d68:	05c9      	lsls	r1, r1, #23
 8002d6a:	69f8      	ldr	r0, [r7, #28]
 8002d6c:	f7fd fb7c 	bl	8000468 <__aeabi_fdiv>
 8002d70:	1c03      	adds	r3, r0, #0
 8002d72:	1c19      	adds	r1, r3, #0
 8002d74:	6a38      	ldr	r0, [r7, #32]
 8002d76:	f7fd fd4f 	bl	8000818 <__aeabi_fmul>
 8002d7a:	1c03      	adds	r3, r0, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
	Photocell = ((3 * Resistor) / Vo) - Resistor;
 8002d7e:	4919      	ldr	r1, [pc, #100]	; (8002de4 <Get_Temperature+0x98>)
 8002d80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d82:	f7fd fd49 	bl	8000818 <__aeabi_fmul>
 8002d86:	1c03      	adds	r3, r0, #0
 8002d88:	69b9      	ldr	r1, [r7, #24]
 8002d8a:	1c18      	adds	r0, r3, #0
 8002d8c:	f7fd fb6c 	bl	8000468 <__aeabi_fdiv>
 8002d90:	1c03      	adds	r3, r0, #0
 8002d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d94:	1c18      	adds	r0, r3, #0
 8002d96:	f7fd fe71 	bl	8000a7c <__aeabi_fsub>
 8002d9a:	1c03      	adds	r3, r0, #0
 8002d9c:	617b      	str	r3, [r7, #20]
	float Resistance_Rx = Photocell - 20000;	//Find change in resistance from 25 degrees celcius
 8002d9e:	4912      	ldr	r1, [pc, #72]	; (8002de8 <Get_Temperature+0x9c>)
 8002da0:	6978      	ldr	r0, [r7, #20]
 8002da2:	f7fd fe6b 	bl	8000a7c <__aeabi_fsub>
 8002da6:	1c03      	adds	r3, r0, #0
 8002da8:	613b      	str	r3, [r7, #16]
	//Temperature coefficient = -4.4% (20,000 * 0.044 = 880)/1 degree Celcius
	float Temperature_Rx = Resistance_Rx / (880);
 8002daa:	4910      	ldr	r1, [pc, #64]	; (8002dec <Get_Temperature+0xa0>)
 8002dac:	6938      	ldr	r0, [r7, #16]
 8002dae:	f7fd fb5b 	bl	8000468 <__aeabi_fdiv>
 8002db2:	1c03      	adds	r3, r0, #0
 8002db4:	60fb      	str	r3, [r7, #12]
	if(Temperature_Rx < 0)
 8002db6:	2100      	movs	r1, #0
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7fd fb2d 	bl	8000418 <__aeabi_fcmplt>
 8002dbe:	1e03      	subs	r3, r0, #0
 8002dc0:	d005      	beq.n	8002dce <Get_Temperature+0x82>
	{
		return 25 + (-1 * Temperature_Rx);
 8002dc2:	68f9      	ldr	r1, [r7, #12]
 8002dc4:	480a      	ldr	r0, [pc, #40]	; (8002df0 <Get_Temperature+0xa4>)
 8002dc6:	f7fd fe59 	bl	8000a7c <__aeabi_fsub>
 8002dca:	1c03      	adds	r3, r0, #0
 8002dcc:	e004      	b.n	8002dd8 <Get_Temperature+0x8c>
	}
	else
	{
		return 25 - Temperature_Rx;
 8002dce:	68f9      	ldr	r1, [r7, #12]
 8002dd0:	4807      	ldr	r0, [pc, #28]	; (8002df0 <Get_Temperature+0xa4>)
 8002dd2:	f7fd fe53 	bl	8000a7c <__aeabi_fsub>
 8002dd6:	1c03      	adds	r3, r0, #0
	}
}
 8002dd8:	1c18      	adds	r0, r3, #0
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b00a      	add	sp, #40	; 0x28
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	46abe000 	.word	0x46abe000
 8002de4:	40400000 	.word	0x40400000
 8002de8:	469c4000 	.word	0x469c4000
 8002dec:	445c0000 	.word	0x445c0000
 8002df0:	41c80000 	.word	0x41c80000

08002df4 <Motor_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Motor_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
	 	 PA0: Motor Up (TIM2->CH1)
	 	 PA1: Motor Down (TIM2->CH2)
	 	 PA2: Motor Open (TIM3->CH3)
	 	 PA3: Motor Close (TIM3->CH4l8
	 */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8002dfa:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <Motor_Init+0x208>)
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	4b7f      	ldr	r3, [pc, #508]	; (8002ffc <Motor_Init+0x208>)
 8002e00:	2180      	movs	r1, #128	; 0x80
 8002e02:	0289      	lsls	r1, r1, #10
 8002e04:	430a      	orrs	r2, r1
 8002e06:	615a      	str	r2, [r3, #20]


	GPIOA->MODER &= ~(3 << (2 * 0));	//Clear Moder 0
 8002e08:	2390      	movs	r3, #144	; 0x90
 8002e0a:	05db      	lsls	r3, r3, #23
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2390      	movs	r3, #144	; 0x90
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	2103      	movs	r1, #3
 8002e14:	438a      	bics	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(3 << (2 * 1));	//Clear Moder 1
 8002e18:	2390      	movs	r3, #144	; 0x90
 8002e1a:	05db      	lsls	r3, r3, #23
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2390      	movs	r3, #144	; 0x90
 8002e20:	05db      	lsls	r3, r3, #23
 8002e22:	210c      	movs	r1, #12
 8002e24:	438a      	bics	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(3 << (2 * 2));	//Clear Moder 2
 8002e28:	2390      	movs	r3, #144	; 0x90
 8002e2a:	05db      	lsls	r3, r3, #23
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	2390      	movs	r3, #144	; 0x90
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	2130      	movs	r1, #48	; 0x30
 8002e34:	438a      	bics	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(3 << (2 * 3));	//Clear Moder 3
 8002e38:	2390      	movs	r3, #144	; 0x90
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2390      	movs	r3, #144	; 0x90
 8002e40:	05db      	lsls	r3, r3, #23
 8002e42:	21c0      	movs	r1, #192	; 0xc0
 8002e44:	438a      	bics	r2, r1
 8002e46:	601a      	str	r2, [r3, #0]

	GPIOA->MODER |= (2 << (2 * 0));		//Set PA5 to Alternate Function Mode
 8002e48:	2390      	movs	r3, #144	; 0x90
 8002e4a:	05db      	lsls	r3, r3, #23
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2390      	movs	r3, #144	; 0x90
 8002e50:	05db      	lsls	r3, r3, #23
 8002e52:	2102      	movs	r1, #2
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << (2 * 1));		//Set PA1 Alternative Function Mode
 8002e58:	2390      	movs	r3, #144	; 0x90
 8002e5a:	05db      	lsls	r3, r3, #23
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	2390      	movs	r3, #144	; 0x90
 8002e60:	05db      	lsls	r3, r3, #23
 8002e62:	2108      	movs	r1, #8
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << (2 * 2));		//Set PA2 to Alternative Function Mode
 8002e68:	2390      	movs	r3, #144	; 0x90
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	2390      	movs	r3, #144	; 0x90
 8002e70:	05db      	lsls	r3, r3, #23
 8002e72:	2120      	movs	r1, #32
 8002e74:	430a      	orrs	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << (2 * 3));		//Set PA3 to Alternative Function Mode
 8002e78:	2390      	movs	r3, #144	; 0x90
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2390      	movs	r3, #144	; 0x90
 8002e80:	05db      	lsls	r3, r3, #23
 8002e82:	2180      	movs	r1, #128	; 0x80
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xF << (4 * 0));		//Clear AF5
 8002e88:	2390      	movs	r3, #144	; 0x90
 8002e8a:	05db      	lsls	r3, r3, #23
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	2390      	movs	r3, #144	; 0x90
 8002e90:	05db      	lsls	r3, r3, #23
 8002e92:	210f      	movs	r1, #15
 8002e94:	438a      	bics	r2, r1
 8002e96:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xF << (4 * 1));		//Clear AF3
 8002e98:	2390      	movs	r3, #144	; 0x90
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	6a1a      	ldr	r2, [r3, #32]
 8002e9e:	2390      	movs	r3, #144	; 0x90
 8002ea0:	05db      	lsls	r3, r3, #23
 8002ea2:	21f0      	movs	r1, #240	; 0xf0
 8002ea4:	438a      	bics	r2, r1
 8002ea6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xF << (4 * 2));		//Clear AF2
 8002ea8:	2390      	movs	r3, #144	; 0x90
 8002eaa:	05db      	lsls	r3, r3, #23
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	2390      	movs	r3, #144	; 0x90
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	4953      	ldr	r1, [pc, #332]	; (8003000 <Motor_Init+0x20c>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xF << (4 * 3));		//Clear AF1
 8002eb8:	2390      	movs	r3, #144	; 0x90
 8002eba:	05db      	lsls	r3, r3, #23
 8002ebc:	6a1a      	ldr	r2, [r3, #32]
 8002ebe:	2390      	movs	r3, #144	; 0x90
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	4950      	ldr	r1, [pc, #320]	; (8003004 <Motor_Init+0x210>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	621a      	str	r2, [r3, #32]

	GPIOA->AFR[0] |= (2 << (4 * 0));	//Set to PA5 to AF1
 8002ec8:	2390      	movs	r3, #144	; 0x90
 8002eca:	05db      	lsls	r3, r3, #23
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
 8002ece:	2390      	movs	r3, #144	; 0x90
 8002ed0:	05db      	lsls	r3, r3, #23
 8002ed2:	2102      	movs	r1, #2
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (2 << (4 * 1));	//Set PA1 to AF1
 8002ed8:	2390      	movs	r3, #144	; 0x90
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	2390      	movs	r3, #144	; 0x90
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	2120      	movs	r1, #32
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (2 << (4 * 2));	//Set PA2 to AF1
 8002ee8:	2390      	movs	r3, #144	; 0x90
 8002eea:	05db      	lsls	r3, r3, #23
 8002eec:	6a1a      	ldr	r2, [r3, #32]
 8002eee:	2390      	movs	r3, #144	; 0x90
 8002ef0:	05db      	lsls	r3, r3, #23
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	0089      	lsls	r1, r1, #2
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (2 << (4 * 3));	//Set PA3 to AF1
 8002efa:	2390      	movs	r3, #144	; 0x90
 8002efc:	05db      	lsls	r3, r3, #23
 8002efe:	6a1a      	ldr	r2, [r3, #32]
 8002f00:	2390      	movs	r3, #144	; 0x90
 8002f02:	05db      	lsls	r3, r3, #23
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0189      	lsls	r1, r1, #6
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	621a      	str	r2, [r3, #32]

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;		//Enable Timer2 in RCC
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	; (8002ffc <Motor_Init+0x208>)
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <Motor_Init+0x208>)
 8002f12:	2101      	movs	r1, #1
 8002f14:	430a      	orrs	r2, r1
 8002f16:	61da      	str	r2, [r3, #28]
	TIM2->PSC = 480 - 1;
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	05db      	lsls	r3, r3, #23
 8002f1c:	22e0      	movs	r2, #224	; 0xe0
 8002f1e:	32ff      	adds	r2, #255	; 0xff
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	2263      	movs	r2, #99	; 0x63
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CCMR1 |= TIM_CCMR1_OC1PE | TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;	//TIM2->CH1
 8002f2a:	2380      	movs	r3, #128	; 0x80
 8002f2c:	05db      	lsls	r3, r3, #23
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	2168      	movs	r1, #104	; 0x68
 8002f36:	430a      	orrs	r2, r1
 8002f38:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 |= TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2PE;	//TIM2->CH2
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	2380      	movs	r3, #128	; 0x80
 8002f42:	05db      	lsls	r3, r3, #23
 8002f44:	21d0      	movs	r1, #208	; 0xd0
 8002f46:	01c9      	lsls	r1, r1, #7
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
	TIM2->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3PE;	//TIM2->CH3
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	05db      	lsls	r3, r3, #23
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	05db      	lsls	r3, r3, #23
 8002f56:	2168      	movs	r1, #104	; 0x68
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
	TIM2->CCMR2 |= TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4PE;	//TIM2->CH4
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	05db      	lsls	r3, r3, #23
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	05db      	lsls	r3, r3, #23
 8002f66:	21d0      	movs	r1, #208	; 0xd0
 8002f68:	01c9      	lsls	r1, r1, #7
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	61da      	str	r2, [r3, #28]


	TIM2->CCER |= TIM_CCER_CC1E;	//Enable output in capture/control register 1
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	05db      	lsls	r3, r3, #23
 8002f72:	6a1a      	ldr	r2, [r3, #32]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	05db      	lsls	r3, r3, #23
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC2E;	//Enable output in capture/control register 2
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	6a1a      	ldr	r2, [r3, #32]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	05db      	lsls	r3, r3, #23
 8002f88:	2110      	movs	r1, #16
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC3E;
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	05db      	lsls	r3, r3, #23
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0049      	lsls	r1, r1, #1
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	621a      	str	r2, [r3, #32]
	TIM2->CCER |= TIM_CCER_CC4E;
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	05db      	lsls	r3, r3, #23
 8002fa4:	6a1a      	ldr	r2, [r3, #32]
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	0149      	lsls	r1, r1, #5
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	621a      	str	r2, [r3, #32]

	TIM2->CR1 |= TIM_CR1_CEN;		//Enable timer counter
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	05db      	lsls	r3, r3, #23
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	05db      	lsls	r3, r3, #23
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fc2:	1d3b      	adds	r3, r7, #4
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	2201      	movs	r2, #1
 8002fcc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <Motor_Init+0x214>)
 8002fde:	0019      	movs	r1, r3
 8002fe0:	0010      	movs	r0, r2
 8002fe2:	f001 fd39 	bl	8004a58 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <Motor_Init+0x214>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	2104      	movs	r1, #4
 8002fec:	0018      	movs	r0, r3
 8002fee:	f001 fea3 	bl	8004d38 <HAL_GPIO_WritePin>

	return;
 8002ff2:	46c0      	nop			; (mov r8, r8)
}
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b006      	add	sp, #24
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	40021000 	.word	0x40021000
 8003000:	fffff0ff 	.word	0xfffff0ff
 8003004:	ffff0fff 	.word	0xffff0fff
 8003008:	48000400 	.word	0x48000400

0800300c <delay>:

void delay(float val)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	int i, max = (int)(val * 50000);
 8003014:	490b      	ldr	r1, [pc, #44]	; (8003044 <delay+0x38>)
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fbfe 	bl	8000818 <__aeabi_fmul>
 800301c:	1c03      	adds	r3, r0, #0
 800301e:	1c18      	adds	r0, r3, #0
 8003020:	f7fd fef0 	bl	8000e04 <__aeabi_f2iz>
 8003024:	0003      	movs	r3, r0
 8003026:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < max; i++);
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e002      	b.n	8003034 <delay+0x28>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	dbf8      	blt.n	800302e <delay+0x22>
}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b004      	add	sp, #16
 8003042:	bd80      	pop	{r7, pc}
 8003044:	47435000 	.word	0x47435000

08003048 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	if (current_state == MANUAL){
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_UART_RxCpltCallback+0x3c>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b06      	cmp	r3, #6
 8003056:	d103      	bne.n	8003060 <HAL_UART_RxCpltCallback+0x18>
		manual_control_flag = 1;
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_UART_RxCpltCallback+0x40>)
 800305a:	2201      	movs	r2, #1
 800305c:	601a      	str	r2, [r3, #0]
	else{
		receive_flag = 1;
		message_index++;
		message_len++;
	}
}
 800305e:	e00c      	b.n	800307a <HAL_UART_RxCpltCallback+0x32>
		receive_flag = 1;
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <HAL_UART_RxCpltCallback+0x44>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]
		message_index++;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_UART_RxCpltCallback+0x48>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_UART_RxCpltCallback+0x48>)
 800306e:	601a      	str	r2, [r3, #0]
		message_len++;
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_UART_RxCpltCallback+0x4c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <HAL_UART_RxCpltCallback+0x4c>)
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	46bd      	mov	sp, r7
 800307e:	b002      	add	sp, #8
 8003080:	bd80      	pop	{r7, pc}
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	200002dc 	.word	0x200002dc
 8003088:	20000288 	.word	0x20000288
 800308c:	200002c8 	.word	0x200002c8
 8003090:	200003b0 	.word	0x200003b0
 8003094:	200002e4 	.word	0x200002e4

08003098 <TIM3_IRQHandler>:

void TIM3_IRQHandler()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
	if((TIM3->SR & TIM_SR_UIF) != 0)
 800309e:	4b4c      	ldr	r3, [pc, #304]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d006      	beq.n	80030b6 <TIM3_IRQHandler+0x1e>
	{
		TIM3->SR &= ~1;
 80030a8:	4b49      	ldr	r3, [pc, #292]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	611a      	str	r2, [r3, #16]
		return;
 80030b4:	e088      	b.n	80031c8 <TIM3_IRQHandler+0x130>
	}

	if(TIM3->SR & TIM_SR_CC1IF)
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2202      	movs	r2, #2
 80030bc:	4013      	ands	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM3_IRQHandler+0x38>
	{
		TIM2->CCR1 = 100;
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	05db      	lsls	r3, r3, #23
 80030c4:	2264      	movs	r2, #100	; 0x64
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34
		int __attribute((unused)) useless;
		useless = TIM2->CCR1;
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	05db      	lsls	r3, r3, #23
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	617b      	str	r3, [r7, #20]
		//return;
	}
	if(TIM3->SR & TIM_SR_CC2IF)
 80030d0:	4b3f      	ldr	r3, [pc, #252]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2204      	movs	r2, #4
 80030d6:	4013      	ands	r3, r2
 80030d8:	d007      	beq.n	80030ea <TIM3_IRQHandler+0x52>
	{
		TIM2->CCR2 = 100;
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	05db      	lsls	r3, r3, #23
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
		int __attribute((unused)) useless;
		useless = TIM2->CCR2;
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	05db      	lsls	r3, r3, #23
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	613b      	str	r3, [r7, #16]
	}
	if(TIM3->SR & TIM_SR_CC3IF)		//Blinds open
 80030ea:	4b39      	ldr	r3, [pc, #228]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	2208      	movs	r2, #8
 80030f0:	4013      	ands	r3, r2
 80030f2:	d01a      	beq.n	800312a <TIM3_IRQHandler+0x92>
	{
		while((GPIOB->IDR & (1 << 0)) != 0)
 80030f4:	e010      	b.n	8003118 <TIM3_IRQHandler+0x80>
		{
			delay(2);
 80030f6:	2380      	movs	r3, #128	; 0x80
 80030f8:	05db      	lsls	r3, r3, #23
 80030fa:	1c18      	adds	r0, r3, #0
 80030fc:	f7ff ff86 	bl	800300c <delay>
			if(TIM2->CCR3 < 100)
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	05db      	lsls	r3, r3, #23
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003106:	2b63      	cmp	r3, #99	; 0x63
 8003108:	d806      	bhi.n	8003118 <TIM3_IRQHandler+0x80>
			{
				TIM2->CCR3 += 10;
 800310a:	2380      	movs	r3, #128	; 0x80
 800310c:	05db      	lsls	r3, r3, #23
 800310e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	320a      	adds	r2, #10
 8003116:	63da      	str	r2, [r3, #60]	; 0x3c
		while((GPIOB->IDR & (1 << 0)) != 0)
 8003118:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <TIM3_IRQHandler+0x13c>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d1e9      	bne.n	80030f6 <TIM3_IRQHandler+0x5e>
			}
		}
		int __attribute((unused)) useless;
		useless = TIM2->CCR3;
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	05db      	lsls	r3, r3, #23
 8003126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003128:	60fb      	str	r3, [r7, #12]
	}
	if(TIM3->SR & TIM_SR_CC4IF)		//Blinds Close
 800312a:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <TIM3_IRQHandler+0x138>)
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2210      	movs	r2, #16
 8003130:	4013      	ands	r3, r2
 8003132:	d01a      	beq.n	800316a <TIM3_IRQHandler+0xd2>
	{
		while((GPIOB->IDR & (1 << 1)) != 0)
 8003134:	e010      	b.n	8003158 <TIM3_IRQHandler+0xc0>
		{
			delay(2);
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	05db      	lsls	r3, r3, #23
 800313a:	1c18      	adds	r0, r3, #0
 800313c:	f7ff ff66 	bl	800300c <delay>
			if(TIM2->CCR3 > 0)
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	05db      	lsls	r3, r3, #23
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <TIM3_IRQHandler+0xc0>
			{
				TIM2->CCR3 -= 10;
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	05db      	lsls	r3, r3, #23
 800314e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	05db      	lsls	r3, r3, #23
 8003154:	3a0a      	subs	r2, #10
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c
		while((GPIOB->IDR & (1 << 1)) != 0)
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <TIM3_IRQHandler+0x13c>)
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2202      	movs	r2, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d1e9      	bne.n	8003136 <TIM3_IRQHandler+0x9e>
			}
		}
		int __attribute((unused)) useless;
		useless = TIM2->CCR3;
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	05db      	lsls	r3, r3, #23
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	60bb      	str	r3, [r7, #8]
	}

	while((GPIOA->IDR & (1 << 6)) != 0);		//Wait for button to stop being pressed
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	2390      	movs	r3, #144	; 0x90
 800316e:	05db      	lsls	r3, r3, #23
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	4013      	ands	r3, r2
 8003176:	d1f9      	bne.n	800316c <TIM3_IRQHandler+0xd4>
	while((GPIOA->IDR & (1 << 7)) != 0);
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	2390      	movs	r3, #144	; 0x90
 800317c:	05db      	lsls	r3, r3, #23
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2280      	movs	r2, #128	; 0x80
 8003182:	4013      	ands	r3, r2
 8003184:	d1f9      	bne.n	800317a <TIM3_IRQHandler+0xe2>
	while((GPIOB->IDR & (1 << 0)) != 0);
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	4b12      	ldr	r3, [pc, #72]	; (80031d4 <TIM3_IRQHandler+0x13c>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d1fa      	bne.n	8003188 <TIM3_IRQHandler+0xf0>
	while((GPIOB->IDR & (1 << 1)) != 0);
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <TIM3_IRQHandler+0x13c>)
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2202      	movs	r2, #2
 800319a:	4013      	ands	r3, r2
 800319c:	d1fa      	bne.n	8003194 <TIM3_IRQHandler+0xfc>

	int __attribute((unused)) useless;
	useless = TIM3->CCR1;
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	607b      	str	r3, [r7, #4]
	useless = TIM3->CCR2;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	607b      	str	r3, [r7, #4]
	useless = TIM3->CCR3;
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	607b      	str	r3, [r7, #4]
	useless = TIM3->CCR4;
 80031b0:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <TIM3_IRQHandler+0x138>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	607b      	str	r3, [r7, #4]
	TIM2->CCR1 = 0;
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	05db      	lsls	r3, r3, #23
 80031ba:	2200      	movs	r2, #0
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	2200      	movs	r2, #0
 80031c4:	639a      	str	r2, [r3, #56]	; 0x38
	return;
 80031c6:	46c0      	nop			; (mov r8, r8)
}
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b006      	add	sp, #24
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	40000400 	.word	0x40000400
 80031d4:	48000400 	.word	0x48000400

080031d8 <Button_OpenClose_Init>:

void Button_OpenClose_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0


		 */

		//Timer
		RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80031dc:	4b55      	ldr	r3, [pc, #340]	; (8003334 <Button_OpenClose_Init+0x15c>)
 80031de:	695a      	ldr	r2, [r3, #20]
 80031e0:	4b54      	ldr	r3, [pc, #336]	; (8003334 <Button_OpenClose_Init+0x15c>)
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	02c9      	lsls	r1, r1, #11
 80031e6:	430a      	orrs	r2, r1
 80031e8:	615a      	str	r2, [r3, #20]

		GPIOB->MODER &= ~(3 << (2 * 0));	//Clear PB0
 80031ea:	4b53      	ldr	r3, [pc, #332]	; (8003338 <Button_OpenClose_Init+0x160>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <Button_OpenClose_Init+0x160>)
 80031f0:	2103      	movs	r1, #3
 80031f2:	438a      	bics	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
		GPIOB->MODER &= ~(3 << (2 * 1));	//Clear PB1
 80031f6:	4b50      	ldr	r3, [pc, #320]	; (8003338 <Button_OpenClose_Init+0x160>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <Button_OpenClose_Init+0x160>)
 80031fc:	210c      	movs	r1, #12
 80031fe:	438a      	bics	r2, r1
 8003200:	601a      	str	r2, [r3, #0]

		GPIOB->MODER |= (2 << (2 * 0));		//Set PB0 to AF
 8003202:	4b4d      	ldr	r3, [pc, #308]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003208:	2102      	movs	r1, #2
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
		GPIOB->MODER |= (2 << (2 * 1));		//Set PB1 to AF
 800320e:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b49      	ldr	r3, [pc, #292]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003214:	2108      	movs	r1, #8
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

		GPIOB->AFR[0] &= ~(0xF << (4 * 0));	//Clear AFR[0]
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <Button_OpenClose_Init+0x160>)
 800321c:	6a1a      	ldr	r2, [r3, #32]
 800321e:	4b46      	ldr	r3, [pc, #280]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003220:	210f      	movs	r1, #15
 8003222:	438a      	bics	r2, r1
 8003224:	621a      	str	r2, [r3, #32]
		GPIOB->AFR[0] &= ~(0xF << (4 * 1));	//Clear AFR[1]
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	4b43      	ldr	r3, [pc, #268]	; (8003338 <Button_OpenClose_Init+0x160>)
 800322c:	21f0      	movs	r1, #240	; 0xf0
 800322e:	438a      	bics	r2, r1
 8003230:	621a      	str	r2, [r3, #32]

		GPIOB->AFR[0] |= (1 << (4 * 0));	//Set AFR[6] to AF1
 8003232:	4b41      	ldr	r3, [pc, #260]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	4b40      	ldr	r3, [pc, #256]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003238:	2101      	movs	r1, #1
 800323a:	430a      	orrs	r2, r1
 800323c:	621a      	str	r2, [r3, #32]
		GPIOB->AFR[0] |= (1 << (4 * 1));	//Set AFR[7] to AF1
 800323e:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	4b3d      	ldr	r3, [pc, #244]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003244:	2110      	movs	r1, #16
 8003246:	430a      	orrs	r2, r1
 8003248:	621a      	str	r2, [r3, #32]

		GPIOB->PUPDR &= ~(3 << (2 * 0));	//Clear PUPDR 6
 800324a:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <Button_OpenClose_Init+0x160>)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	4b3a      	ldr	r3, [pc, #232]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003250:	2103      	movs	r1, #3
 8003252:	438a      	bics	r2, r1
 8003254:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR &= ~(3 << (2 * 1));	//Clear PUPDR 7
 8003256:	4b38      	ldr	r3, [pc, #224]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <Button_OpenClose_Init+0x160>)
 800325c:	210c      	movs	r1, #12
 800325e:	438a      	bics	r2, r1
 8003260:	60da      	str	r2, [r3, #12]

		GPIOB->PUPDR |= (2 << (2 * 0));		//Set Pull-Down
 8003262:	4b35      	ldr	r3, [pc, #212]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	4b34      	ldr	r3, [pc, #208]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003268:	2102      	movs	r1, #2
 800326a:	430a      	orrs	r2, r1
 800326c:	60da      	str	r2, [r3, #12]
		GPIOB->PUPDR |= (2 << (2 * 1));		//Set Pull-Down
 800326e:	4b32      	ldr	r3, [pc, #200]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	4b31      	ldr	r3, [pc, #196]	; (8003338 <Button_OpenClose_Init+0x160>)
 8003274:	2108      	movs	r1, #8
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]

		RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;	//Enable Timer3 in RCC
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <Button_OpenClose_Init+0x15c>)
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <Button_OpenClose_Init+0x15c>)
 8003280:	2102      	movs	r1, #2
 8003282:	430a      	orrs	r2, r1
 8003284:	61da      	str	r2, [r3, #28]

		TIM3->PSC = 1 - 1;
 8003286:	4b2d      	ldr	r3, [pc, #180]	; (800333c <Button_OpenClose_Init+0x164>)
 8003288:	2200      	movs	r2, #0
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
		TIM3->ARR = 0xFFFFFFFF;
 800328c:	4b2b      	ldr	r3, [pc, #172]	; (800333c <Button_OpenClose_Init+0x164>)
 800328e:	2201      	movs	r2, #1
 8003290:	4252      	negs	r2, r2
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM3->CCMR2 &= ~TIM_CCMR2_CC3S;
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <Button_OpenClose_Init+0x164>)
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	4b28      	ldr	r3, [pc, #160]	; (800333c <Button_OpenClose_Init+0x164>)
 800329a:	2103      	movs	r1, #3
 800329c:	438a      	bics	r2, r1
 800329e:	61da      	str	r2, [r3, #28]
		TIM3->CCMR2 &= ~TIM_CCMR2_CC4S;
 80032a0:	4b26      	ldr	r3, [pc, #152]	; (800333c <Button_OpenClose_Init+0x164>)
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <Button_OpenClose_Init+0x164>)
 80032a6:	4926      	ldr	r1, [pc, #152]	; (8003340 <Button_OpenClose_Init+0x168>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	61da      	str	r2, [r3, #28]

		TIM3->CCMR2 |= TIM_CCMR2_CC3S_0;
 80032ac:	4b23      	ldr	r3, [pc, #140]	; (800333c <Button_OpenClose_Init+0x164>)
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	4b22      	ldr	r3, [pc, #136]	; (800333c <Button_OpenClose_Init+0x164>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	430a      	orrs	r2, r1
 80032b6:	61da      	str	r2, [r3, #28]
		TIM3->CCMR2 |= TIM_CCMR2_CC4S_0;
 80032b8:	4b20      	ldr	r3, [pc, #128]	; (800333c <Button_OpenClose_Init+0x164>)
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <Button_OpenClose_Init+0x164>)
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	0049      	lsls	r1, r1, #1
 80032c2:	430a      	orrs	r2, r1
 80032c4:	61da      	str	r2, [r3, #28]

		TIM3->CCER &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <Button_OpenClose_Init+0x164>)
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <Button_OpenClose_Init+0x164>)
 80032cc:	491d      	ldr	r1, [pc, #116]	; (8003344 <Button_OpenClose_Init+0x16c>)
 80032ce:	400a      	ands	r2, r1
 80032d0:	621a      	str	r2, [r3, #32]
		TIM3->CCER &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <Button_OpenClose_Init+0x164>)
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	4b19      	ldr	r3, [pc, #100]	; (800333c <Button_OpenClose_Init+0x164>)
 80032d8:	491b      	ldr	r1, [pc, #108]	; (8003348 <Button_OpenClose_Init+0x170>)
 80032da:	400a      	ands	r2, r1
 80032dc:	621a      	str	r2, [r3, #32]

		TIM3->CCER |= TIM_CCER_CC3E;
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <Button_OpenClose_Init+0x164>)
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <Button_OpenClose_Init+0x164>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0049      	lsls	r1, r1, #1
 80032e8:	430a      	orrs	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]
		TIM3->CCER |= TIM_CCER_CC4E;
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <Button_OpenClose_Init+0x164>)
 80032ee:	6a1a      	ldr	r2, [r3, #32]
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <Button_OpenClose_Init+0x164>)
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	0149      	lsls	r1, r1, #5
 80032f6:	430a      	orrs	r2, r1
 80032f8:	621a      	str	r2, [r3, #32]

		TIM3->DIER |= TIM_DIER_CC3IE;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <Button_OpenClose_Init+0x164>)
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <Button_OpenClose_Init+0x164>)
 8003300:	2108      	movs	r1, #8
 8003302:	430a      	orrs	r2, r1
 8003304:	60da      	str	r2, [r3, #12]
		TIM3->DIER |= TIM_DIER_CC4IE;
 8003306:	4b0d      	ldr	r3, [pc, #52]	; (800333c <Button_OpenClose_Init+0x164>)
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	4b0c      	ldr	r3, [pc, #48]	; (800333c <Button_OpenClose_Init+0x164>)
 800330c:	2110      	movs	r1, #16
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]

		TIM3->CCMR2 |= TIM_CCMR2_IC3F_3 | TIM_CCMR2_IC3F_2 | TIM_CCMR2_IC3F_1 | TIM_CCMR2_IC3F_0;
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <Button_OpenClose_Init+0x164>)
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <Button_OpenClose_Init+0x164>)
 8003318:	21f0      	movs	r1, #240	; 0xf0
 800331a:	430a      	orrs	r2, r1
 800331c:	61da      	str	r2, [r3, #28]
		TIM3->CCMR2 |= TIM_CCMR2_IC4F_3 | TIM_CCMR2_IC4F_2 | TIM_CCMR2_IC4F_1 | TIM_CCMR2_IC4F_0;
 800331e:	4b07      	ldr	r3, [pc, #28]	; (800333c <Button_OpenClose_Init+0x164>)
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <Button_OpenClose_Init+0x164>)
 8003324:	21f0      	movs	r1, #240	; 0xf0
 8003326:	0209      	lsls	r1, r1, #8
 8003328:	430a      	orrs	r2, r1
 800332a:	61da      	str	r2, [r3, #28]

}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	40021000 	.word	0x40021000
 8003338:	48000400 	.word	0x48000400
 800333c:	40000400 	.word	0x40000400
 8003340:	fffffcff 	.word	0xfffffcff
 8003344:	fffff5ff 	.word	0xfffff5ff
 8003348:	ffff5fff 	.word	0xffff5fff

0800334c <Button_UpDown_Init>:

void Button_UpDown_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0


	 */

	//Timer
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <Button_UpDown_Init+0x1a8>)
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <Button_UpDown_Init+0x1a8>)
 8003356:	2180      	movs	r1, #128	; 0x80
 8003358:	0289      	lsls	r1, r1, #10
 800335a:	430a      	orrs	r2, r1
 800335c:	615a      	str	r2, [r3, #20]

	GPIOA->MODER &= ~(3 << (2 * 6));	//Clear PA6
 800335e:	2390      	movs	r3, #144	; 0x90
 8003360:	05db      	lsls	r3, r3, #23
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	2390      	movs	r3, #144	; 0x90
 8003366:	05db      	lsls	r3, r3, #23
 8003368:	4963      	ldr	r1, [pc, #396]	; (80034f8 <Button_UpDown_Init+0x1ac>)
 800336a:	400a      	ands	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(3 << (2 * 7));	//Clear PA7
 800336e:	2390      	movs	r3, #144	; 0x90
 8003370:	05db      	lsls	r3, r3, #23
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2390      	movs	r3, #144	; 0x90
 8003376:	05db      	lsls	r3, r3, #23
 8003378:	4960      	ldr	r1, [pc, #384]	; (80034fc <Button_UpDown_Init+0x1b0>)
 800337a:	400a      	ands	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

	GPIOA->MODER |= (2 << (2 * 6));		//Set PA6 to AF
 800337e:	2390      	movs	r3, #144	; 0x90
 8003380:	05db      	lsls	r3, r3, #23
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2390      	movs	r3, #144	; 0x90
 8003386:	05db      	lsls	r3, r3, #23
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	0189      	lsls	r1, r1, #6
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (2 << (2 * 7));		//Set PA7 to AF
 8003390:	2390      	movs	r3, #144	; 0x90
 8003392:	05db      	lsls	r3, r3, #23
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2390      	movs	r3, #144	; 0x90
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	2180      	movs	r1, #128	; 0x80
 800339c:	0209      	lsls	r1, r1, #8
 800339e:	430a      	orrs	r2, r1
 80033a0:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[0] &= ~(0xF << (4 * 6));	//Clear AFR[6]
 80033a2:	2390      	movs	r3, #144	; 0x90
 80033a4:	05db      	lsls	r3, r3, #23
 80033a6:	6a1a      	ldr	r2, [r3, #32]
 80033a8:	2390      	movs	r3, #144	; 0x90
 80033aa:	05db      	lsls	r3, r3, #23
 80033ac:	4954      	ldr	r1, [pc, #336]	; (8003500 <Button_UpDown_Init+0x1b4>)
 80033ae:	400a      	ands	r2, r1
 80033b0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(0xF << (4 * 7));	//Clear AFR[7]
 80033b2:	2390      	movs	r3, #144	; 0x90
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	2390      	movs	r3, #144	; 0x90
 80033ba:	05db      	lsls	r3, r3, #23
 80033bc:	0112      	lsls	r2, r2, #4
 80033be:	0912      	lsrs	r2, r2, #4
 80033c0:	621a      	str	r2, [r3, #32]

	GPIOA->AFR[0] |= (1 << (4 * 6));	//Set AFR[6] to AF1
 80033c2:	2390      	movs	r3, #144	; 0x90
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	2390      	movs	r3, #144	; 0x90
 80033ca:	05db      	lsls	r3, r3, #23
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	0449      	lsls	r1, r1, #17
 80033d0:	430a      	orrs	r2, r1
 80033d2:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= (1 << (4 * 7));	//Set AFR[7] to AF1
 80033d4:	2390      	movs	r3, #144	; 0x90
 80033d6:	05db      	lsls	r3, r3, #23
 80033d8:	6a1a      	ldr	r2, [r3, #32]
 80033da:	2390      	movs	r3, #144	; 0x90
 80033dc:	05db      	lsls	r3, r3, #23
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	0549      	lsls	r1, r1, #21
 80033e2:	430a      	orrs	r2, r1
 80033e4:	621a      	str	r2, [r3, #32]

	GPIOA->PUPDR &= ~(3 << (2 * 6));	//Clear PUPDR 6
 80033e6:	2390      	movs	r3, #144	; 0x90
 80033e8:	05db      	lsls	r3, r3, #23
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	2390      	movs	r3, #144	; 0x90
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	4941      	ldr	r1, [pc, #260]	; (80034f8 <Button_UpDown_Init+0x1ac>)
 80033f2:	400a      	ands	r2, r1
 80033f4:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~(3 << (2 * 7));	//Clear PUPDR 7
 80033f6:	2390      	movs	r3, #144	; 0x90
 80033f8:	05db      	lsls	r3, r3, #23
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	2390      	movs	r3, #144	; 0x90
 80033fe:	05db      	lsls	r3, r3, #23
 8003400:	493e      	ldr	r1, [pc, #248]	; (80034fc <Button_UpDown_Init+0x1b0>)
 8003402:	400a      	ands	r2, r1
 8003404:	60da      	str	r2, [r3, #12]

	GPIOA->PUPDR |= (2 << (2 * 6));		//Set Pull-Down
 8003406:	2390      	movs	r3, #144	; 0x90
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	2390      	movs	r3, #144	; 0x90
 800340e:	05db      	lsls	r3, r3, #23
 8003410:	2180      	movs	r1, #128	; 0x80
 8003412:	0189      	lsls	r1, r1, #6
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR |= (2 << (2 * 7));		//Set Pull-Down
 8003418:	2390      	movs	r3, #144	; 0x90
 800341a:	05db      	lsls	r3, r3, #23
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	2390      	movs	r3, #144	; 0x90
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	2180      	movs	r1, #128	; 0x80
 8003424:	0209      	lsls	r1, r1, #8
 8003426:	430a      	orrs	r2, r1
 8003428:	60da      	str	r2, [r3, #12]

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;	//Enable Timer3 in RCC
 800342a:	4b32      	ldr	r3, [pc, #200]	; (80034f4 <Button_UpDown_Init+0x1a8>)
 800342c:	69da      	ldr	r2, [r3, #28]
 800342e:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <Button_UpDown_Init+0x1a8>)
 8003430:	2102      	movs	r1, #2
 8003432:	430a      	orrs	r2, r1
 8003434:	61da      	str	r2, [r3, #28]

	TIM3->PSC = 1 - 1;
 8003436:	4b33      	ldr	r3, [pc, #204]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003438:	2200      	movs	r2, #0
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 0xFFFFFFFF;
 800343c:	4b31      	ldr	r3, [pc, #196]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800343e:	2201      	movs	r2, #1
 8003440:	4252      	negs	r2, r2
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1 &= ~TIM_CCMR1_CC1S;
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	4b2e      	ldr	r3, [pc, #184]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800344a:	2103      	movs	r1, #3
 800344c:	438a      	bics	r2, r1
 800344e:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~TIM_CCMR1_CC2S;
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003456:	492c      	ldr	r1, [pc, #176]	; (8003508 <Button_UpDown_Init+0x1bc>)
 8003458:	400a      	ands	r2, r1
 800345a:	619a      	str	r2, [r3, #24]

	TIM3->CCMR1 |= TIM_CCMR1_CC1S_0;
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	4b28      	ldr	r3, [pc, #160]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003462:	2101      	movs	r1, #1
 8003464:	430a      	orrs	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
 8003468:	4b26      	ldr	r3, [pc, #152]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0049      	lsls	r1, r1, #1
 8003472:	430a      	orrs	r2, r1
 8003474:	619a      	str	r2, [r3, #24]

	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003476:	4b23      	ldr	r3, [pc, #140]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003478:	6a1a      	ldr	r2, [r3, #32]
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800347c:	210a      	movs	r1, #10
 800347e:	438a      	bics	r2, r1
 8003480:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2NP);
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003484:	6a1a      	ldr	r2, [r3, #32]
 8003486:	4b1f      	ldr	r3, [pc, #124]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003488:	2182      	movs	r1, #130	; 0x82
 800348a:	438a      	bics	r2, r1
 800348c:	621a      	str	r2, [r3, #32]

	TIM3->CCER |= TIM_CCER_CC1E;
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <Button_UpDown_Init+0x1b8>)
 8003494:	2101      	movs	r1, #1
 8003496:	430a      	orrs	r2, r1
 8003498:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 800349a:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <Button_UpDown_Init+0x1b8>)
 800349c:	6a1a      	ldr	r2, [r3, #32]
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034a0:	2110      	movs	r1, #16
 80034a2:	430a      	orrs	r2, r1
 80034a4:	621a      	str	r2, [r3, #32]

	TIM3->DIER |= TIM_DIER_CC1IE;
 80034a6:	4b17      	ldr	r3, [pc, #92]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034ac:	2102      	movs	r1, #2
 80034ae:	430a      	orrs	r2, r1
 80034b0:	60da      	str	r2, [r3, #12]
	TIM3->DIER |= TIM_DIER_CC2IE;
 80034b2:	4b14      	ldr	r3, [pc, #80]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b13      	ldr	r3, [pc, #76]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034b8:	2104      	movs	r1, #4
 80034ba:	430a      	orrs	r2, r1
 80034bc:	60da      	str	r2, [r3, #12]

	TIM3->CR1 |= (2 << 8);	//Set clock div4
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b10      	ldr	r3, [pc, #64]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0089      	lsls	r1, r1, #2
 80034c8:	430a      	orrs	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

	NVIC->ISER[0] = 1 << TIM3_IRQn;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	; (800350c <Button_UpDown_Init+0x1c0>)
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	0252      	lsls	r2, r2, #9
 80034d2:	601a      	str	r2, [r3, #0]

	TIM3->CCMR1 |= TIM_CCMR1_IC1F_3 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_0;
 80034d4:	4b0b      	ldr	r3, [pc, #44]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034d6:	699a      	ldr	r2, [r3, #24]
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034da:	21f0      	movs	r1, #240	; 0xf0
 80034dc:	430a      	orrs	r2, r1
 80034de:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_IC2F_3 | TIM_CCMR1_IC2F_2 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_IC2F_0;
 80034e0:	4b08      	ldr	r3, [pc, #32]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <Button_UpDown_Init+0x1b8>)
 80034e6:	21f0      	movs	r1, #240	; 0xf0
 80034e8:	0209      	lsls	r1, r1, #8
 80034ea:	430a      	orrs	r2, r1
 80034ec:	619a      	str	r2, [r3, #24]

}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000
 80034f8:	ffffcfff 	.word	0xffffcfff
 80034fc:	ffff3fff 	.word	0xffff3fff
 8003500:	f0ffffff 	.word	0xf0ffffff
 8003504:	40000400 	.word	0x40000400
 8003508:	fffffcff 	.word	0xfffffcff
 800350c:	e000e100 	.word	0xe000e100

08003510 <convert_time>:

void convert_time(struct time * t, float additional_time){
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
	int seconds = (int) additional_time/1000;
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	f7fd fc72 	bl	8000e04 <__aeabi_f2iz>
 8003520:	0002      	movs	r2, r0
 8003522:	23fa      	movs	r3, #250	; 0xfa
 8003524:	0099      	lsls	r1, r3, #2
 8003526:	0010      	movs	r0, r2
 8003528:	f7fc fe78 	bl	800021c <__divsi3>
 800352c:	0003      	movs	r3, r0
 800352e:	60fb      	str	r3, [r7, #12]
	t->minute = t->minute + seconds/60;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685c      	ldr	r4, [r3, #4]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	213c      	movs	r1, #60	; 0x3c
 8003538:	0018      	movs	r0, r3
 800353a:	f7fc fe6f 	bl	800021c <__divsi3>
 800353e:	0003      	movs	r3, r0
 8003540:	18e2      	adds	r2, r4, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	605a      	str	r2, [r3, #4]
	if (t->minute >= 60){
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b3b      	cmp	r3, #59	; 0x3b
 800354c:	dd0e      	ble.n	800356c <convert_time+0x5c>
		t->minute = t->minute % 60;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	213c      	movs	r1, #60	; 0x3c
 8003554:	0018      	movs	r0, r3
 8003556:	f7fc ff47 	bl	80003e8 <__aeabi_idivmod>
 800355a:	000b      	movs	r3, r1
 800355c:	001a      	movs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	605a      	str	r2, [r3, #4]
		t->hour = t->hour + 1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]
	}

}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b005      	add	sp, #20
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <check_time>:

int check_time(struct time time_cur, struct time comp_time){
 8003574:	b5b0      	push	{r4, r5, r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	2508      	movs	r5, #8
 800357c:	197c      	adds	r4, r7, r5
 800357e:	6020      	str	r0, [r4, #0]
 8003580:	6061      	str	r1, [r4, #4]
 8003582:	0039      	movs	r1, r7
 8003584:	600a      	str	r2, [r1, #0]
 8003586:	604b      	str	r3, [r1, #4]
	if (time_cur.hour >= comp_time.hour){
 8003588:	197b      	adds	r3, r7, r5
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	003b      	movs	r3, r7
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	db19      	blt.n	80035c8 <check_time+0x54>
		if (time_cur.hour == comp_time.hour){
 8003594:	2308      	movs	r3, #8
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	003b      	movs	r3, r7
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d112      	bne.n	80035c8 <check_time+0x54>
			if (time_cur.minute >= comp_time.minute){
 80035a2:	2308      	movs	r3, #8
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	003b      	movs	r3, r7
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	db0b      	blt.n	80035c8 <check_time+0x54>
				if (time_cur.minute - comp_time.minute > 3){
 80035b0:	2308      	movs	r3, #8
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	003b      	movs	r3, r7
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b03      	cmp	r3, #3
 80035be:	dd01      	ble.n	80035c4 <check_time+0x50>
					return 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e002      	b.n	80035ca <check_time+0x56>
				}
				return 1;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <check_time+0x56>
			}
		}
	}
	return 0;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	0018      	movs	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b004      	add	sp, #16
 80035d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080035d4 <OpenBlinds>:


void OpenBlinds(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
	  while(TIM2->CCR3 < 100)
 80035d8:	e00a      	b.n	80035f0 <OpenBlinds+0x1c>
	  {
		  delay(3);
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <OpenBlinds+0x2c>)
 80035dc:	1c18      	adds	r0, r3, #0
 80035de:	f7ff fd15 	bl	800300c <delay>
		  TIM2->CCR3 += 10;
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	05db      	lsls	r3, r3, #23
 80035e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	320a      	adds	r2, #10
 80035ee:	63da      	str	r2, [r3, #60]	; 0x3c
	  while(TIM2->CCR3 < 100)
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	05db      	lsls	r3, r3, #23
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b63      	cmp	r3, #99	; 0x63
 80035f8:	d9ef      	bls.n	80035da <OpenBlinds+0x6>
	  }
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40400000 	.word	0x40400000

08003604 <CloseBlinds>:

void CloseBlinds(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	  while(TIM2->CCR3 > 0)
 8003608:	e00a      	b.n	8003620 <CloseBlinds+0x1c>
	  {
		  delay(3);
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <CloseBlinds+0x2c>)
 800360c:	1c18      	adds	r0, r3, #0
 800360e:	f7ff fcfd 	bl	800300c <delay>
		  TIM2->CCR3 -= 10;
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	05db      	lsls	r3, r3, #23
 8003616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	05db      	lsls	r3, r3, #23
 800361c:	3a0a      	subs	r2, #10
 800361e:	63da      	str	r2, [r3, #60]	; 0x3c
	  while(TIM2->CCR3 > 0)
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	05db      	lsls	r3, r3, #23
 8003624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1ef      	bne.n	800360a <CloseBlinds+0x6>
	  }
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40400000 	.word	0x40400000

08003634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003634:	b5b0      	push	{r4, r5, r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	current_state = START;
 800363a:	4bce      	ldr	r3, [pc, #824]	; (8003974 <main+0x340>)
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
	message_index = 0;
 8003640:	4bcd      	ldr	r3, [pc, #820]	; (8003978 <main+0x344>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
	receive_flag = 0;
 8003646:	4bcd      	ldr	r3, [pc, #820]	; (800397c <main+0x348>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
	message_len = 0;
 800364c:	4bcc      	ldr	r3, [pc, #816]	; (8003980 <main+0x34c>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
	configured_flag = 0;
 8003652:	4bcc      	ldr	r3, [pc, #816]	; (8003984 <main+0x350>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
	curr_bat = -1;
 8003658:	4bcb      	ldr	r3, [pc, #812]	; (8003988 <main+0x354>)
 800365a:	2201      	movs	r2, #1
 800365c:	4252      	negs	r2, r2
 800365e:	601a      	str	r2, [r3, #0]
	curr_pos = -1;
 8003660:	4bca      	ldr	r3, [pc, #808]	; (800398c <main+0x358>)
 8003662:	2201      	movs	r2, #1
 8003664:	4252      	negs	r2, r2
 8003666:	601a      	str	r2, [r3, #0]
	curr_temp = -1;
 8003668:	4bc9      	ldr	r3, [pc, #804]	; (8003990 <main+0x35c>)
 800366a:	2201      	movs	r2, #1
 800366c:	4252      	negs	r2, r2
 800366e:	601a      	str	r2, [r3, #0]
	Bright_Outside = -1;
 8003670:	4bc8      	ldr	r3, [pc, #800]	; (8003994 <main+0x360>)
 8003672:	2201      	movs	r2, #1
 8003674:	4252      	negs	r2, r2
 8003676:	601a      	str	r2, [r3, #0]
	time_cur.hour = -1;
 8003678:	4bc7      	ldr	r3, [pc, #796]	; (8003998 <main+0x364>)
 800367a:	2201      	movs	r2, #1
 800367c:	4252      	negs	r2, r2
 800367e:	601a      	str	r2, [r3, #0]
	time_cur.minute = -1;
 8003680:	4bc5      	ldr	r3, [pc, #788]	; (8003998 <main+0x364>)
 8003682:	2201      	movs	r2, #1
 8003684:	4252      	negs	r2, r2
 8003686:	605a      	str	r2, [r3, #4]
	close_time.hour = -1;
 8003688:	4bc4      	ldr	r3, [pc, #784]	; (800399c <main+0x368>)
 800368a:	2201      	movs	r2, #1
 800368c:	4252      	negs	r2, r2
 800368e:	601a      	str	r2, [r3, #0]
	close_time.minute = -1;
 8003690:	4bc2      	ldr	r3, [pc, #776]	; (800399c <main+0x368>)
 8003692:	2201      	movs	r2, #1
 8003694:	4252      	negs	r2, r2
 8003696:	605a      	str	r2, [r3, #4]
	open_time.hour = -1;
 8003698:	4bc1      	ldr	r3, [pc, #772]	; (80039a0 <main+0x36c>)
 800369a:	2201      	movs	r2, #1
 800369c:	4252      	negs	r2, r2
 800369e:	601a      	str	r2, [r3, #0]
	open_time.minute = -1;
 80036a0:	4bbf      	ldr	r3, [pc, #764]	; (80039a0 <main+0x36c>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	4252      	negs	r2, r2
 80036a6:	605a      	str	r2, [r3, #4]
	bright_flag = -1;
 80036a8:	4bbe      	ldr	r3, [pc, #760]	; (80039a4 <main+0x370>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	4252      	negs	r2, r2
 80036ae:	601a      	str	r2, [r3, #0]
	dark_flag = -1;
 80036b0:	4bbd      	ldr	r3, [pc, #756]	; (80039a8 <main+0x374>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	4252      	negs	r2, r2
 80036b6:	601a      	str	r2, [r3, #0]
	done_config = 0;
 80036b8:	4bbc      	ldr	r3, [pc, #752]	; (80039ac <main+0x378>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
	close_temp = -1;
 80036be:	4bbc      	ldr	r3, [pc, #752]	; (80039b0 <main+0x37c>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	4252      	negs	r2, r2
 80036c4:	601a      	str	r2, [r3, #0]
	open_temp = -1;
 80036c6:	4bbb      	ldr	r3, [pc, #748]	; (80039b4 <main+0x380>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	4252      	negs	r2, r2
 80036cc:	601a      	str	r2, [r3, #0]
	time_flag = 1;
 80036ce:	4bba      	ldr	r3, [pc, #744]	; (80039b8 <main+0x384>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036d4:	f000 ffd4 	bl	8004680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036d8:	f000 fc94 	bl	8004004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036dc:	f000 fd24 	bl	8004128 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80036e0:	f000 fcf2 	bl	80040c8 <MX_USART1_UART_Init>
  Button_UpDown_Init();
 80036e4:	f7ff fe32 	bl	800334c <Button_UpDown_Init>
  Button_OpenClose_Init();
 80036e8:	f7ff fd76 	bl	80031d8 <Button_OpenClose_Init>
  Motor_Init();
 80036ec:	f7ff fb82 	bl	8002df4 <Motor_Init>
  ADC_Init();
 80036f0:	f7ff fa0a 	bl	8002b08 <ADC_Init>
  TIM2->CCR3 = 50;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	2232      	movs	r2, #50	; 0x32
 80036fa:	63da      	str	r2, [r3, #60]	; 0x3c

  //If you want to reset ESP8266
  //esp8266_reset(&huart1);


  if (esp8266_check_wifi_connection(&huart1)){
 80036fc:	4baf      	ldr	r3, [pc, #700]	; (80039bc <main+0x388>)
 80036fe:	0018      	movs	r0, r3
 8003700:	f7ff f91e 	bl	8002940 <esp8266_check_wifi_connection>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d01c      	beq.n	8003742 <main+0x10e>
	  if (esp8266_setupTCP(&huart1)){
 8003708:	4bac      	ldr	r3, [pc, #688]	; (80039bc <main+0x388>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fe feaa 	bl	8002464 <esp8266_setupTCP>
 8003710:	1e03      	subs	r3, r0, #0
 8003712:	d006      	beq.n	8003722 <main+0xee>
		  current_state = IDLE;
 8003714:	4b97      	ldr	r3, [pc, #604]	; (8003974 <main+0x340>)
 8003716:	2201      	movs	r2, #1
 8003718:	701a      	strb	r2, [r3, #0]
		  done_config = 1;
 800371a:	4ba4      	ldr	r3, [pc, #656]	; (80039ac <main+0x378>)
 800371c:	2201      	movs	r2, #1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	e002      	b.n	8003728 <main+0xf4>
	  }else{
		  current_state = ERROR_STATE;
 8003722:	4b94      	ldr	r3, [pc, #592]	; (8003974 <main+0x340>)
 8003724:	2204      	movs	r2, #4
 8003726:	701a      	strb	r2, [r3, #0]
	  }
	  configured_flag = 1;
 8003728:	4b96      	ldr	r3, [pc, #600]	; (8003984 <main+0x350>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]
	  milli = HAL_GetTick();
 800372e:	f001 f801 	bl	8004734 <HAL_GetTick>
 8003732:	0003      	movs	r3, r0
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd fbcf 	bl	8000ed8 <__aeabi_ui2f>
 800373a:	1c02      	adds	r2, r0, #0
 800373c:	4ba0      	ldr	r3, [pc, #640]	; (80039c0 <main+0x38c>)
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e003      	b.n	800374a <main+0x116>
  }
  else{
	  esp8266_reset(&huart1);
 8003742:	4b9e      	ldr	r3, [pc, #632]	; (80039bc <main+0x388>)
 8003744:	0018      	movs	r0, r3
 8003746:	f7fe fd8b 	bl	8002260 <esp8266_reset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM2->CCR1 = 0;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	05db      	lsls	r3, r3, #23
 800374e:	2200      	movs	r2, #0
 8003750:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = 0;
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	2200      	movs	r2, #0
 8003758:	639a      	str	r2, [r3, #56]	; 0x38

	  //Initiate system
	  while (current_state == START){
 800375a:	e012      	b.n	8003782 <main+0x14e>
		  if (esp8266_init(&huart1)){
 800375c:	4b97      	ldr	r3, [pc, #604]	; (80039bc <main+0x388>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fe fda0 	bl	80022a4 <esp8266_init>
 8003764:	1e03      	subs	r3, r0, #0
 8003766:	d009      	beq.n	800377c <main+0x148>
			  if (esp8266_setupTCP(&huart1)){
 8003768:	4b94      	ldr	r3, [pc, #592]	; (80039bc <main+0x388>)
 800376a:	0018      	movs	r0, r3
 800376c:	f7fe fe7a 	bl	8002464 <esp8266_setupTCP>
 8003770:	1e03      	subs	r3, r0, #0
 8003772:	d003      	beq.n	800377c <main+0x148>
				  current_state = IDLE;
 8003774:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <main+0x340>)
 8003776:	2201      	movs	r2, #1
 8003778:	701a      	strb	r2, [r3, #0]
				  break;
 800377a:	e006      	b.n	800378a <main+0x156>
			  }
		  }
		  current_state = ERROR_STATE;
 800377c:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <main+0x340>)
 800377e:	2204      	movs	r2, #4
 8003780:	701a      	strb	r2, [r3, #0]
	  while (current_state == START){
 8003782:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <main+0x340>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0e8      	beq.n	800375c <main+0x128>
	  }

	  //State where the system does nothing
	  while(current_state == IDLE){
 800378a:	e0ec      	b.n	8003966 <main+0x332>
		  HAL_UART_Receive_IT(&huart1, &message[message_index], 1);
 800378c:	4b7a      	ldr	r3, [pc, #488]	; (8003978 <main+0x344>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b8c      	ldr	r3, [pc, #560]	; (80039c4 <main+0x390>)
 8003792:	18d1      	adds	r1, r2, r3
 8003794:	4b89      	ldr	r3, [pc, #548]	; (80039bc <main+0x388>)
 8003796:	2201      	movs	r2, #1
 8003798:	0018      	movs	r0, r3
 800379a:	f002 fa0b 	bl	8005bb4 <HAL_UART_Receive_IT>
		  curr_milli = HAL_GetTick();
 800379e:	f000 ffc9 	bl	8004734 <HAL_GetTick>
 80037a2:	0003      	movs	r3, r0
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7fd fb97 	bl	8000ed8 <__aeabi_ui2f>
 80037aa:	1c02      	adds	r2, r0, #0
 80037ac:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <main+0x394>)
 80037ae:	601a      	str	r2, [r3, #0]

		  if (receive_flag == 1){
 80037b0:	4b72      	ldr	r3, [pc, #456]	; (800397c <main+0x348>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <main+0x192>
			  current_state = RECEIVE;
 80037b8:	4b6e      	ldr	r3, [pc, #440]	; (8003974 <main+0x340>)
 80037ba:	2202      	movs	r2, #2
 80037bc:	701a      	strb	r2, [r3, #0]
			  receive_flag = 0;
 80037be:	4b6f      	ldr	r3, [pc, #444]	; (800397c <main+0x348>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e0cf      	b.n	8003966 <main+0x332>
		  }
		  else if (done_config){
 80037c6:	4b79      	ldr	r3, [pc, #484]	; (80039ac <main+0x378>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <main+0x19c>
 80037ce:	e0ca      	b.n	8003966 <main+0x332>
			  //more than a minute has passed
			  if (curr_milli - milli > 60000){
 80037d0:	4b7d      	ldr	r3, [pc, #500]	; (80039c8 <main+0x394>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b7a      	ldr	r3, [pc, #488]	; (80039c0 <main+0x38c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	1c19      	adds	r1, r3, #0
 80037da:	1c10      	adds	r0, r2, #0
 80037dc:	f7fd f94e 	bl	8000a7c <__aeabi_fsub>
 80037e0:	1c03      	adds	r3, r0, #0
 80037e2:	497a      	ldr	r1, [pc, #488]	; (80039cc <main+0x398>)
 80037e4:	1c18      	adds	r0, r3, #0
 80037e6:	f7fc fe2b 	bl	8000440 <__aeabi_fcmpgt>
 80037ea:	1e03      	subs	r3, r0, #0
 80037ec:	d100      	bne.n	80037f0 <main+0x1bc>
 80037ee:	e0ba      	b.n	8003966 <main+0x332>
				  //Update current time
				  if (time_cur.hour != -1){
 80037f0:	4b69      	ldr	r3, [pc, #420]	; (8003998 <main+0x364>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	d00e      	beq.n	8003816 <main+0x1e2>
					  convert_time(&time_cur, curr_milli - milli);
 80037f8:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <main+0x394>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b70      	ldr	r3, [pc, #448]	; (80039c0 <main+0x38c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1c19      	adds	r1, r3, #0
 8003802:	1c10      	adds	r0, r2, #0
 8003804:	f7fd f93a 	bl	8000a7c <__aeabi_fsub>
 8003808:	1c03      	adds	r3, r0, #0
 800380a:	1c1a      	adds	r2, r3, #0
 800380c:	4b62      	ldr	r3, [pc, #392]	; (8003998 <main+0x364>)
 800380e:	1c11      	adds	r1, r2, #0
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff fe7d 	bl	8003510 <convert_time>
				  }
				  //Check if it is bright outside
				  Bright_Outside = Get_Luminosity(ADC_Read(4));
 8003816:	2004      	movs	r0, #4
 8003818:	f7ff f9cc 	bl	8002bb4 <ADC_Read>
 800381c:	0003      	movs	r3, r0
 800381e:	0018      	movs	r0, r3
 8003820:	f7ff f9f6 	bl	8002c10 <Get_Luminosity>
 8003824:	0002      	movs	r2, r0
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <main+0x360>)
 8003828:	601a      	str	r2, [r3, #0]
				  //Get current temperature
				  curr_temp = Convert_Fahrenheit(Get_Temperature(ADC_Read(10)));
 800382a:	200a      	movs	r0, #10
 800382c:	f7ff f9c2 	bl	8002bb4 <ADC_Read>
 8003830:	0003      	movs	r3, r0
 8003832:	0018      	movs	r0, r3
 8003834:	f7ff fa8a 	bl	8002d4c <Get_Temperature>
 8003838:	1c03      	adds	r3, r0, #0
 800383a:	1c18      	adds	r0, r3, #0
 800383c:	f7ff fa56 	bl	8002cec <Convert_Fahrenheit>
 8003840:	0002      	movs	r2, r0
 8003842:	4b53      	ldr	r3, [pc, #332]	; (8003990 <main+0x35c>)
 8003844:	601a      	str	r2, [r3, #0]

				  //Automatic Slat and Slat open Configurations
				  //Time is highest priority
				  time_flag = 0;
 8003846:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <main+0x384>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
				  if (open_time.hour != -1 && close_time.hour != -1){
 800384c:	4b54      	ldr	r3, [pc, #336]	; (80039a0 <main+0x36c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3301      	adds	r3, #1
 8003852:	d02c      	beq.n	80038ae <main+0x27a>
 8003854:	4b51      	ldr	r3, [pc, #324]	; (800399c <main+0x368>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	3301      	adds	r3, #1
 800385a:	d028      	beq.n	80038ae <main+0x27a>
					  if (!check_time(time_cur, close_time) && check_time(time_cur, open_time)){
 800385c:	4b4f      	ldr	r3, [pc, #316]	; (800399c <main+0x368>)
 800385e:	494e      	ldr	r1, [pc, #312]	; (8003998 <main+0x364>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	6808      	ldr	r0, [r1, #0]
 8003866:	6849      	ldr	r1, [r1, #4]
 8003868:	f7ff fe84 	bl	8003574 <check_time>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d10f      	bne.n	8003890 <main+0x25c>
 8003870:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <main+0x36c>)
 8003872:	4949      	ldr	r1, [pc, #292]	; (8003998 <main+0x364>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	6808      	ldr	r0, [r1, #0]
 800387a:	6849      	ldr	r1, [r1, #4]
 800387c:	f7ff fe7a 	bl	8003574 <check_time>
 8003880:	1e03      	subs	r3, r0, #0
 8003882:	d005      	beq.n	8003890 <main+0x25c>
						  //Open Blinds
 						  OpenBlinds();
 8003884:	f7ff fea6 	bl	80035d4 <OpenBlinds>
 						  time_flag = 1;
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <main+0x384>)
 800388a:	2201      	movs	r2, #1
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e00e      	b.n	80038ae <main+0x27a>
					  }
					  else if (check_time(time_cur, close_time)){
 8003890:	4b42      	ldr	r3, [pc, #264]	; (800399c <main+0x368>)
 8003892:	4941      	ldr	r1, [pc, #260]	; (8003998 <main+0x364>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6808      	ldr	r0, [r1, #0]
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	f7ff fe6a 	bl	8003574 <check_time>
 80038a0:	1e03      	subs	r3, r0, #0
 80038a2:	d004      	beq.n	80038ae <main+0x27a>
						  //Close Blinds
						  CloseBlinds();
 80038a4:	f7ff feae 	bl	8003604 <CloseBlinds>
						  time_flag = 1;
 80038a8:	4b43      	ldr	r3, [pc, #268]	; (80039b8 <main+0x384>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
					  }
				  }
				  if (bright_flag != -1 && dark_flag != -1 && time_flag == 0){
 80038ae:	4b3d      	ldr	r3, [pc, #244]	; (80039a4 <main+0x370>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	d04e      	beq.n	8003954 <main+0x320>
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <main+0x374>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	d04a      	beq.n	8003954 <main+0x320>
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <main+0x384>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d146      	bne.n	8003954 <main+0x320>
					  if (Bright_Outside && close_temp != -1 && open_temp != -1){
 80038c6:	4b33      	ldr	r3, [pc, #204]	; (8003994 <main+0x360>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d018      	beq.n	8003900 <main+0x2cc>
 80038ce:	4b38      	ldr	r3, [pc, #224]	; (80039b0 <main+0x37c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3301      	adds	r3, #1
 80038d4:	d014      	beq.n	8003900 <main+0x2cc>
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <main+0x380>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	d010      	beq.n	8003900 <main+0x2cc>
						  if (curr_temp >= open_temp){
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <main+0x35c>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <main+0x380>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	db01      	blt.n	80038ee <main+0x2ba>
							  //If it is warmer than opening temperature
							  //and if it is bright outside
							  OpenBlinds();
 80038ea:	f7ff fe73 	bl	80035d4 <OpenBlinds>
						  }
						  if (curr_temp >= close_temp){
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <main+0x35c>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4b2f      	ldr	r3, [pc, #188]	; (80039b0 <main+0x37c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	db2c      	blt.n	8003954 <main+0x320>
							  //If is hotter than closing temperature
							  //and if it is bright outside
							  CloseBlinds();
 80038fa:	f7ff fe83 	bl	8003604 <CloseBlinds>
						  if (curr_temp >= close_temp){
 80038fe:	e029      	b.n	8003954 <main+0x320>
						  }
					  }
					  else {
						  if (bright_flag && Bright_Outside){
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <main+0x370>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <main+0x2e2>
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <main+0x360>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <main+0x2e2>
							  //If BRIGHT outside...
							  //User configures it to OPEN when it is BRIGHT
							  OpenBlinds();
 8003910:	f7ff fe60 	bl	80035d4 <OpenBlinds>
 8003914:	e009      	b.n	800392a <main+0x2f6>
						  }
						  else if (!bright_flag && Bright_Outside){
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <main+0x370>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <main+0x2f6>
 800391e:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <main+0x360>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <main+0x2f6>
							  //If BRIGHT outside...
							  //User configures it to CLOSE when it is BRIGHT
							  CloseBlinds();
 8003926:	f7ff fe6d 	bl	8003604 <CloseBlinds>
						  }
						  if (dark_flag && !Bright_Outside){
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <main+0x374>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <main+0x30c>
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <main+0x360>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d102      	bne.n	8003940 <main+0x30c>
							  //If it DARK outside...
							  //User configures it to OPEN when it is DARK
							  OpenBlinds();
 800393a:	f7ff fe4b 	bl	80035d4 <OpenBlinds>
 800393e:	e009      	b.n	8003954 <main+0x320>
						  }
						  else if (!dark_flag && !Bright_Outside){
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <main+0x374>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <main+0x320>
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <main+0x360>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <main+0x320>
							  //If it is DARK outside...
							  //User configures it to CLOSE when it is DARK
							  CloseBlinds();
 8003950:	f7ff fe58 	bl	8003604 <CloseBlinds>
						  }
					  }
				  }
				  milli = HAL_GetTick();
 8003954:	f000 feee 	bl	8004734 <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	0018      	movs	r0, r3
 800395c:	f7fd fabc 	bl	8000ed8 <__aeabi_ui2f>
 8003960:	1c02      	adds	r2, r0, #0
 8003962:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <main+0x38c>)
 8003964:	601a      	str	r2, [r3, #0]
	  while(current_state == IDLE){
 8003966:	4b03      	ldr	r3, [pc, #12]	; (8003974 <main+0x340>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d100      	bne.n	8003970 <main+0x33c>
 800396e:	e70d      	b.n	800378c <main+0x158>
			  }
		  }
	  }

	  //State where the system connects to WiFi
	  while(current_state == CONNECT_WIFI){
 8003970:	e05b      	b.n	8003a2a <main+0x3f6>
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	200002dc 	.word	0x200002dc
 8003978:	200003b0 	.word	0x200003b0
 800397c:	200002c8 	.word	0x200002c8
 8003980:	200002e4 	.word	0x200002e4
 8003984:	200003a4 	.word	0x200003a4
 8003988:	200002d0 	.word	0x200002d0
 800398c:	200002d4 	.word	0x200002d4
 8003990:	200003a0 	.word	0x200003a0
 8003994:	200003cc 	.word	0x200003cc
 8003998:	200003bc 	.word	0x200003bc
 800399c:	200003c4 	.word	0x200003c4
 80039a0:	200003b4 	.word	0x200003b4
 80039a4:	200002e0 	.word	0x200002e0
 80039a8:	200003d0 	.word	0x200003d0
 80039ac:	200002d8 	.word	0x200002d8
 80039b0:	200002cc 	.word	0x200002cc
 80039b4:	200003ac 	.word	0x200003ac
 80039b8:	2000031c 	.word	0x2000031c
 80039bc:	20000320 	.word	0x20000320
 80039c0:	200002c4 	.word	0x200002c4
 80039c4:	200002e8 	.word	0x200002e8
 80039c8:	200002c0 	.word	0x200002c0
 80039cc:	476a6000 	.word	0x476a6000
		  HAL_UART_AbortReceive_IT(&huart1);
 80039d0:	4bcf      	ldr	r3, [pc, #828]	; (8003d10 <main+0x6dc>)
 80039d2:	0018      	movs	r0, r3
 80039d4:	f002 f9ec 	bl	8005db0 <HAL_UART_AbortReceive_IT>
		  if (esp8266_sendmsg(&huart1, "OK\r\n", 4)){
 80039d8:	49ce      	ldr	r1, [pc, #824]	; (8003d14 <main+0x6e0>)
 80039da:	4bcd      	ldr	r3, [pc, #820]	; (8003d10 <main+0x6dc>)
 80039dc:	2204      	movs	r2, #4
 80039de:	0018      	movs	r0, r3
 80039e0:	f7fe ff0c 	bl	80027fc <esp8266_sendmsg>
 80039e4:	1e03      	subs	r3, r0, #0
 80039e6:	d01d      	beq.n	8003a24 <main+0x3f0>
			  if (esp8266_connectWifi(&huart1, wifi_name, wifi_password)){
 80039e8:	4acb      	ldr	r2, [pc, #812]	; (8003d18 <main+0x6e4>)
 80039ea:	49cc      	ldr	r1, [pc, #816]	; (8003d1c <main+0x6e8>)
 80039ec:	4bc8      	ldr	r3, [pc, #800]	; (8003d10 <main+0x6dc>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fe fe32 	bl	8002658 <esp8266_connectWifi>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d015      	beq.n	8003a24 <main+0x3f0>
				  if (esp8266_setupTCP(&huart1)){
 80039f8:	4bc5      	ldr	r3, [pc, #788]	; (8003d10 <main+0x6dc>)
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7fe fd32 	bl	8002464 <esp8266_setupTCP>
 8003a00:	1e03      	subs	r3, r0, #0
 8003a02:	d00f      	beq.n	8003a24 <main+0x3f0>
					  current_state = IDLE;
 8003a04:	4bc6      	ldr	r3, [pc, #792]	; (8003d20 <main+0x6ec>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
					  done_config = 1;
 8003a0a:	4bc6      	ldr	r3, [pc, #792]	; (8003d24 <main+0x6f0>)
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
					  milli = HAL_GetTick();
 8003a10:	f000 fe90 	bl	8004734 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7fd fa5e 	bl	8000ed8 <__aeabi_ui2f>
 8003a1c:	1c02      	adds	r2, r0, #0
 8003a1e:	4bc2      	ldr	r3, [pc, #776]	; (8003d28 <main+0x6f4>)
 8003a20:	601a      	str	r2, [r3, #0]
					  break;
 8003a22:	e006      	b.n	8003a32 <main+0x3fe>
				  }
			  }
		  }
		  current_state = ERROR_STATE;
 8003a24:	4bbe      	ldr	r3, [pc, #760]	; (8003d20 <main+0x6ec>)
 8003a26:	2204      	movs	r2, #4
 8003a28:	701a      	strb	r2, [r3, #0]
	  while(current_state == CONNECT_WIFI){
 8003a2a:	4bbd      	ldr	r3, [pc, #756]	; (8003d20 <main+0x6ec>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d0ce      	beq.n	80039d0 <main+0x39c>
	  }

	 //This is the state where you get luminosity, battery and temperature data
	 while (current_state == GET_CUR_DATA){
 8003a32:	e038      	b.n	8003aa6 <main+0x472>
		 char message[25] ="REF";
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	4abd      	ldr	r2, [pc, #756]	; (8003d2c <main+0x6f8>)
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2215      	movs	r2, #21
 8003a3e:	2100      	movs	r1, #0
 8003a40:	0018      	movs	r0, r3
 8003a42:	f002 fff5 	bl	8006a30 <memset>

		 //Read all necessary data
		 curr_temp = Convert_Fahrenheit(Get_Temperature(ADC_Read(10)));
 8003a46:	200a      	movs	r0, #10
 8003a48:	f7ff f8b4 	bl	8002bb4 <ADC_Read>
 8003a4c:	0003      	movs	r3, r0
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff f97c 	bl	8002d4c <Get_Temperature>
 8003a54:	1c03      	adds	r3, r0, #0
 8003a56:	1c18      	adds	r0, r3, #0
 8003a58:	f7ff f948 	bl	8002cec <Convert_Fahrenheit>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	4bb4      	ldr	r3, [pc, #720]	; (8003d30 <main+0x6fc>)
 8003a60:	601a      	str	r2, [r3, #0]
		 curr_pos = TIM2->CCR3;
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	05db      	lsls	r3, r3, #23
 8003a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a68:	001a      	movs	r2, r3
 8003a6a:	4bb2      	ldr	r3, [pc, #712]	; (8003d34 <main+0x700>)
 8003a6c:	601a      	str	r2, [r3, #0]
		 curr_bat = Get_Battery_Percentage(ADC_Read(11));
 8003a6e:	200b      	movs	r0, #11
 8003a70:	f7ff f8a0 	bl	8002bb4 <ADC_Read>
 8003a74:	0003      	movs	r3, r0
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff f8f2 	bl	8002c60 <Get_Battery_Percentage>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	4bae      	ldr	r3, [pc, #696]	; (8003d38 <main+0x704>)
 8003a80:	601a      	str	r2, [r3, #0]

		 //Send data to android application
		 esp8266_send_current_data(&huart1, message, curr_temp, curr_bat, curr_pos, 3);
 8003a82:	4bab      	ldr	r3, [pc, #684]	; (8003d30 <main+0x6fc>)
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	4bac      	ldr	r3, [pc, #688]	; (8003d38 <main+0x704>)
 8003a88:	681d      	ldr	r5, [r3, #0]
 8003a8a:	4baa      	ldr	r3, [pc, #680]	; (8003d34 <main+0x700>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1d39      	adds	r1, r7, #4
 8003a90:	489f      	ldr	r0, [pc, #636]	; (8003d10 <main+0x6dc>)
 8003a92:	2203      	movs	r2, #3
 8003a94:	9201      	str	r2, [sp, #4]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	002b      	movs	r3, r5
 8003a9a:	0022      	movs	r2, r4
 8003a9c:	f7fe ff98 	bl	80029d0 <esp8266_send_current_data>

		 current_state = IDLE;
 8003aa0:	4b9f      	ldr	r3, [pc, #636]	; (8003d20 <main+0x6ec>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	701a      	strb	r2, [r3, #0]
	 while (current_state == GET_CUR_DATA){
 8003aa6:	4b9e      	ldr	r3, [pc, #632]	; (8003d20 <main+0x6ec>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d0c2      	beq.n	8003a34 <main+0x400>
	 }


	  //This is the state where manual control is performed
	 while (current_state == MANUAL){
 8003aae:	e087      	b.n	8003bc0 <main+0x58c>
		HAL_UART_Receive_IT(&huart1, (uint8_t*) manual_control, 15);
 8003ab0:	49a2      	ldr	r1, [pc, #648]	; (8003d3c <main+0x708>)
 8003ab2:	4b97      	ldr	r3, [pc, #604]	; (8003d10 <main+0x6dc>)
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f002 f87c 	bl	8005bb4 <HAL_UART_Receive_IT>

		if (manual_control_flag){
 8003abc:	4ba0      	ldr	r3, [pc, #640]	; (8003d40 <main+0x70c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d100      	bne.n	8003ac6 <main+0x492>
 8003ac4:	e079      	b.n	8003bba <main+0x586>
		  if (strstr(manual_control, (char*) "SP") != NULL){
 8003ac6:	4a9f      	ldr	r2, [pc, #636]	; (8003d44 <main+0x710>)
 8003ac8:	4b9c      	ldr	r3, [pc, #624]	; (8003d3c <main+0x708>)
 8003aca:	0011      	movs	r1, r2
 8003acc:	0018      	movs	r0, r3
 8003ace:	f002 ffc5 	bl	8006a5c <strstr>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d007      	beq.n	8003ae6 <main+0x4b2>
			  //TODO: Do necessary stuff to raise stop any manual action below
			  TIM2->CCR2 = 0;
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	05db      	lsls	r3, r3, #23
 8003ada:	2200      	movs	r2, #0
 8003adc:	639a      	str	r2, [r3, #56]	; 0x38
			  TIM2->CCR1 = 0;
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	05db      	lsls	r3, r3, #23
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

		  }
		  if (strstr(manual_control, (char*) "QT") != NULL){
 8003ae6:	4a98      	ldr	r2, [pc, #608]	; (8003d48 <main+0x714>)
 8003ae8:	4b94      	ldr	r3, [pc, #592]	; (8003d3c <main+0x708>)
 8003aea:	0011      	movs	r1, r2
 8003aec:	0018      	movs	r0, r3
 8003aee:	f002 ffb5 	bl	8006a5c <strstr>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d012      	beq.n	8003b1c <main+0x4e8>
			  //TODO: Do necessary stuff to quit out of manual control below
			  HAL_UART_AbortReceive_IT(&huart1);
 8003af6:	4b86      	ldr	r3, [pc, #536]	; (8003d10 <main+0x6dc>)
 8003af8:	0018      	movs	r0, r3
 8003afa:	f002 f959 	bl	8005db0 <HAL_UART_AbortReceive_IT>
			  if (esp8266_sendmsg(&huart1, "K\n", 2)){
 8003afe:	4993      	ldr	r1, [pc, #588]	; (8003d4c <main+0x718>)
 8003b00:	4b83      	ldr	r3, [pc, #524]	; (8003d10 <main+0x6dc>)
 8003b02:	2202      	movs	r2, #2
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fe fe79 	bl	80027fc <esp8266_sendmsg>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d006      	beq.n	8003b1c <main+0x4e8>
				  current_state = IDLE;
 8003b0e:	4b84      	ldr	r3, [pc, #528]	; (8003d20 <main+0x6ec>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
				  manual_control_flag = 0;
 8003b14:	4b8a      	ldr	r3, [pc, #552]	; (8003d40 <main+0x70c>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
				  break;
 8003b1a:	e056      	b.n	8003bca <main+0x596>
			  }
		  }
		  if (strstr(manual_control, (char*) "UP") != NULL){
 8003b1c:	4a8c      	ldr	r2, [pc, #560]	; (8003d50 <main+0x71c>)
 8003b1e:	4b87      	ldr	r3, [pc, #540]	; (8003d3c <main+0x708>)
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f002 ff9a 	bl	8006a5c <strstr>
 8003b28:	1e03      	subs	r3, r0, #0
 8003b2a:	d003      	beq.n	8003b34 <main+0x500>
			  //TODO: Do necessary stuff to raise the blinds up below
			  TIM2->CCR1 = 100;
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	05db      	lsls	r3, r3, #23
 8003b30:	2264      	movs	r2, #100	; 0x64
 8003b32:	635a      	str	r2, [r3, #52]	; 0x34
		  }
		  if (strstr(manual_control, (char*) "DN") != NULL){
 8003b34:	4a87      	ldr	r2, [pc, #540]	; (8003d54 <main+0x720>)
 8003b36:	4b81      	ldr	r3, [pc, #516]	; (8003d3c <main+0x708>)
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f002 ff8e 	bl	8006a5c <strstr>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d003      	beq.n	8003b4c <main+0x518>
			  //TODO: Do necessary stuff to lower the blinds down below
			  TIM2->CCR2 = 100;
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	05db      	lsls	r3, r3, #23
 8003b48:	2264      	movs	r2, #100	; 0x64
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

		  }
		  if (strstr(manual_control, (char*) "PU") != NULL){
 8003b4c:	4a82      	ldr	r2, [pc, #520]	; (8003d58 <main+0x724>)
 8003b4e:	4b7b      	ldr	r3, [pc, #492]	; (8003d3c <main+0x708>)
 8003b50:	0011      	movs	r1, r2
 8003b52:	0018      	movs	r0, r3
 8003b54:	f002 ff82 	bl	8006a5c <strstr>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d00f      	beq.n	8003b7c <main+0x548>
			  //TODO: Do necessary stuff to pitch up the blinds up below (controlling the slats)
			  delay(3);
 8003b5c:	4b7f      	ldr	r3, [pc, #508]	; (8003d5c <main+0x728>)
 8003b5e:	1c18      	adds	r0, r3, #0
 8003b60:	f7ff fa54 	bl	800300c <delay>
			  if(TIM2->CCR3 < 100)
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	05db      	lsls	r3, r3, #23
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	2b63      	cmp	r3, #99	; 0x63
 8003b6c:	d806      	bhi.n	8003b7c <main+0x548>
			  {
				  TIM2->CCR3 += 10;
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	05db      	lsls	r3, r3, #23
 8003b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	05db      	lsls	r3, r3, #23
 8003b78:	320a      	adds	r2, #10
 8003b7a:	63da      	str	r2, [r3, #60]	; 0x3c
			  }

		  }
		  if (strstr(manual_control, (char*) "CL") != NULL){
 8003b7c:	4a78      	ldr	r2, [pc, #480]	; (8003d60 <main+0x72c>)
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <main+0x708>)
 8003b80:	0011      	movs	r1, r2
 8003b82:	0018      	movs	r0, r3
 8003b84:	f002 ff6a 	bl	8006a5c <strstr>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d00f      	beq.n	8003bac <main+0x578>
			  //TODO: Do necessary stuff to pitch down the blinds down below (controlling the slats)
			  delay(3);
 8003b8c:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <main+0x728>)
 8003b8e:	1c18      	adds	r0, r3, #0
 8003b90:	f7ff fa3c 	bl	800300c <delay>
			  if(TIM2->CCR3 > 0)
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	05db      	lsls	r3, r3, #23
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d006      	beq.n	8003bac <main+0x578>
			  {
				  TIM2->CCR3 -= 10;
 8003b9e:	2380      	movs	r3, #128	; 0x80
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	05db      	lsls	r3, r3, #23
 8003ba8:	3a0a      	subs	r2, #10
 8003baa:	63da      	str	r2, [r3, #60]	; 0x3c
			  }

		  }
		  HAL_UART_AbortReceive_IT(&huart1);
 8003bac:	4b58      	ldr	r3, [pc, #352]	; (8003d10 <main+0x6dc>)
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f002 f8fe 	bl	8005db0 <HAL_UART_AbortReceive_IT>
		  manual_control_flag = 0;
 8003bb4:	4b62      	ldr	r3, [pc, #392]	; (8003d40 <main+0x70c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
		}

		current_state = MANUAL;
 8003bba:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <main+0x6ec>)
 8003bbc:	2206      	movs	r2, #6
 8003bbe:	701a      	strb	r2, [r3, #0]
	 while (current_state == MANUAL){
 8003bc0:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <main+0x6ec>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d100      	bne.n	8003bca <main+0x596>
 8003bc8:	e772      	b.n	8003ab0 <main+0x47c>
	 }

	 //State where the system goes when in error
	 while (current_state == ERROR_STATE){
 8003bca:	e02c      	b.n	8003c26 <main+0x5f2>
	 		  esp8266_reset(&huart1);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <main+0x6dc>)
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7fe fb46 	bl	8002260 <esp8266_reset>
	 		  if (esp8266_check_wifi_connection(&huart1)){
 8003bd4:	4b4e      	ldr	r3, [pc, #312]	; (8003d10 <main+0x6dc>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fe feb2 	bl	8002940 <esp8266_check_wifi_connection>
 8003bdc:	1e03      	subs	r3, r0, #0
 8003bde:	d01c      	beq.n	8003c1a <main+0x5e6>
	 			  if (esp8266_setupTCP(&huart1)){
 8003be0:	4b4b      	ldr	r3, [pc, #300]	; (8003d10 <main+0x6dc>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fe fc3e 	bl	8002464 <esp8266_setupTCP>
 8003be8:	1e03      	subs	r3, r0, #0
 8003bea:	d006      	beq.n	8003bfa <main+0x5c6>
	 				  current_state = IDLE;
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <main+0x6ec>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	701a      	strb	r2, [r3, #0]
	 				  done_config = 1;
 8003bf2:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <main+0x6f0>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	e002      	b.n	8003c00 <main+0x5cc>
	 			  }else{
	 				  current_state = ERROR_STATE;
 8003bfa:	4b49      	ldr	r3, [pc, #292]	; (8003d20 <main+0x6ec>)
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	701a      	strb	r2, [r3, #0]
	 			  }
	 			  configured_flag = 1;
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <main+0x730>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
	 			  milli = HAL_GetTick();
 8003c06:	f000 fd95 	bl	8004734 <HAL_GetTick>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f7fd f963 	bl	8000ed8 <__aeabi_ui2f>
 8003c12:	1c02      	adds	r2, r0, #0
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <main+0x6f4>)
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e005      	b.n	8003c26 <main+0x5f2>
	 		  }
	 		  else{
	 			  done_config = 0;
 8003c1a:	4b42      	ldr	r3, [pc, #264]	; (8003d24 <main+0x6f0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
	 			  current_state = START;
 8003c20:	4b3f      	ldr	r3, [pc, #252]	; (8003d20 <main+0x6ec>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	 while (current_state == ERROR_STATE){
 8003c26:	4b3e      	ldr	r3, [pc, #248]	; (8003d20 <main+0x6ec>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d0ce      	beq.n	8003bcc <main+0x598>
	 		  }
	 	 }

	  //State where the system is receiving message
	  while (current_state == RECEIVE){
 8003c2e:	e1a6      	b.n	8003f7e <main+0x94a>
		  HAL_UART_AbortReceive_IT(&huart1);
 8003c30:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <main+0x6dc>)
 8003c32:	0018      	movs	r0, r3
 8003c34:	f002 f8bc 	bl	8005db0 <HAL_UART_AbortReceive_IT>
		  if (HAL_UART_Receive(&huart1, &message[message_index], 1, 100) == HAL_OK){
 8003c38:	4b4b      	ldr	r3, [pc, #300]	; (8003d68 <main+0x734>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <main+0x738>)
 8003c3e:	18d1      	adds	r1, r2, r3
 8003c40:	4833      	ldr	r0, [pc, #204]	; (8003d10 <main+0x6dc>)
 8003c42:	2364      	movs	r3, #100	; 0x64
 8003c44:	2201      	movs	r2, #1
 8003c46:	f001 fedd 	bl	8005a04 <HAL_UART_Receive>
 8003c4a:	1e03      	subs	r3, r0, #0
 8003c4c:	d109      	bne.n	8003c62 <main+0x62e>
			  message_len++;
 8003c4e:	4b48      	ldr	r3, [pc, #288]	; (8003d70 <main+0x73c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <main+0x73c>)
 8003c56:	601a      	str	r2, [r3, #0]
			  message_index++;
 8003c58:	4b43      	ldr	r3, [pc, #268]	; (8003d68 <main+0x734>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <main+0x734>)
 8003c60:	601a      	str	r2, [r3, #0]
		  }
		  if (message[message_index-1] == '\n'){
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <main+0x734>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	4a40      	ldr	r2, [pc, #256]	; (8003d6c <main+0x738>)
 8003c6a:	5cd3      	ldrb	r3, [r2, r3]
 8003c6c:	2b0a      	cmp	r3, #10
 8003c6e:	d000      	beq.n	8003c72 <main+0x63e>
 8003c70:	e185      	b.n	8003f7e <main+0x94a>
			  current_state = IDLE;
 8003c72:	4b2b      	ldr	r3, [pc, #172]	; (8003d20 <main+0x6ec>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
			  manipulate_string((char *) message, message_len);
 8003c78:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <main+0x73c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <main+0x738>)
 8003c7e:	0011      	movs	r1, r2
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 fbe3 	bl	800444c <manipulate_string>

			  if (configured_flag == 0 && strstr((char*) message, (char *) "CONNECT") != NULL){
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <main+0x730>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <main+0x672>
 8003c8e:	4a39      	ldr	r2, [pc, #228]	; (8003d74 <main+0x740>)
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <main+0x738>)
 8003c92:	0011      	movs	r1, r2
 8003c94:	0018      	movs	r0, r3
 8003c96:	f002 fee1 	bl	8006a5c <strstr>
 8003c9a:	1e03      	subs	r3, r0, #0
 8003c9c:	d003      	beq.n	8003ca6 <main+0x672>
				  current_state = IDLE;
 8003c9e:	4b20      	ldr	r3, [pc, #128]	; (8003d20 <main+0x6ec>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
 8003ca4:	e159      	b.n	8003f5a <main+0x926>
			  }
			  else if(wifi_credential_search((char*) message, wifi_name, wifi_password, message_len)){
 8003ca6:	4b32      	ldr	r3, [pc, #200]	; (8003d70 <main+0x73c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <main+0x6e4>)
 8003cac:	491b      	ldr	r1, [pc, #108]	; (8003d1c <main+0x6e8>)
 8003cae:	482f      	ldr	r0, [pc, #188]	; (8003d6c <main+0x738>)
 8003cb0:	f000 fb3c 	bl	800432c <wifi_credential_search>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d003      	beq.n	8003cc0 <main+0x68c>
				  current_state = CONNECT_WIFI;
 8003cb8:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <main+0x6ec>)
 8003cba:	2203      	movs	r2, #3
 8003cbc:	701a      	strb	r2, [r3, #0]
 8003cbe:	e14c      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char*) message, (char *) "TEMP_CONFIG") != NULL){
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <main+0x744>)
 8003cc2:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <main+0x738>)
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f002 fec8 	bl	8006a5c <strstr>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d006      	beq.n	8003cde <main+0x6aa>
				  //Acknowledge the message
				  esp8266_sendmsg(&huart1, "K\n", 2);
 8003cd0:	491e      	ldr	r1, [pc, #120]	; (8003d4c <main+0x718>)
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <main+0x6dc>)
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fe fd90 	bl	80027fc <esp8266_sendmsg>
 8003cdc:	e13d      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "TEMP_CLOSE") != NULL){
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <main+0x748>)
 8003ce0:	4b22      	ldr	r3, [pc, #136]	; (8003d6c <main+0x738>)
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f002 feb9 	bl	8006a5c <strstr>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d04c      	beq.n	8003d88 <main+0x754>
				  //Get integer value of closing temperature from message
				  close_temp = get_temperature((char *) message, message_len);
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <main+0x73c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <main+0x738>)
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 fbc6 	bl	8004488 <get_temperature>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <main+0x74c>)
 8003d00:	601a      	str	r2, [r3, #0]
				  esp8266_sendmsg(&huart1, "CLOSE_OK\n", 9);
 8003d02:	4920      	ldr	r1, [pc, #128]	; (8003d84 <main+0x750>)
 8003d04:	4b02      	ldr	r3, [pc, #8]	; (8003d10 <main+0x6dc>)
 8003d06:	2209      	movs	r2, #9
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fe fd77 	bl	80027fc <esp8266_sendmsg>
 8003d0e:	e124      	b.n	8003f5a <main+0x926>
 8003d10:	20000320 	.word	0x20000320
 8003d14:	08006e3c 	.word	0x08006e3c
 8003d18:	2000022c 	.word	0x2000022c
 8003d1c:	200001f8 	.word	0x200001f8
 8003d20:	200002dc 	.word	0x200002dc
 8003d24:	200002d8 	.word	0x200002d8
 8003d28:	200002c4 	.word	0x200002c4
 8003d2c:	00464552 	.word	0x00464552
 8003d30:	200003a0 	.word	0x200003a0
 8003d34:	200002d4 	.word	0x200002d4
 8003d38:	200002d0 	.word	0x200002d0
 8003d3c:	20000278 	.word	0x20000278
 8003d40:	20000288 	.word	0x20000288
 8003d44:	08006e44 	.word	0x08006e44
 8003d48:	08006e48 	.word	0x08006e48
 8003d4c:	08006e4c 	.word	0x08006e4c
 8003d50:	08006e50 	.word	0x08006e50
 8003d54:	08006e54 	.word	0x08006e54
 8003d58:	08006e58 	.word	0x08006e58
 8003d5c:	40400000 	.word	0x40400000
 8003d60:	08006e5c 	.word	0x08006e5c
 8003d64:	200003a4 	.word	0x200003a4
 8003d68:	200003b0 	.word	0x200003b0
 8003d6c:	200002e8 	.word	0x200002e8
 8003d70:	200002e4 	.word	0x200002e4
 8003d74:	08006e60 	.word	0x08006e60
 8003d78:	08006e68 	.word	0x08006e68
 8003d7c:	08006e74 	.word	0x08006e74
 8003d80:	200002cc 	.word	0x200002cc
 8003d84:	08006e80 	.word	0x08006e80
			  }
			  else if (strstr((char *) message, (char *) "TEMP_OPEN") != NULL){
 8003d88:	4a80      	ldr	r2, [pc, #512]	; (8003f8c <main+0x958>)
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <main+0x95c>)
 8003d8c:	0011      	movs	r1, r2
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f002 fe64 	bl	8006a5c <strstr>
 8003d94:	1e03      	subs	r3, r0, #0
 8003d96:	d010      	beq.n	8003dba <main+0x786>
				  //Get integer value of opening temperature from message
				  open_temp = get_temperature((char *) message, message_len);
 8003d98:	4b7e      	ldr	r3, [pc, #504]	; (8003f94 <main+0x960>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b7c      	ldr	r3, [pc, #496]	; (8003f90 <main+0x95c>)
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 fb71 	bl	8004488 <get_temperature>
 8003da6:	0002      	movs	r2, r0
 8003da8:	4b7b      	ldr	r3, [pc, #492]	; (8003f98 <main+0x964>)
 8003daa:	601a      	str	r2, [r3, #0]
				  esp8266_sendmsg(&huart1, "OPEN_OK\n", 9);
 8003dac:	497b      	ldr	r1, [pc, #492]	; (8003f9c <main+0x968>)
 8003dae:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <main+0x96c>)
 8003db0:	2209      	movs	r2, #9
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fe fd22 	bl	80027fc <esp8266_sendmsg>
 8003db8:	e0cf      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "LIGHT_CONFIG") != NULL){
 8003dba:	4a7a      	ldr	r2, [pc, #488]	; (8003fa4 <main+0x970>)
 8003dbc:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <main+0x95c>)
 8003dbe:	0011      	movs	r1, r2
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f002 fe4b 	bl	8006a5c <strstr>
 8003dc6:	1e03      	subs	r3, r0, #0
 8003dc8:	d006      	beq.n	8003dd8 <main+0x7a4>
				  //Acknowledge the message;
				  esp8266_sendmsg(&huart1, "K\n", 2);
 8003dca:	4977      	ldr	r1, [pc, #476]	; (8003fa8 <main+0x974>)
 8003dcc:	4b74      	ldr	r3, [pc, #464]	; (8003fa0 <main+0x96c>)
 8003dce:	2202      	movs	r2, #2
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7fe fd13 	bl	80027fc <esp8266_sendmsg>
 8003dd6:	e0c0      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "BRIGHT") != NULL){
 8003dd8:	4a74      	ldr	r2, [pc, #464]	; (8003fac <main+0x978>)
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <main+0x95c>)
 8003ddc:	0011      	movs	r1, r2
 8003dde:	0018      	movs	r0, r3
 8003de0:	f002 fe3c 	bl	8006a5c <strstr>
 8003de4:	1e03      	subs	r3, r0, #0
 8003de6:	d014      	beq.n	8003e12 <main+0x7de>
				  //Check condition for when it is bright
				  //1 - OPEN
				  //0 - CLOSE
				  bright_flag = 0;
 8003de8:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <main+0x97c>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
				  if (strstr((char*) message, (char *) "OPEN")){
 8003dee:	4a71      	ldr	r2, [pc, #452]	; (8003fb4 <main+0x980>)
 8003df0:	4b67      	ldr	r3, [pc, #412]	; (8003f90 <main+0x95c>)
 8003df2:	0011      	movs	r1, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	f002 fe31 	bl	8006a5c <strstr>
 8003dfa:	1e03      	subs	r3, r0, #0
 8003dfc:	d002      	beq.n	8003e04 <main+0x7d0>
					  bright_flag = 1;
 8003dfe:	4b6c      	ldr	r3, [pc, #432]	; (8003fb0 <main+0x97c>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
				  }
		  		  esp8266_sendmsg(&huart1, "BRI_OK\n", 7);
 8003e04:	496c      	ldr	r1, [pc, #432]	; (8003fb8 <main+0x984>)
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <main+0x96c>)
 8003e08:	2207      	movs	r2, #7
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fe fcf6 	bl	80027fc <esp8266_sendmsg>
 8003e10:	e0a3      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "DARK") != NULL){
 8003e12:	4a6a      	ldr	r2, [pc, #424]	; (8003fbc <main+0x988>)
 8003e14:	4b5e      	ldr	r3, [pc, #376]	; (8003f90 <main+0x95c>)
 8003e16:	0011      	movs	r1, r2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f002 fe1f 	bl	8006a5c <strstr>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d014      	beq.n	8003e4c <main+0x818>
				  //Check condition for when it is dark
				  //1 - OPEN
				  //0 - CLOSE
				  dark_flag = 0;
 8003e22:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <main+0x98c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
				  if (strstr((char*) message, (char *) "OPEN")){
 8003e28:	4a62      	ldr	r2, [pc, #392]	; (8003fb4 <main+0x980>)
 8003e2a:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <main+0x95c>)
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f002 fe14 	bl	8006a5c <strstr>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d002      	beq.n	8003e3e <main+0x80a>
					  dark_flag = 1;
 8003e38:	4b61      	ldr	r3, [pc, #388]	; (8003fc0 <main+0x98c>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
				  }
		  		  esp8266_sendmsg(&huart1, "DAR_OK\n", 7);
 8003e3e:	4961      	ldr	r1, [pc, #388]	; (8003fc4 <main+0x990>)
 8003e40:	4b57      	ldr	r3, [pc, #348]	; (8003fa0 <main+0x96c>)
 8003e42:	2207      	movs	r2, #7
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7fe fcd9 	bl	80027fc <esp8266_sendmsg>
 8003e4a:	e086      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "TIME_CONFIG") != NULL){
 8003e4c:	4a5e      	ldr	r2, [pc, #376]	; (8003fc8 <main+0x994>)
 8003e4e:	4b50      	ldr	r3, [pc, #320]	; (8003f90 <main+0x95c>)
 8003e50:	0011      	movs	r1, r2
 8003e52:	0018      	movs	r0, r3
 8003e54:	f002 fe02 	bl	8006a5c <strstr>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d006      	beq.n	8003e6a <main+0x836>
				  esp8266_sendmsg(&huart1, "K\n", 2);
 8003e5c:	4952      	ldr	r1, [pc, #328]	; (8003fa8 <main+0x974>)
 8003e5e:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <main+0x96c>)
 8003e60:	2202      	movs	r2, #2
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7fe fcca 	bl	80027fc <esp8266_sendmsg>
 8003e68:	e077      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "TM_OP") != NULL){
 8003e6a:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <main+0x998>)
 8003e6c:	4b48      	ldr	r3, [pc, #288]	; (8003f90 <main+0x95c>)
 8003e6e:	0011      	movs	r1, r2
 8003e70:	0018      	movs	r0, r3
 8003e72:	f002 fdf3 	bl	8006a5c <strstr>
 8003e76:	1e03      	subs	r3, r0, #0
 8003e78:	d01e      	beq.n	8003eb8 <main+0x884>
				  //Extract Opening time from message
				  //open_text format: <hour>:<minute><AM or PM>
				  extract_time ((char*)message, message_len, time_open);
 8003e7a:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <main+0x960>)
 8003e7c:	6819      	ldr	r1, [r3, #0]
 8003e7e:	4a54      	ldr	r2, [pc, #336]	; (8003fd0 <main+0x99c>)
 8003e80:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <main+0x95c>)
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 fb45 	bl	8004512 <extract_time>
				  //Convert string time to time struct
				  if (time_open[5] == 'P'){
 8003e88:	4b51      	ldr	r3, [pc, #324]	; (8003fd0 <main+0x99c>)
 8003e8a:	795b      	ldrb	r3, [r3, #5]
 8003e8c:	2b50      	cmp	r3, #80	; 0x50
 8003e8e:	d106      	bne.n	8003e9e <main+0x86a>
					  get_time_struct(&open_time, (char*) time_open,1);
 8003e90:	494f      	ldr	r1, [pc, #316]	; (8003fd0 <main+0x99c>)
 8003e92:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <main+0x9a0>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f000 fb74 	bl	8004584 <get_time_struct>
 8003e9c:	e005      	b.n	8003eaa <main+0x876>
				  }
				  else{
					  get_time_struct(&open_time, (char*) time_open,0);
 8003e9e:	494c      	ldr	r1, [pc, #304]	; (8003fd0 <main+0x99c>)
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <main+0x9a0>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 fb6d 	bl	8004584 <get_time_struct>
				  }
		  		  esp8266_sendmsg(&huart1, "OP_OK\n", 6);
 8003eaa:	494b      	ldr	r1, [pc, #300]	; (8003fd8 <main+0x9a4>)
 8003eac:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <main+0x96c>)
 8003eae:	2206      	movs	r2, #6
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fe fca3 	bl	80027fc <esp8266_sendmsg>
 8003eb6:	e050      	b.n	8003f5a <main+0x926>
			  }
			  else if (strstr((char *) message, (char *) "TM_CL") != NULL){
 8003eb8:	4a48      	ldr	r2, [pc, #288]	; (8003fdc <main+0x9a8>)
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <main+0x95c>)
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f002 fdcc 	bl	8006a5c <strstr>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d01e      	beq.n	8003f06 <main+0x8d2>
				  //Extract Opening time from message
				  //open_text format: <hour>:<minute><AM or PM>
				  extract_time ((char*) message, message_len, time_close);
 8003ec8:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <main+0x960>)
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	4a44      	ldr	r2, [pc, #272]	; (8003fe0 <main+0x9ac>)
 8003ece:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <main+0x95c>)
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fb1e 	bl	8004512 <extract_time>
				  //Convert string time to time struct
				  if (time_close[5] == 'P'){
 8003ed6:	4b42      	ldr	r3, [pc, #264]	; (8003fe0 <main+0x9ac>)
 8003ed8:	795b      	ldrb	r3, [r3, #5]
 8003eda:	2b50      	cmp	r3, #80	; 0x50
 8003edc:	d106      	bne.n	8003eec <main+0x8b8>
					  get_time_struct(&close_time, (char*) time_close,1);
 8003ede:	4940      	ldr	r1, [pc, #256]	; (8003fe0 <main+0x9ac>)
 8003ee0:	4b40      	ldr	r3, [pc, #256]	; (8003fe4 <main+0x9b0>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fb4d 	bl	8004584 <get_time_struct>
 8003eea:	e005      	b.n	8003ef8 <main+0x8c4>
				  }
				  else{
					  get_time_struct(&close_time, (char*) time_close,0);
 8003eec:	493c      	ldr	r1, [pc, #240]	; (8003fe0 <main+0x9ac>)
 8003eee:	4b3d      	ldr	r3, [pc, #244]	; (8003fe4 <main+0x9b0>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 fb46 	bl	8004584 <get_time_struct>
				  }
		  		  esp8266_sendmsg(&huart1, "CL_OK\n", 6);
 8003ef8:	493b      	ldr	r1, [pc, #236]	; (8003fe8 <main+0x9b4>)
 8003efa:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <main+0x96c>)
 8003efc:	2206      	movs	r2, #6
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7fe fc7c 	bl	80027fc <esp8266_sendmsg>
 8003f04:	e029      	b.n	8003f5a <main+0x926>
			  }

			  else if (strstr((char*) message, (char *) "MANUAL") != NULL){
 8003f06:	4a39      	ldr	r2, [pc, #228]	; (8003fec <main+0x9b8>)
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <main+0x95c>)
 8003f0a:	0011      	movs	r1, r2
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f002 fda5 	bl	8006a5c <strstr>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d009      	beq.n	8003f2a <main+0x8f6>
				  esp8266_sendmsg(&huart1, "K\n", 2);
 8003f16:	4924      	ldr	r1, [pc, #144]	; (8003fa8 <main+0x974>)
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <main+0x96c>)
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7fe fc6d 	bl	80027fc <esp8266_sendmsg>
				  current_state = MANUAL;
 8003f22:	4b33      	ldr	r3, [pc, #204]	; (8003ff0 <main+0x9bc>)
 8003f24:	2206      	movs	r2, #6
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e017      	b.n	8003f5a <main+0x926>
			  }

			  else if (strstr((char*) message, (char *) "CUR_TIME") != NULL){
 8003f2a:	4a32      	ldr	r2, [pc, #200]	; (8003ff4 <main+0x9c0>)
 8003f2c:	4b18      	ldr	r3, [pc, #96]	; (8003f90 <main+0x95c>)
 8003f2e:	0011      	movs	r1, r2
 8003f30:	0018      	movs	r0, r3
 8003f32:	f002 fd93 	bl	8006a5c <strstr>
 8003f36:	1e03      	subs	r3, r0, #0
 8003f38:	d00f      	beq.n	8003f5a <main+0x926>
				  //Extract military time from this function
				  extract_time ((char *) message, message_len, cur_time);
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <main+0x960>)
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	4a2e      	ldr	r2, [pc, #184]	; (8003ff8 <main+0x9c4>)
 8003f40:	4b13      	ldr	r3, [pc, #76]	; (8003f90 <main+0x95c>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 fae5 	bl	8004512 <extract_time>
				  //Convert string time to time struct
				  get_time_struct(&time_cur, (char*) cur_time,0);
 8003f48:	492b      	ldr	r1, [pc, #172]	; (8003ff8 <main+0x9c4>)
 8003f4a:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <main+0x9c8>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f000 fb18 	bl	8004584 <get_time_struct>
				  current_state = GET_CUR_DATA;
 8003f54:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <main+0x9bc>)
 8003f56:	2205      	movs	r2, #5
 8003f58:	701a      	strb	r2, [r3, #0]
			  }


			  HAL_UART_AbortReceive(&huart1);
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <main+0x96c>)
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f001 fecd 	bl	8005cfc <HAL_UART_AbortReceive>
			  memset(message, 0, message_len);
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <main+0x960>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	001a      	movs	r2, r3
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <main+0x95c>)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f002 fd5f 	bl	8006a30 <memset>
			  message_index = 0;
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <main+0x9cc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
			  message_len = 0;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <main+0x960>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
	  while (current_state == RECEIVE){
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <main+0x9bc>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d100      	bne.n	8003f88 <main+0x954>
 8003f86:	e653      	b.n	8003c30 <main+0x5fc>
	  TIM2->CCR1 = 0;
 8003f88:	f7ff fbdf 	bl	800374a <main+0x116>
 8003f8c:	08006e8c 	.word	0x08006e8c
 8003f90:	200002e8 	.word	0x200002e8
 8003f94:	200002e4 	.word	0x200002e4
 8003f98:	200003ac 	.word	0x200003ac
 8003f9c:	08006e98 	.word	0x08006e98
 8003fa0:	20000320 	.word	0x20000320
 8003fa4:	08006ea4 	.word	0x08006ea4
 8003fa8:	08006e4c 	.word	0x08006e4c
 8003fac:	08006eb4 	.word	0x08006eb4
 8003fb0:	200002e0 	.word	0x200002e0
 8003fb4:	08006ebc 	.word	0x08006ebc
 8003fb8:	08006ec4 	.word	0x08006ec4
 8003fbc:	08006ecc 	.word	0x08006ecc
 8003fc0:	200003d0 	.word	0x200003d0
 8003fc4:	08006ed4 	.word	0x08006ed4
 8003fc8:	08006edc 	.word	0x08006edc
 8003fcc:	08006ee8 	.word	0x08006ee8
 8003fd0:	20000260 	.word	0x20000260
 8003fd4:	200003b4 	.word	0x200003b4
 8003fd8:	08006ef0 	.word	0x08006ef0
 8003fdc:	08006ef8 	.word	0x08006ef8
 8003fe0:	2000026c 	.word	0x2000026c
 8003fe4:	200003c4 	.word	0x200003c4
 8003fe8:	08006f00 	.word	0x08006f00
 8003fec:	08006f08 	.word	0x08006f08
 8003ff0:	200002dc 	.word	0x200002dc
 8003ff4:	08006f10 	.word	0x08006f10
 8003ff8:	2000028c 	.word	0x2000028c
 8003ffc:	200003bc 	.word	0x200003bc
 8004000:	200003b0 	.word	0x200003b0

08004004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b097      	sub	sp, #92	; 0x5c
 8004008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400a:	2428      	movs	r4, #40	; 0x28
 800400c:	193b      	adds	r3, r7, r4
 800400e:	0018      	movs	r0, r3
 8004010:	2330      	movs	r3, #48	; 0x30
 8004012:	001a      	movs	r2, r3
 8004014:	2100      	movs	r1, #0
 8004016:	f002 fd0b 	bl	8006a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800401a:	2318      	movs	r3, #24
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	0018      	movs	r0, r3
 8004020:	2310      	movs	r3, #16
 8004022:	001a      	movs	r2, r3
 8004024:	2100      	movs	r1, #0
 8004026:	f002 fd03 	bl	8006a30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	0018      	movs	r0, r3
 800402e:	2314      	movs	r3, #20
 8004030:	001a      	movs	r2, r3
 8004032:	2100      	movs	r1, #0
 8004034:	f002 fcfc 	bl	8006a30 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004038:	0021      	movs	r1, r4
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2202      	movs	r2, #2
 800403e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004040:	187b      	adds	r3, r7, r1
 8004042:	2201      	movs	r2, #1
 8004044:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004046:	187b      	adds	r3, r7, r1
 8004048:	2210      	movs	r2, #16
 800404a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800404c:	187b      	adds	r3, r7, r1
 800404e:	2202      	movs	r2, #2
 8004050:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2200      	movs	r2, #0
 8004056:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	22a0      	movs	r2, #160	; 0xa0
 800405c:	0392      	lsls	r2, r2, #14
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004060:	187b      	adds	r3, r7, r1
 8004062:	2200      	movs	r2, #0
 8004064:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004066:	187b      	adds	r3, r7, r1
 8004068:	0018      	movs	r0, r3
 800406a:	f000 fe83 	bl	8004d74 <HAL_RCC_OscConfig>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d001      	beq.n	8004076 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004072:	f000 f8b5 	bl	80041e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004076:	2118      	movs	r1, #24
 8004078:	187b      	adds	r3, r7, r1
 800407a:	2207      	movs	r2, #7
 800407c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800407e:	187b      	adds	r3, r7, r1
 8004080:	2202      	movs	r2, #2
 8004082:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2200      	movs	r2, #0
 800408e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2101      	movs	r1, #1
 8004094:	0018      	movs	r0, r3
 8004096:	f001 f989 	bl	80053ac <HAL_RCC_ClockConfig>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d001      	beq.n	80040a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800409e:	f000 f89f 	bl	80041e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	2201      	movs	r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	0018      	movs	r0, r3
 80040b2:	f001 facd 	bl	8005650 <HAL_RCCEx_PeriphCLKConfig>
 80040b6:	1e03      	subs	r3, r0, #0
 80040b8:	d001      	beq.n	80040be <SystemClock_Config+0xba>
  {
    Error_Handler();
 80040ba:	f000 f891 	bl	80041e0 <Error_Handler>
  }
}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b017      	add	sp, #92	; 0x5c
 80040c4:	bd90      	pop	{r4, r7, pc}
	...

080040c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040cc:	4b14      	ldr	r3, [pc, #80]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <MX_USART1_UART_Init+0x5c>)
 80040d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040d4:	22e1      	movs	r2, #225	; 0xe1
 80040d6:	0252      	lsls	r2, r2, #9
 80040d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040e0:	4b0f      	ldr	r3, [pc, #60]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040e6:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040ee:	220c      	movs	r2, #12
 80040f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <MX_USART1_UART_Init+0x58>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040fe:	4b08      	ldr	r3, [pc, #32]	; (8004120 <MX_USART1_UART_Init+0x58>)
 8004100:	2200      	movs	r2, #0
 8004102:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <MX_USART1_UART_Init+0x58>)
 8004106:	2200      	movs	r2, #0
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <MX_USART1_UART_Init+0x58>)
 800410c:	0018      	movs	r0, r3
 800410e:	f001 fb7d 	bl	800580c <HAL_UART_Init>
 8004112:	1e03      	subs	r3, r0, #0
 8004114:	d001      	beq.n	800411a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004116:	f000 f863 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000320 	.word	0x20000320
 8004124:	40013800 	.word	0x40013800

08004128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004128:	b590      	push	{r4, r7, lr}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800412e:	240c      	movs	r4, #12
 8004130:	193b      	adds	r3, r7, r4
 8004132:	0018      	movs	r0, r3
 8004134:	2314      	movs	r3, #20
 8004136:	001a      	movs	r2, r3
 8004138:	2100      	movs	r1, #0
 800413a:	f002 fc79 	bl	8006a30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800413e:	4b25      	ldr	r3, [pc, #148]	; (80041d4 <MX_GPIO_Init+0xac>)
 8004140:	695a      	ldr	r2, [r3, #20]
 8004142:	4b24      	ldr	r3, [pc, #144]	; (80041d4 <MX_GPIO_Init+0xac>)
 8004144:	2180      	movs	r1, #128	; 0x80
 8004146:	0289      	lsls	r1, r1, #10
 8004148:	430a      	orrs	r2, r1
 800414a:	615a      	str	r2, [r3, #20]
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <MX_GPIO_Init+0xac>)
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	029b      	lsls	r3, r3, #10
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800415a:	4b1e      	ldr	r3, [pc, #120]	; (80041d4 <MX_GPIO_Init+0xac>)
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <MX_GPIO_Init+0xac>)
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	0309      	lsls	r1, r1, #12
 8004164:	430a      	orrs	r2, r1
 8004166:	615a      	str	r2, [r3, #20]
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <MX_GPIO_Init+0xac>)
 800416a:	695a      	ldr	r2, [r3, #20]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	4013      	ands	r3, r2
 8004172:	607b      	str	r3, [r7, #4]
 8004174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8004176:	23c0      	movs	r3, #192	; 0xc0
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4817      	ldr	r0, [pc, #92]	; (80041d8 <MX_GPIO_Init+0xb0>)
 800417c:	2200      	movs	r2, #0
 800417e:	0019      	movs	r1, r3
 8004180:	f000 fdda 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004184:	193b      	adds	r3, r7, r4
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800418a:	193b      	adds	r3, r7, r4
 800418c:	4a13      	ldr	r2, [pc, #76]	; (80041dc <MX_GPIO_Init+0xb4>)
 800418e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	193b      	adds	r3, r7, r4
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004196:	193a      	adds	r2, r7, r4
 8004198:	2390      	movs	r3, #144	; 0x90
 800419a:	05db      	lsls	r3, r3, #23
 800419c:	0011      	movs	r1, r2
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 fc5a 	bl	8004a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80041a4:	0021      	movs	r1, r4
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	22c0      	movs	r2, #192	; 0xc0
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041ae:	187b      	adds	r3, r7, r1
 80041b0:	2201      	movs	r2, #1
 80041b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	187b      	adds	r3, r7, r1
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	4a05      	ldr	r2, [pc, #20]	; (80041d8 <MX_GPIO_Init+0xb0>)
 80041c4:	0019      	movs	r1, r3
 80041c6:	0010      	movs	r0, r2
 80041c8:	f000 fc46 	bl	8004a58 <HAL_GPIO_Init>

}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b009      	add	sp, #36	; 0x24
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	48000800 	.word	0x48000800
 80041dc:	10120000 	.word	0x10120000

080041e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f2:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_MspInit+0x44>)
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_MspInit+0x44>)
 80041f8:	2101      	movs	r1, #1
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_MspInit+0x44>)
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2201      	movs	r2, #1
 8004204:	4013      	ands	r3, r2
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_MspInit+0x44>)
 800420c:	69da      	ldr	r2, [r3, #28]
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_MspInit+0x44>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	0549      	lsls	r1, r1, #21
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_MspInit+0x44>)
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	055b      	lsls	r3, r3, #21
 8004220:	4013      	ands	r3, r2
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bd80      	pop	{r7, pc}
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	40021000 	.word	0x40021000

08004234 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	2314      	movs	r3, #20
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	0018      	movs	r0, r3
 8004242:	2314      	movs	r3, #20
 8004244:	001a      	movs	r2, r3
 8004246:	2100      	movs	r1, #0
 8004248:	f002 fbf2 	bl	8006a30 <memset>
  if(huart->Instance==USART1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <HAL_UART_MspInit+0xa4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d13b      	bne.n	80042ce <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_UART_MspInit+0xa8>)
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_UART_MspInit+0xa8>)
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	01c9      	lsls	r1, r1, #7
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HAL_UART_MspInit+0xa8>)
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <HAL_UART_MspInit+0xa8>)
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_UART_MspInit+0xa8>)
 8004278:	2180      	movs	r1, #128	; 0x80
 800427a:	0289      	lsls	r1, r1, #10
 800427c:	430a      	orrs	r2, r1
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	4b16      	ldr	r3, [pc, #88]	; (80042dc <HAL_UART_MspInit+0xa8>)
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800428e:	2114      	movs	r1, #20
 8004290:	187b      	adds	r3, r7, r1
 8004292:	22c0      	movs	r2, #192	; 0xc0
 8004294:	00d2      	lsls	r2, r2, #3
 8004296:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004298:	187b      	adds	r3, r7, r1
 800429a:	2202      	movs	r2, #2
 800429c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429e:	187b      	adds	r3, r7, r1
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	2203      	movs	r2, #3
 80042a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	2201      	movs	r2, #1
 80042ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b0:	187a      	adds	r2, r7, r1
 80042b2:	2390      	movs	r3, #144	; 0x90
 80042b4:	05db      	lsls	r3, r3, #23
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fbcd 	bl	8004a58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042be:	2200      	movs	r2, #0
 80042c0:	2100      	movs	r1, #0
 80042c2:	201b      	movs	r0, #27
 80042c4:	f000 fb0e 	bl	80048e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042c8:	201b      	movs	r0, #27
 80042ca:	f000 fb20 	bl	800490e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b00a      	add	sp, #40	; 0x28
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	40013800 	.word	0x40013800
 80042dc:	40021000 	.word	0x40021000

080042e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ee:	e7fe      	b.n	80042ee <HardFault_Handler+0x4>

080042f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004308:	f000 fa02 	bl	8004710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
	...

08004314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <USART1_IRQHandler+0x14>)
 800431a:	0018      	movs	r0, r3
 800431c:	f001 fdb8 	bl	8005e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	20000320 	.word	0x20000320

0800432c <wifi_credential_search>:
#include "main.h"

int wifi_credential_search(char * string, char * name, char * password, int size){
 800432c:	b580      	push	{r7, lr}
 800432e:	b08c      	sub	sp, #48	; 0x30
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
    int name_flag;
    int password_flag;
    int name_finish;
    int password_finish;

    name_finish = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
    password_flag = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	61fb      	str	r3, [r7, #28]
    name_flag = 0;
 8004342:	2300      	movs	r3, #0
 8004344:	623b      	str	r3, [r7, #32]
    password_finish = 0;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

    i = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
    j = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	62bb      	str	r3, [r7, #40]	; 0x28
    k = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	; 0x24

	while (i != size){
 8004356:	e068      	b.n	800442a <wifi_credential_search+0xfe>
	    if (string[i] == '"' && name_flag == 0 && name_finish == 0){
 8004358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	18d3      	adds	r3, r2, r3
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b22      	cmp	r3, #34	; 0x22
 8004362:	d108      	bne.n	8004376 <wifi_credential_search+0x4a>
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <wifi_credential_search+0x4a>
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <wifi_credential_search+0x4a>
	        name_flag = 1;
 8004370:	2301      	movs	r3, #1
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	e039      	b.n	80043ea <wifi_credential_search+0xbe>
	    }
	    else if (string[i] == '"' && name_flag == 1){
 8004376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	18d3      	adds	r3, r2, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b22      	cmp	r3, #34	; 0x22
 8004380:	d10f      	bne.n	80043a2 <wifi_credential_search+0x76>
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10c      	bne.n	80043a2 <wifi_credential_search+0x76>
	        name_flag = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	623b      	str	r3, [r7, #32]
	        name_finish = 1;
 800438c:	2301      	movs	r3, #1
 800438e:	61bb      	str	r3, [r7, #24]
	        name[j] = string[i];
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	18d2      	adds	r2, r2, r3
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	18cb      	adds	r3, r1, r3
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e023      	b.n	80043ea <wifi_credential_search+0xbe>
	    }
	    else if (string[i] == '"' && password_flag == 0 && name_finish == 1){
 80043a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	18d3      	adds	r3, r2, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b22      	cmp	r3, #34	; 0x22
 80043ac:	d108      	bne.n	80043c0 <wifi_credential_search+0x94>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d105      	bne.n	80043c0 <wifi_credential_search+0x94>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d102      	bne.n	80043c0 <wifi_credential_search+0x94>
	        password_flag = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e014      	b.n	80043ea <wifi_credential_search+0xbe>
	    }
	    else if (string[i] == '"' && password_flag == 1){
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	18d3      	adds	r3, r2, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b22      	cmp	r3, #34	; 0x22
 80043ca:	d10e      	bne.n	80043ea <wifi_credential_search+0xbe>
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10b      	bne.n	80043ea <wifi_credential_search+0xbe>
	        password_flag = 0;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
	        password[k] = string[i];
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	18d2      	adds	r2, r2, r3
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	18cb      	adds	r3, r1, r3
 80043e2:	7812      	ldrb	r2, [r2, #0]
 80043e4:	701a      	strb	r2, [r3, #0]
	        password_finish = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
	    }
	    if (name_flag){
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00b      	beq.n	8004408 <wifi_credential_search+0xdc>
	        name[j] = string[i];
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	18cb      	adds	r3, r1, r3
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	701a      	strb	r2, [r3, #0]
	        j++;
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	3301      	adds	r3, #1
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
 8004406:	e00d      	b.n	8004424 <wifi_credential_search+0xf8>
	    }
	    else if (password_flag){
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <wifi_credential_search+0xf8>
	        password[k] = string[i];
 800440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	18d2      	adds	r2, r2, r3
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	18cb      	adds	r3, r1, r3
 800441a:	7812      	ldrb	r2, [r2, #0]
 800441c:	701a      	strb	r2, [r3, #0]
	        k++;
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	3301      	adds	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
	    }
	    i++;
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	3301      	adds	r3, #1
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (i != size){
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d192      	bne.n	8004358 <wifi_credential_search+0x2c>
	}

	if (password_finish && name_finish){
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <wifi_credential_search+0x116>
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <wifi_credential_search+0x116>
	    return 1;
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <wifi_credential_search+0x118>
	}
	return 0;
 8004442:	2300      	movs	r3, #0
}
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	b00c      	add	sp, #48	; 0x30
 800444a:	bd80      	pop	{r7, pc}

0800444c <manipulate_string>:

void manipulate_string(char * msg, int msg_size){
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
	int i;
	for (i=0; i < msg_size; i++){
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e00d      	b.n	8004478 <manipulate_string+0x2c>
		if (msg[i] == '\0'){
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	18d3      	adds	r3, r2, r3
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d104      	bne.n	8004472 <manipulate_string+0x26>
			msg[i] = '_';
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	18d3      	adds	r3, r2, r3
 800446e:	225f      	movs	r2, #95	; 0x5f
 8004470:	701a      	strb	r2, [r3, #0]
	for (i=0; i < msg_size; i++){
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	dbed      	blt.n	800445c <manipulate_string+0x10>
		}
	}
}
 8004480:	46c0      	nop			; (mov r8, r8)
 8004482:	46bd      	mov	sp, r7
 8004484:	b004      	add	sp, #16
 8004486:	bd80      	pop	{r7, pc}

08004488 <get_temperature>:

int get_temperature (char * msg, int msg_size){
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	int i;
	char temp_str[2] = "";
 8004492:	230c      	movs	r3, #12
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2200      	movs	r2, #0
 8004498:	801a      	strh	r2, [r3, #0]
	int temp_int = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
	int temp_flag = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
	int temp_index = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]

	for (i = 0; i < msg_size; i++){
 80044a6:	2300      	movs	r3, #0
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e022      	b.n	80044f2 <get_temperature+0x6a>
	    if (msg[i] == '\r'){
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	18d3      	adds	r3, r2, r3
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b0d      	cmp	r3, #13
 80044b6:	d101      	bne.n	80044bc <get_temperature+0x34>
			temp_flag = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
		}
	    if (temp_flag){
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00c      	beq.n	80044dc <get_temperature+0x54>
			temp_str[temp_index] = msg[i];
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	18d3      	adds	r3, r2, r3
 80044c8:	7819      	ldrb	r1, [r3, #0]
 80044ca:	230c      	movs	r3, #12
 80044cc:	18fa      	adds	r2, r7, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	18d3      	adds	r3, r2, r3
 80044d2:	1c0a      	adds	r2, r1, #0
 80044d4:	701a      	strb	r2, [r3, #0]
			temp_index ++;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	3301      	adds	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
		}
		if (msg[i] == '/'){
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	18d3      	adds	r3, r2, r3
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b2f      	cmp	r3, #47	; 0x2f
 80044e6:	d101      	bne.n	80044ec <get_temperature+0x64>
			temp_flag = 1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < msg_size; i++){
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	3301      	adds	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	dbd8      	blt.n	80044ac <get_temperature+0x24>
		}
	}

	temp_int = atoi(temp_str);
 80044fa:	230c      	movs	r3, #12
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	0018      	movs	r0, r3
 8004500:	f002 fa50 	bl	80069a4 <atoi>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

	return temp_int;
 8004508:	693b      	ldr	r3, [r7, #16]
}
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b008      	add	sp, #32
 8004510:	bd80      	pop	{r7, pc}

08004512 <extract_time>:

void extract_time (char * msg, int msg_size, char * time){
 8004512:	b580      	push	{r7, lr}
 8004514:	b088      	sub	sp, #32
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
	int i;
	int time_flag = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
	int time_index = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]

	for (i = 0; i < msg_size; i++){
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	e023      	b.n	8004574 <extract_time+0x62>
		if (time_flag && msg[i] == '\r'){
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d007      	beq.n	8004542 <extract_time+0x30>
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b0d      	cmp	r3, #13
 800453c:	d101      	bne.n	8004542 <extract_time+0x30>
			time_flag = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
		}

		if (time_flag){
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <extract_time+0x4c>
			time[time_index] = msg[i];
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	18d2      	adds	r2, r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	18cb      	adds	r3, r1, r3
 8004554:	7812      	ldrb	r2, [r2, #0]
 8004556:	701a      	strb	r2, [r3, #0]
			time_index++;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	3301      	adds	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
		}

		if (msg[i] == '/'){
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	18d3      	adds	r3, r2, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b2f      	cmp	r3, #47	; 0x2f
 8004568:	d101      	bne.n	800456e <extract_time+0x5c>
			time_flag = 1;
 800456a:	2301      	movs	r3, #1
 800456c:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < msg_size; i++){
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3301      	adds	r3, #1
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	429a      	cmp	r2, r3
 800457a:	dbd7      	blt.n	800452c <extract_time+0x1a>
		}
	}

}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b008      	add	sp, #32
 8004582:	bd80      	pop	{r7, pc}

08004584 <get_time_struct>:

void get_time_struct (struct time * t, char * time_str, int PM_flag){
 8004584:	b5b0      	push	{r4, r5, r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	char hour[3] = "";
 8004590:	2114      	movs	r1, #20
 8004592:	000c      	movs	r4, r1
 8004594:	187b      	adds	r3, r7, r1
 8004596:	4a21      	ldr	r2, [pc, #132]	; (800461c <get_time_struct+0x98>)
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	2202      	movs	r2, #2
 80045a2:	2100      	movs	r1, #0
 80045a4:	0018      	movs	r0, r3
 80045a6:	f002 fa43 	bl	8006a30 <memset>
	char minute[3] = "";
 80045aa:	2510      	movs	r5, #16
 80045ac:	197b      	adds	r3, r7, r5
 80045ae:	4a1b      	ldr	r2, [pc, #108]	; (800461c <get_time_struct+0x98>)
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	2201      	movs	r2, #1
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	2202      	movs	r2, #2
 80045ba:	2100      	movs	r1, #0
 80045bc:	0018      	movs	r0, r3
 80045be:	f002 fa37 	bl	8006a30 <memset>

	hour[0] = time_str[0];
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	0021      	movs	r1, r4
 80045c8:	187b      	adds	r3, r7, r1
 80045ca:	701a      	strb	r2, [r3, #0]
	hour[1] = time_str[1];
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	785a      	ldrb	r2, [r3, #1]
 80045d0:	187b      	adds	r3, r7, r1
 80045d2:	705a      	strb	r2, [r3, #1]
	minute[0] = time_str[3];
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	78da      	ldrb	r2, [r3, #3]
 80045d8:	197b      	adds	r3, r7, r5
 80045da:	701a      	strb	r2, [r3, #0]
	minute[1] = time_str[4];
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	791a      	ldrb	r2, [r3, #4]
 80045e0:	197b      	adds	r3, r7, r5
 80045e2:	705a      	strb	r2, [r3, #1]

	t->hour = atoi(hour);
 80045e4:	187b      	adds	r3, r7, r1
 80045e6:	0018      	movs	r0, r3
 80045e8:	f002 f9dc 	bl	80069a4 <atoi>
 80045ec:	0002      	movs	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]
	t->minute = atoi(minute);
 80045f2:	197b      	adds	r3, r7, r5
 80045f4:	0018      	movs	r0, r3
 80045f6:	f002 f9d5 	bl	80069a4 <atoi>
 80045fa:	0002      	movs	r2, r0
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	605a      	str	r2, [r3, #4]
	if (PM_flag){
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <get_time_struct+0x8e>
		t->hour+=12;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	001a      	movs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	601a      	str	r2, [r3, #0]
	}

}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	46bd      	mov	sp, r7
 8004616:	b006      	add	sp, #24
 8004618:	bdb0      	pop	{r4, r5, r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	08006f1c 	.word	0x08006f1c

08004620 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004624:	46c0      	nop			; (mov r8, r8)
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800462c:	480d      	ldr	r0, [pc, #52]	; (8004664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800462e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004630:	480d      	ldr	r0, [pc, #52]	; (8004668 <LoopForever+0x6>)
  ldr r1, =_edata
 8004632:	490e      	ldr	r1, [pc, #56]	; (800466c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004634:	4a0e      	ldr	r2, [pc, #56]	; (8004670 <LoopForever+0xe>)
  movs r3, #0
 8004636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004638:	e002      	b.n	8004640 <LoopCopyDataInit>

0800463a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800463a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800463c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800463e:	3304      	adds	r3, #4

08004640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004644:	d3f9      	bcc.n	800463a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004646:	4a0b      	ldr	r2, [pc, #44]	; (8004674 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004648:	4c0b      	ldr	r4, [pc, #44]	; (8004678 <LoopForever+0x16>)
  movs r3, #0
 800464a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800464c:	e001      	b.n	8004652 <LoopFillZerobss>

0800464e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800464e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004650:	3204      	adds	r2, #4

08004652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004654:	d3fb      	bcc.n	800464e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004656:	f7ff ffe3 	bl	8004620 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800465a:	f002 f9a9 	bl	80069b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800465e:	f7fe ffe9 	bl	8003634 <main>

08004662 <LoopForever>:

LoopForever:
    b LoopForever
 8004662:	e7fe      	b.n	8004662 <LoopForever>
  ldr   r0, =_estack
 8004664:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800466c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8004670:	080071d0 	.word	0x080071d0
  ldr r2, =_sbss
 8004674:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8004678:	200003d8 	.word	0x200003d8

0800467c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800467c:	e7fe      	b.n	800467c <ADC1_COMP_IRQHandler>
	...

08004680 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004684:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <HAL_Init+0x24>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4b06      	ldr	r3, [pc, #24]	; (80046a4 <HAL_Init+0x24>)
 800468a:	2110      	movs	r1, #16
 800468c:	430a      	orrs	r2, r1
 800468e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004690:	2000      	movs	r0, #0
 8004692:	f000 f809 	bl	80046a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004696:	f7ff fda9 	bl	80041ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	0018      	movs	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	46c0      	nop			; (mov r8, r8)
 80046a4:	40022000 	.word	0x40022000

080046a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046a8:	b590      	push	{r4, r7, lr}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80046b0:	4b14      	ldr	r3, [pc, #80]	; (8004704 <HAL_InitTick+0x5c>)
 80046b2:	681c      	ldr	r4, [r3, #0]
 80046b4:	4b14      	ldr	r3, [pc, #80]	; (8004708 <HAL_InitTick+0x60>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	0019      	movs	r1, r3
 80046ba:	23fa      	movs	r3, #250	; 0xfa
 80046bc:	0098      	lsls	r0, r3, #2
 80046be:	f7fb fd23 	bl	8000108 <__udivsi3>
 80046c2:	0003      	movs	r3, r0
 80046c4:	0019      	movs	r1, r3
 80046c6:	0020      	movs	r0, r4
 80046c8:	f7fb fd1e 	bl	8000108 <__udivsi3>
 80046cc:	0003      	movs	r3, r0
 80046ce:	0018      	movs	r0, r3
 80046d0:	f000 f92d 	bl	800492e <HAL_SYSTICK_Config>
 80046d4:	1e03      	subs	r3, r0, #0
 80046d6:	d001      	beq.n	80046dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e00f      	b.n	80046fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d80b      	bhi.n	80046fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	2301      	movs	r3, #1
 80046e6:	425b      	negs	r3, r3
 80046e8:	2200      	movs	r2, #0
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 f8fa 	bl	80048e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_InitTick+0x64>)
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b003      	add	sp, #12
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	20000000 	.word	0x20000000
 8004708:	20000008 	.word	0x20000008
 800470c:	20000004 	.word	0x20000004

08004710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_IncTick+0x1c>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	001a      	movs	r2, r3
 800471a:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_IncTick+0x20>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	18d2      	adds	r2, r2, r3
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_IncTick+0x20>)
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	20000008 	.word	0x20000008
 8004730:	200003d4 	.word	0x200003d4

08004734 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  return uwTick;
 8004738:	4b02      	ldr	r3, [pc, #8]	; (8004744 <HAL_GetTick+0x10>)
 800473a:	681b      	ldr	r3, [r3, #0]
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	200003d4 	.word	0x200003d4

08004748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff fff0 	bl	8004734 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	d005      	beq.n	800476e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_Delay+0x40>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	001a      	movs	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	189b      	adds	r3, r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	f7ff ffe0 	bl	8004734 <HAL_GetTick>
 8004774:	0002      	movs	r2, r0
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d8f7      	bhi.n	8004770 <HAL_Delay+0x28>
  {
  }
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b004      	add	sp, #16
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000008 	.word	0x20000008

0800478c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	0002      	movs	r2, r0
 8004794:	1dfb      	adds	r3, r7, #7
 8004796:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004798:	1dfb      	adds	r3, r7, #7
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b7f      	cmp	r3, #127	; 0x7f
 800479e:	d809      	bhi.n	80047b4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047a0:	1dfb      	adds	r3, r7, #7
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	001a      	movs	r2, r3
 80047a6:	231f      	movs	r3, #31
 80047a8:	401a      	ands	r2, r3
 80047aa:	4b04      	ldr	r3, [pc, #16]	; (80047bc <__NVIC_EnableIRQ+0x30>)
 80047ac:	2101      	movs	r1, #1
 80047ae:	4091      	lsls	r1, r2
 80047b0:	000a      	movs	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
  }
}
 80047b4:	46c0      	nop			; (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	e000e100 	.word	0xe000e100

080047c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	0002      	movs	r2, r0
 80047c8:	6039      	str	r1, [r7, #0]
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80047ce:	1dfb      	adds	r3, r7, #7
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b7f      	cmp	r3, #127	; 0x7f
 80047d4:	d828      	bhi.n	8004828 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80047d6:	4a2f      	ldr	r2, [pc, #188]	; (8004894 <__NVIC_SetPriority+0xd4>)
 80047d8:	1dfb      	adds	r3, r7, #7
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b25b      	sxtb	r3, r3
 80047de:	089b      	lsrs	r3, r3, #2
 80047e0:	33c0      	adds	r3, #192	; 0xc0
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	589b      	ldr	r3, [r3, r2]
 80047e6:	1dfa      	adds	r2, r7, #7
 80047e8:	7812      	ldrb	r2, [r2, #0]
 80047ea:	0011      	movs	r1, r2
 80047ec:	2203      	movs	r2, #3
 80047ee:	400a      	ands	r2, r1
 80047f0:	00d2      	lsls	r2, r2, #3
 80047f2:	21ff      	movs	r1, #255	; 0xff
 80047f4:	4091      	lsls	r1, r2
 80047f6:	000a      	movs	r2, r1
 80047f8:	43d2      	mvns	r2, r2
 80047fa:	401a      	ands	r2, r3
 80047fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	019b      	lsls	r3, r3, #6
 8004802:	22ff      	movs	r2, #255	; 0xff
 8004804:	401a      	ands	r2, r3
 8004806:	1dfb      	adds	r3, r7, #7
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	0018      	movs	r0, r3
 800480c:	2303      	movs	r3, #3
 800480e:	4003      	ands	r3, r0
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004814:	481f      	ldr	r0, [pc, #124]	; (8004894 <__NVIC_SetPriority+0xd4>)
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b25b      	sxtb	r3, r3
 800481c:	089b      	lsrs	r3, r3, #2
 800481e:	430a      	orrs	r2, r1
 8004820:	33c0      	adds	r3, #192	; 0xc0
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004826:	e031      	b.n	800488c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004828:	4a1b      	ldr	r2, [pc, #108]	; (8004898 <__NVIC_SetPriority+0xd8>)
 800482a:	1dfb      	adds	r3, r7, #7
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	0019      	movs	r1, r3
 8004830:	230f      	movs	r3, #15
 8004832:	400b      	ands	r3, r1
 8004834:	3b08      	subs	r3, #8
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3306      	adds	r3, #6
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	18d3      	adds	r3, r2, r3
 800483e:	3304      	adds	r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1dfa      	adds	r2, r7, #7
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	0011      	movs	r1, r2
 8004848:	2203      	movs	r2, #3
 800484a:	400a      	ands	r2, r1
 800484c:	00d2      	lsls	r2, r2, #3
 800484e:	21ff      	movs	r1, #255	; 0xff
 8004850:	4091      	lsls	r1, r2
 8004852:	000a      	movs	r2, r1
 8004854:	43d2      	mvns	r2, r2
 8004856:	401a      	ands	r2, r3
 8004858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	019b      	lsls	r3, r3, #6
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	401a      	ands	r2, r3
 8004862:	1dfb      	adds	r3, r7, #7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	0018      	movs	r0, r3
 8004868:	2303      	movs	r3, #3
 800486a:	4003      	ands	r3, r0
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004870:	4809      	ldr	r0, [pc, #36]	; (8004898 <__NVIC_SetPriority+0xd8>)
 8004872:	1dfb      	adds	r3, r7, #7
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	001c      	movs	r4, r3
 8004878:	230f      	movs	r3, #15
 800487a:	4023      	ands	r3, r4
 800487c:	3b08      	subs	r3, #8
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	430a      	orrs	r2, r1
 8004882:	3306      	adds	r3, #6
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	18c3      	adds	r3, r0, r3
 8004888:	3304      	adds	r3, #4
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	b003      	add	sp, #12
 8004892:	bd90      	pop	{r4, r7, pc}
 8004894:	e000e100 	.word	0xe000e100
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <SysTick_Config+0x40>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ae:	2301      	movs	r3, #1
 80048b0:	e010      	b.n	80048d4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <SysTick_Config+0x44>)
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	3a01      	subs	r2, #1
 80048b8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ba:	2301      	movs	r3, #1
 80048bc:	425b      	negs	r3, r3
 80048be:	2103      	movs	r1, #3
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7ff ff7d 	bl	80047c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <SysTick_Config+0x44>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <SysTick_Config+0x44>)
 80048ce:	2207      	movs	r2, #7
 80048d0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00ffffff 	.word	0x00ffffff
 80048e0:	e000e010 	.word	0xe000e010

080048e4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
 80048ee:	210f      	movs	r1, #15
 80048f0:	187b      	adds	r3, r7, r1
 80048f2:	1c02      	adds	r2, r0, #0
 80048f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	0011      	movs	r1, r2
 8004900:	0018      	movs	r0, r3
 8004902:	f7ff ff5d 	bl	80047c0 <__NVIC_SetPriority>
}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}

0800490e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	0002      	movs	r2, r0
 8004916:	1dfb      	adds	r3, r7, #7
 8004918:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	b25b      	sxtb	r3, r3
 8004920:	0018      	movs	r0, r3
 8004922:	f7ff ff33 	bl	800478c <__NVIC_EnableIRQ>
}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	46bd      	mov	sp, r7
 800492a:	b002      	add	sp, #8
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff ffaf 	bl	800489c <SysTick_Config>
 800493e:	0003      	movs	r3, r0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b002      	add	sp, #8
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2221      	movs	r2, #33	; 0x21
 8004954:	5c9b      	ldrb	r3, [r3, r2]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d008      	beq.n	800496e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2204      	movs	r2, #4
 8004960:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	2100      	movs	r1, #0
 8004968:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e020      	b.n	80049b0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	210e      	movs	r1, #14
 800497a:	438a      	bics	r2, r1
 800497c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2101      	movs	r1, #1
 800498a:	438a      	bics	r2, r1
 800498c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	2101      	movs	r1, #1
 8004998:	4091      	lsls	r1, r2
 800499a:	000a      	movs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2221      	movs	r2, #33	; 0x21
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	2100      	movs	r1, #0
 80049ac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c0:	230f      	movs	r3, #15
 80049c2:	18fb      	adds	r3, r7, r3
 80049c4:	2200      	movs	r2, #0
 80049c6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2221      	movs	r2, #33	; 0x21
 80049cc:	5c9b      	ldrb	r3, [r3, r2]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d007      	beq.n	80049e4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2204      	movs	r2, #4
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80049da:	230f      	movs	r3, #15
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e028      	b.n	8004a36 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	210e      	movs	r1, #14
 80049f0:	438a      	bics	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2101      	movs	r1, #1
 8004a00:	438a      	bics	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4091      	lsls	r1, r2
 8004a10:	000a      	movs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	0010      	movs	r0, r2
 8004a34:	4798      	blx	r3
    } 
  }
  return status;
 8004a36:	230f      	movs	r3, #15
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	781b      	ldrb	r3, [r3, #0]
}
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b004      	add	sp, #16
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b002      	add	sp, #8
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a66:	e14f      	b.n	8004d08 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4091      	lsls	r1, r2
 8004a72:	000a      	movs	r2, r1
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d100      	bne.n	8004a80 <HAL_GPIO_Init+0x28>
 8004a7e:	e140      	b.n	8004d02 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d003      	beq.n	8004a90 <HAL_GPIO_Init+0x38>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b12      	cmp	r3, #18
 8004a8e:	d123      	bne.n	8004ad8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	0092      	lsls	r2, r2, #2
 8004a9a:	58d3      	ldr	r3, [r2, r3]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	43da      	mvns	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2107      	movs	r1, #7
 8004abc:	400b      	ands	r3, r1
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	409a      	lsls	r2, r3
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	08da      	lsrs	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3208      	adds	r2, #8
 8004ad2:	0092      	lsls	r2, r2, #2
 8004ad4:	6939      	ldr	r1, [r7, #16]
 8004ad6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	0013      	movs	r3, r2
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2203      	movs	r2, #3
 8004af6:	401a      	ands	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	409a      	lsls	r2, r3
 8004afe:	0013      	movs	r3, r2
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d00b      	beq.n	8004b2c <HAL_GPIO_Init+0xd4>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d007      	beq.n	8004b2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b20:	2b11      	cmp	r3, #17
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b12      	cmp	r3, #18
 8004b2a:	d130      	bne.n	8004b8e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	0013      	movs	r3, r2
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	0013      	movs	r3, r2
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b62:	2201      	movs	r2, #1
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	409a      	lsls	r2, r3
 8004b68:	0013      	movs	r3, r2
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	2201      	movs	r2, #1
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	0013      	movs	r3, r2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	2203      	movs	r2, #3
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	0013      	movs	r3, r2
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	2380      	movs	r3, #128	; 0x80
 8004bc4:	055b      	lsls	r3, r3, #21
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <HAL_GPIO_Init+0x174>
 8004bca:	e09a      	b.n	8004d02 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bcc:	4b54      	ldr	r3, [pc, #336]	; (8004d20 <HAL_GPIO_Init+0x2c8>)
 8004bce:	699a      	ldr	r2, [r3, #24]
 8004bd0:	4b53      	ldr	r3, [pc, #332]	; (8004d20 <HAL_GPIO_Init+0x2c8>)
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	619a      	str	r2, [r3, #24]
 8004bd8:	4b51      	ldr	r3, [pc, #324]	; (8004d20 <HAL_GPIO_Init+0x2c8>)
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	4013      	ands	r3, r2
 8004be0:	60bb      	str	r3, [r7, #8]
 8004be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004be4:	4a4f      	ldr	r2, [pc, #316]	; (8004d24 <HAL_GPIO_Init+0x2cc>)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	089b      	lsrs	r3, r3, #2
 8004bea:	3302      	adds	r3, #2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	589b      	ldr	r3, [r3, r2]
 8004bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	220f      	movs	r2, #15
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	0013      	movs	r3, r2
 8004c00:	43da      	mvns	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4013      	ands	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	2390      	movs	r3, #144	; 0x90
 8004c0c:	05db      	lsls	r3, r3, #23
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d013      	beq.n	8004c3a <HAL_GPIO_Init+0x1e2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a44      	ldr	r2, [pc, #272]	; (8004d28 <HAL_GPIO_Init+0x2d0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00d      	beq.n	8004c36 <HAL_GPIO_Init+0x1de>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a43      	ldr	r2, [pc, #268]	; (8004d2c <HAL_GPIO_Init+0x2d4>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <HAL_GPIO_Init+0x1da>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a42      	ldr	r2, [pc, #264]	; (8004d30 <HAL_GPIO_Init+0x2d8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_GPIO_Init+0x1d6>
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e006      	b.n	8004c3c <HAL_GPIO_Init+0x1e4>
 8004c2e:	2305      	movs	r3, #5
 8004c30:	e004      	b.n	8004c3c <HAL_GPIO_Init+0x1e4>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e002      	b.n	8004c3c <HAL_GPIO_Init+0x1e4>
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_GPIO_Init+0x1e4>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	2103      	movs	r1, #3
 8004c40:	400a      	ands	r2, r1
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	4093      	lsls	r3, r2
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c4c:	4935      	ldr	r1, [pc, #212]	; (8004d24 <HAL_GPIO_Init+0x2cc>)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	3302      	adds	r3, #2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	43da      	mvns	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	025b      	lsls	r3, r3, #9
 8004c72:	4013      	ands	r3, r2
 8004c74:	d003      	beq.n	8004c7e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	43da      	mvns	r2, r3
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	4013      	ands	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	029b      	lsls	r3, r3, #10
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ca8:	4b22      	ldr	r3, [pc, #136]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cae:	4b21      	ldr	r3, [pc, #132]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	43da      	mvns	r2, r3
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	035b      	lsls	r3, r3, #13
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004cd2:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004cd8:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	43da      	mvns	r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	2380      	movs	r3, #128	; 0x80
 8004cee:	039b      	lsls	r3, r3, #14
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d003      	beq.n	8004cfc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <HAL_GPIO_Init+0x2dc>)
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	3301      	adds	r3, #1
 8004d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	40da      	lsrs	r2, r3
 8004d10:	1e13      	subs	r3, r2, #0
 8004d12:	d000      	beq.n	8004d16 <HAL_GPIO_Init+0x2be>
 8004d14:	e6a8      	b.n	8004a68 <HAL_GPIO_Init+0x10>
  } 
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b006      	add	sp, #24
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	40021000 	.word	0x40021000
 8004d24:	40010000 	.word	0x40010000
 8004d28:	48000400 	.word	0x48000400
 8004d2c:	48000800 	.word	0x48000800
 8004d30:	48000c00 	.word	0x48000c00
 8004d34:	40010400 	.word	0x40010400

08004d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	0008      	movs	r0, r1
 8004d42:	0011      	movs	r1, r2
 8004d44:	1cbb      	adds	r3, r7, #2
 8004d46:	1c02      	adds	r2, r0, #0
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	1c7b      	adds	r3, r7, #1
 8004d4c:	1c0a      	adds	r2, r1, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d50:	1c7b      	adds	r3, r7, #1
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d58:	1cbb      	adds	r3, r7, #2
 8004d5a:	881a      	ldrh	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d60:	e003      	b.n	8004d6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d62:	1cbb      	adds	r3, r7, #2
 8004d64:	881a      	ldrh	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b002      	add	sp, #8
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e303      	b.n	800538e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d100      	bne.n	8004d92 <HAL_RCC_OscConfig+0x1e>
 8004d90:	e08d      	b.n	8004eae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d92:	4bc4      	ldr	r3, [pc, #784]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	220c      	movs	r2, #12
 8004d98:	4013      	ands	r3, r2
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d00e      	beq.n	8004dbc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d9e:	4bc1      	ldr	r3, [pc, #772]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	220c      	movs	r2, #12
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d116      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x64>
 8004daa:	4bbe      	ldr	r3, [pc, #760]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	025b      	lsls	r3, r3, #9
 8004db2:	401a      	ands	r2, r3
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	025b      	lsls	r3, r3, #9
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d10d      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dbc:	4bb9      	ldr	r3, [pc, #740]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	029b      	lsls	r3, r3, #10
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d100      	bne.n	8004dca <HAL_RCC_OscConfig+0x56>
 8004dc8:	e070      	b.n	8004eac <HAL_RCC_OscConfig+0x138>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d000      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x60>
 8004dd2:	e06b      	b.n	8004eac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e2da      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_OscConfig+0x7c>
 8004de0:	4bb0      	ldr	r3, [pc, #704]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4baf      	ldr	r3, [pc, #700]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004de6:	2180      	movs	r1, #128	; 0x80
 8004de8:	0249      	lsls	r1, r1, #9
 8004dea:	430a      	orrs	r2, r1
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e02f      	b.n	8004e50 <HAL_RCC_OscConfig+0xdc>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10c      	bne.n	8004e12 <HAL_RCC_OscConfig+0x9e>
 8004df8:	4baa      	ldr	r3, [pc, #680]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4ba9      	ldr	r3, [pc, #676]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004dfe:	49aa      	ldr	r1, [pc, #680]	; (80050a8 <HAL_RCC_OscConfig+0x334>)
 8004e00:	400a      	ands	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	4ba7      	ldr	r3, [pc, #668]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4ba6      	ldr	r3, [pc, #664]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e0a:	49a8      	ldr	r1, [pc, #672]	; (80050ac <HAL_RCC_OscConfig+0x338>)
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e01e      	b.n	8004e50 <HAL_RCC_OscConfig+0xdc>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	d10e      	bne.n	8004e38 <HAL_RCC_OscConfig+0xc4>
 8004e1a:	4ba2      	ldr	r3, [pc, #648]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4ba1      	ldr	r3, [pc, #644]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e20:	2180      	movs	r1, #128	; 0x80
 8004e22:	02c9      	lsls	r1, r1, #11
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	4b9e      	ldr	r3, [pc, #632]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b9d      	ldr	r3, [pc, #628]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e2e:	2180      	movs	r1, #128	; 0x80
 8004e30:	0249      	lsls	r1, r1, #9
 8004e32:	430a      	orrs	r2, r1
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	e00b      	b.n	8004e50 <HAL_RCC_OscConfig+0xdc>
 8004e38:	4b9a      	ldr	r3, [pc, #616]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4b99      	ldr	r3, [pc, #612]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e3e:	499a      	ldr	r1, [pc, #616]	; (80050a8 <HAL_RCC_OscConfig+0x334>)
 8004e40:	400a      	ands	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	4b97      	ldr	r3, [pc, #604]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4b96      	ldr	r3, [pc, #600]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e4a:	4998      	ldr	r1, [pc, #608]	; (80050ac <HAL_RCC_OscConfig+0x338>)
 8004e4c:	400a      	ands	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d014      	beq.n	8004e82 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e58:	f7ff fc6c 	bl	8004734 <HAL_GetTick>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e62:	f7ff fc67 	bl	8004734 <HAL_GetTick>
 8004e66:	0002      	movs	r2, r0
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b64      	cmp	r3, #100	; 0x64
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e28c      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e74:	4b8b      	ldr	r3, [pc, #556]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	d0f0      	beq.n	8004e62 <HAL_RCC_OscConfig+0xee>
 8004e80:	e015      	b.n	8004eae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7ff fc57 	bl	8004734 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7ff fc52 	bl	8004734 <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	; 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e277      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9e:	4b81      	ldr	r3, [pc, #516]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x118>
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d100      	bne.n	8004eba <HAL_RCC_OscConfig+0x146>
 8004eb8:	e069      	b.n	8004f8e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004eba:	4b7a      	ldr	r3, [pc, #488]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	220c      	movs	r2, #12
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ec4:	4b77      	ldr	r3, [pc, #476]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	220c      	movs	r2, #12
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d11c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x196>
 8004ed0:	4b74      	ldr	r3, [pc, #464]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	2380      	movs	r3, #128	; 0x80
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d116      	bne.n	8004f0a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004edc:	4b71      	ldr	r3, [pc, #452]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e24d      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef2:	4b6c      	ldr	r3, [pc, #432]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	22f8      	movs	r2, #248	; 0xf8
 8004ef8:	4393      	bics	r3, r2
 8004efa:	0019      	movs	r1, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	00da      	lsls	r2, r3, #3
 8004f02:	4b68      	ldr	r3, [pc, #416]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f04:	430a      	orrs	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f08:	e041      	b.n	8004f8e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d024      	beq.n	8004f5c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f12:	4b64      	ldr	r3, [pc, #400]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b63      	ldr	r3, [pc, #396]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f18:	2101      	movs	r1, #1
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1e:	f7ff fc09 	bl	8004734 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f28:	f7ff fc04 	bl	8004734 <HAL_GetTick>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e229      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3a:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	4013      	ands	r3, r2
 8004f42:	d0f1      	beq.n	8004f28 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f44:	4b57      	ldr	r3, [pc, #348]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	22f8      	movs	r2, #248	; 0xf8
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	00da      	lsls	r2, r3, #3
 8004f54:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f56:	430a      	orrs	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	e018      	b.n	8004f8e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5c:	4b51      	ldr	r3, [pc, #324]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f62:	2101      	movs	r1, #1
 8004f64:	438a      	bics	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7ff fbe4 	bl	8004734 <HAL_GetTick>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f72:	f7ff fbdf 	bl	8004734 <HAL_GetTick>
 8004f76:	0002      	movs	r2, r0
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e204      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f84:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d1f1      	bne.n	8004f72 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2208      	movs	r2, #8
 8004f94:	4013      	ands	r3, r2
 8004f96:	d036      	beq.n	8005006 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d019      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fa0:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fa4:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fac:	f7ff fbc2 	bl	8004734 <HAL_GetTick>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7ff fbbd 	bl	8004734 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e1e2      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d0f1      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x242>
 8004fd2:	e018      	b.n	8005006 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fd4:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004fda:	2101      	movs	r1, #1
 8004fdc:	438a      	bics	r2, r1
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe0:	f7ff fba8 	bl	8004734 <HAL_GetTick>
 8004fe4:	0003      	movs	r3, r0
 8004fe6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fea:	f7ff fba3 	bl	8004734 <HAL_GetTick>
 8004fee:	0002      	movs	r2, r0
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e1c8      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2202      	movs	r2, #2
 8005002:	4013      	ands	r3, r2
 8005004:	d1f1      	bne.n	8004fea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2204      	movs	r2, #4
 800500c:	4013      	ands	r3, r2
 800500e:	d100      	bne.n	8005012 <HAL_RCC_OscConfig+0x29e>
 8005010:	e0b6      	b.n	8005180 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	231f      	movs	r3, #31
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800501a:	4b22      	ldr	r3, [pc, #136]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	2380      	movs	r3, #128	; 0x80
 8005020:	055b      	lsls	r3, r3, #21
 8005022:	4013      	ands	r3, r2
 8005024:	d111      	bne.n	800504a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8005028:	69da      	ldr	r2, [r3, #28]
 800502a:	4b1e      	ldr	r3, [pc, #120]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	0549      	lsls	r1, r1, #21
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
 8005034:	4b1b      	ldr	r3, [pc, #108]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8005036:	69da      	ldr	r2, [r3, #28]
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	055b      	lsls	r3, r3, #21
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005042:	231f      	movs	r3, #31
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	2201      	movs	r2, #1
 8005048:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800504a:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_OscConfig+0x33c>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d11a      	bne.n	800508c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <HAL_RCC_OscConfig+0x33c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b15      	ldr	r3, [pc, #84]	; (80050b0 <HAL_RCC_OscConfig+0x33c>)
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	0049      	lsls	r1, r1, #1
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005064:	f7ff fb66 	bl	8004734 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506e:	f7ff fb61 	bl	8004734 <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	; 0x64
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e186      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x33c>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4013      	ands	r3, r2
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d10f      	bne.n	80050b4 <HAL_RCC_OscConfig+0x340>
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <HAL_RCC_OscConfig+0x330>)
 800509a:	2101      	movs	r1, #1
 800509c:	430a      	orrs	r2, r1
 800509e:	621a      	str	r2, [r3, #32]
 80050a0:	e036      	b.n	8005110 <HAL_RCC_OscConfig+0x39c>
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	40021000 	.word	0x40021000
 80050a8:	fffeffff 	.word	0xfffeffff
 80050ac:	fffbffff 	.word	0xfffbffff
 80050b0:	40007000 	.word	0x40007000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x362>
 80050bc:	4bb6      	ldr	r3, [pc, #728]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050be:	6a1a      	ldr	r2, [r3, #32]
 80050c0:	4bb5      	ldr	r3, [pc, #724]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050c2:	2101      	movs	r1, #1
 80050c4:	438a      	bics	r2, r1
 80050c6:	621a      	str	r2, [r3, #32]
 80050c8:	4bb3      	ldr	r3, [pc, #716]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	4bb2      	ldr	r3, [pc, #712]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050ce:	2104      	movs	r1, #4
 80050d0:	438a      	bics	r2, r1
 80050d2:	621a      	str	r2, [r3, #32]
 80050d4:	e01c      	b.n	8005110 <HAL_RCC_OscConfig+0x39c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b05      	cmp	r3, #5
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x384>
 80050de:	4bae      	ldr	r3, [pc, #696]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050e0:	6a1a      	ldr	r2, [r3, #32]
 80050e2:	4bad      	ldr	r3, [pc, #692]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050e4:	2104      	movs	r1, #4
 80050e6:	430a      	orrs	r2, r1
 80050e8:	621a      	str	r2, [r3, #32]
 80050ea:	4bab      	ldr	r3, [pc, #684]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050ec:	6a1a      	ldr	r2, [r3, #32]
 80050ee:	4baa      	ldr	r3, [pc, #680]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050f0:	2101      	movs	r1, #1
 80050f2:	430a      	orrs	r2, r1
 80050f4:	621a      	str	r2, [r3, #32]
 80050f6:	e00b      	b.n	8005110 <HAL_RCC_OscConfig+0x39c>
 80050f8:	4ba7      	ldr	r3, [pc, #668]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050fa:	6a1a      	ldr	r2, [r3, #32]
 80050fc:	4ba6      	ldr	r3, [pc, #664]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	621a      	str	r2, [r3, #32]
 8005104:	4ba4      	ldr	r3, [pc, #656]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005106:	6a1a      	ldr	r2, [r3, #32]
 8005108:	4ba3      	ldr	r3, [pc, #652]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800510a:	2104      	movs	r1, #4
 800510c:	438a      	bics	r2, r1
 800510e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d014      	beq.n	8005142 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005118:	f7ff fb0c 	bl	8004734 <HAL_GetTick>
 800511c:	0003      	movs	r3, r0
 800511e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005120:	e009      	b.n	8005136 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005122:	f7ff fb07 	bl	8004734 <HAL_GetTick>
 8005126:	0002      	movs	r2, r0
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	4a9b      	ldr	r2, [pc, #620]	; (800539c <HAL_RCC_OscConfig+0x628>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e12b      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	4b98      	ldr	r3, [pc, #608]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	2202      	movs	r2, #2
 800513c:	4013      	ands	r3, r2
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x3ae>
 8005140:	e013      	b.n	800516a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7ff faf7 	bl	8004734 <HAL_GetTick>
 8005146:	0003      	movs	r3, r0
 8005148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800514a:	e009      	b.n	8005160 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514c:	f7ff faf2 	bl	8004734 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	4a91      	ldr	r2, [pc, #580]	; (800539c <HAL_RCC_OscConfig+0x628>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e116      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	4b8d      	ldr	r3, [pc, #564]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	2202      	movs	r2, #2
 8005166:	4013      	ands	r3, r2
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800516a:	231f      	movs	r3, #31
 800516c:	18fb      	adds	r3, r7, r3
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d105      	bne.n	8005180 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005174:	4b88      	ldr	r3, [pc, #544]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	4b87      	ldr	r3, [pc, #540]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800517a:	4989      	ldr	r1, [pc, #548]	; (80053a0 <HAL_RCC_OscConfig+0x62c>)
 800517c:	400a      	ands	r2, r1
 800517e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2210      	movs	r2, #16
 8005186:	4013      	ands	r3, r2
 8005188:	d063      	beq.n	8005252 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d12a      	bne.n	80051e8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005192:	4b81      	ldr	r3, [pc, #516]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005194:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005196:	4b80      	ldr	r3, [pc, #512]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005198:	2104      	movs	r1, #4
 800519a:	430a      	orrs	r2, r1
 800519c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800519e:	4b7e      	ldr	r3, [pc, #504]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051a2:	4b7d      	ldr	r3, [pc, #500]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051a4:	2101      	movs	r1, #1
 80051a6:	430a      	orrs	r2, r1
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7ff fac3 	bl	8004734 <HAL_GetTick>
 80051ae:	0003      	movs	r3, r0
 80051b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80051b4:	f7ff fabe 	bl	8004734 <HAL_GetTick>
 80051b8:	0002      	movs	r2, r0
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e0e3      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051c6:	4b74      	ldr	r3, [pc, #464]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d0f1      	beq.n	80051b4 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051d0:	4b71      	ldr	r3, [pc, #452]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d4:	22f8      	movs	r2, #248	; 0xf8
 80051d6:	4393      	bics	r3, r2
 80051d8:	0019      	movs	r1, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	00da      	lsls	r2, r3, #3
 80051e0:	4b6d      	ldr	r3, [pc, #436]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051e2:	430a      	orrs	r2, r1
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34
 80051e6:	e034      	b.n	8005252 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	3305      	adds	r3, #5
 80051ee:	d111      	bne.n	8005214 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80051f0:	4b69      	ldr	r3, [pc, #420]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f4:	4b68      	ldr	r3, [pc, #416]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051f6:	2104      	movs	r1, #4
 80051f8:	438a      	bics	r2, r1
 80051fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051fc:	4b66      	ldr	r3, [pc, #408]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	22f8      	movs	r2, #248	; 0xf8
 8005202:	4393      	bics	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	00da      	lsls	r2, r3, #3
 800520c:	4b62      	ldr	r3, [pc, #392]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800520e:	430a      	orrs	r2, r1
 8005210:	635a      	str	r2, [r3, #52]	; 0x34
 8005212:	e01e      	b.n	8005252 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005214:	4b60      	ldr	r3, [pc, #384]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005218:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800521a:	2104      	movs	r1, #4
 800521c:	430a      	orrs	r2, r1
 800521e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005220:	4b5d      	ldr	r3, [pc, #372]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005224:	4b5c      	ldr	r3, [pc, #368]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005226:	2101      	movs	r1, #1
 8005228:	438a      	bics	r2, r1
 800522a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800522c:	f7ff fa82 	bl	8004734 <HAL_GetTick>
 8005230:	0003      	movs	r3, r0
 8005232:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005236:	f7ff fa7d 	bl	8004734 <HAL_GetTick>
 800523a:	0002      	movs	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0a2      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005248:	4b53      	ldr	r3, [pc, #332]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	2202      	movs	r2, #2
 800524e:	4013      	ands	r3, r2
 8005250:	d1f1      	bne.n	8005236 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d100      	bne.n	800525c <HAL_RCC_OscConfig+0x4e8>
 800525a:	e097      	b.n	800538c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800525c:	4b4e      	ldr	r3, [pc, #312]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	220c      	movs	r2, #12
 8005262:	4013      	ands	r3, r2
 8005264:	2b08      	cmp	r3, #8
 8005266:	d100      	bne.n	800526a <HAL_RCC_OscConfig+0x4f6>
 8005268:	e06b      	b.n	8005342 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d14c      	bne.n	800530c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b49      	ldr	r3, [pc, #292]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b48      	ldr	r3, [pc, #288]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005278:	494a      	ldr	r1, [pc, #296]	; (80053a4 <HAL_RCC_OscConfig+0x630>)
 800527a:	400a      	ands	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7ff fa59 	bl	8004734 <HAL_GetTick>
 8005282:	0003      	movs	r3, r0
 8005284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005288:	f7ff fa54 	bl	8004734 <HAL_GetTick>
 800528c:	0002      	movs	r2, r0
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e079      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529a:	4b3f      	ldr	r3, [pc, #252]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	2380      	movs	r3, #128	; 0x80
 80052a0:	049b      	lsls	r3, r3, #18
 80052a2:	4013      	ands	r3, r2
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a6:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	220f      	movs	r2, #15
 80052ac:	4393      	bics	r3, r2
 80052ae:	0019      	movs	r1, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4b38      	ldr	r3, [pc, #224]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052b6:	430a      	orrs	r2, r1
 80052b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80052ba:	4b37      	ldr	r3, [pc, #220]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4a3a      	ldr	r2, [pc, #232]	; (80053a8 <HAL_RCC_OscConfig+0x634>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	431a      	orrs	r2, r3
 80052ce:	4b32      	ldr	r3, [pc, #200]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b30      	ldr	r3, [pc, #192]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	4b2f      	ldr	r3, [pc, #188]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	0449      	lsls	r1, r1, #17
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e2:	f7ff fa27 	bl	8004734 <HAL_GetTick>
 80052e6:	0003      	movs	r3, r0
 80052e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ec:	f7ff fa22 	bl	8004734 <HAL_GetTick>
 80052f0:	0002      	movs	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e047      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052fe:	4b26      	ldr	r3, [pc, #152]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	049b      	lsls	r3, r3, #18
 8005306:	4013      	ands	r3, r2
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x578>
 800530a:	e03f      	b.n	800538c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b22      	ldr	r3, [pc, #136]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005312:	4924      	ldr	r1, [pc, #144]	; (80053a4 <HAL_RCC_OscConfig+0x630>)
 8005314:	400a      	ands	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7ff fa0c 	bl	8004734 <HAL_GetTick>
 800531c:	0003      	movs	r3, r0
 800531e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005322:	f7ff fa07 	bl	8004734 <HAL_GetTick>
 8005326:	0002      	movs	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e02c      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005334:	4b18      	ldr	r3, [pc, #96]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	2380      	movs	r3, #128	; 0x80
 800533a:	049b      	lsls	r3, r3, #18
 800533c:	4013      	ands	r3, r2
 800533e:	d1f0      	bne.n	8005322 <HAL_RCC_OscConfig+0x5ae>
 8005340:	e024      	b.n	800538c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e01f      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800534e:	4b12      	ldr	r3, [pc, #72]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005354:	4b10      	ldr	r3, [pc, #64]	; (8005398 <HAL_RCC_OscConfig+0x624>)
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	025b      	lsls	r3, r3, #9
 8005360:	401a      	ands	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	429a      	cmp	r2, r3
 8005368:	d10e      	bne.n	8005388 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	220f      	movs	r2, #15
 800536e:	401a      	ands	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005374:	429a      	cmp	r2, r3
 8005376:	d107      	bne.n	8005388 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	23f0      	movs	r3, #240	; 0xf0
 800537c:	039b      	lsls	r3, r3, #14
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e000      	b.n	800538e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b008      	add	sp, #32
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	40021000 	.word	0x40021000
 800539c:	00001388 	.word	0x00001388
 80053a0:	efffffff 	.word	0xefffffff
 80053a4:	feffffff 	.word	0xfeffffff
 80053a8:	ffc2ffff 	.word	0xffc2ffff

080053ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0b3      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c0:	4b5b      	ldr	r3, [pc, #364]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	4013      	ands	r3, r2
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d911      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ce:	4b58      	ldr	r3, [pc, #352]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	4393      	bics	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	4b55      	ldr	r3, [pc, #340]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e0:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	4013      	ands	r3, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d001      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e09a      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2202      	movs	r2, #2
 80053f8:	4013      	ands	r3, r2
 80053fa:	d015      	beq.n	8005428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2204      	movs	r2, #4
 8005402:	4013      	ands	r3, r2
 8005404:	d006      	beq.n	8005414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005406:	4b4b      	ldr	r3, [pc, #300]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 800540c:	21e0      	movs	r1, #224	; 0xe0
 800540e:	00c9      	lsls	r1, r1, #3
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005414:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	22f0      	movs	r2, #240	; 0xf0
 800541a:	4393      	bics	r3, r2
 800541c:	0019      	movs	r1, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	4b44      	ldr	r3, [pc, #272]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	d040      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d107      	bne.n	800544a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	029b      	lsls	r3, r3, #10
 8005442:	4013      	ands	r3, r2
 8005444:	d114      	bne.n	8005470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e06e      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d107      	bne.n	8005462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005452:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	2380      	movs	r3, #128	; 0x80
 8005458:	049b      	lsls	r3, r3, #18
 800545a:	4013      	ands	r3, r2
 800545c:	d108      	bne.n	8005470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e062      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005462:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2202      	movs	r2, #2
 8005468:	4013      	ands	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e05b      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005470:	4b30      	ldr	r3, [pc, #192]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2203      	movs	r2, #3
 8005476:	4393      	bics	r3, r2
 8005478:	0019      	movs	r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	4b2d      	ldr	r3, [pc, #180]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005484:	f7ff f956 	bl	8004734 <HAL_GetTick>
 8005488:	0003      	movs	r3, r0
 800548a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548c:	e009      	b.n	80054a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800548e:	f7ff f951 	bl	8004734 <HAL_GetTick>
 8005492:	0002      	movs	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	4a27      	ldr	r2, [pc, #156]	; (8005538 <HAL_RCC_ClockConfig+0x18c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e042      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a2:	4b24      	ldr	r3, [pc, #144]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	220c      	movs	r2, #12
 80054a8:	401a      	ands	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d1ec      	bne.n	800548e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b4:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2201      	movs	r2, #1
 80054ba:	4013      	ands	r3, r2
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d211      	bcs.n	80054e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	4393      	bics	r3, r2
 80054ca:	0019      	movs	r1, r3
 80054cc:	4b18      	ldr	r3, [pc, #96]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <HAL_RCC_ClockConfig+0x184>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2201      	movs	r2, #1
 80054da:	4013      	ands	r3, r2
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e020      	b.n	8005528 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2204      	movs	r2, #4
 80054ec:	4013      	ands	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	4b10      	ldr	r3, [pc, #64]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4a11      	ldr	r2, [pc, #68]	; (800553c <HAL_RCC_ClockConfig+0x190>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005504:	f000 f820 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8005508:	0001      	movs	r1, r0
 800550a:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <HAL_RCC_ClockConfig+0x188>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	091b      	lsrs	r3, r3, #4
 8005510:	220f      	movs	r2, #15
 8005512:	4013      	ands	r3, r2
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <HAL_RCC_ClockConfig+0x194>)
 8005516:	5cd3      	ldrb	r3, [r2, r3]
 8005518:	000a      	movs	r2, r1
 800551a:	40da      	lsrs	r2, r3
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <HAL_RCC_ClockConfig+0x198>)
 800551e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005520:	2000      	movs	r0, #0
 8005522:	f7ff f8c1 	bl	80046a8 <HAL_InitTick>
  
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	0018      	movs	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	b004      	add	sp, #16
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40022000 	.word	0x40022000
 8005534:	40021000 	.word	0x40021000
 8005538:	00001388 	.word	0x00001388
 800553c:	fffff8ff 	.word	0xfffff8ff
 8005540:	08007080 	.word	0x08007080
 8005544:	20000000 	.word	0x20000000

08005548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005548:	b590      	push	{r4, r7, lr}
 800554a:	b08f      	sub	sp, #60	; 0x3c
 800554c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800554e:	2314      	movs	r3, #20
 8005550:	18fb      	adds	r3, r7, r3
 8005552:	4a2b      	ldr	r2, [pc, #172]	; (8005600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005554:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005556:	c313      	stmia	r3!, {r0, r1, r4}
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	4a29      	ldr	r2, [pc, #164]	; (8005604 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005560:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005562:	c313      	stmia	r3!, {r0, r1, r4}
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800556c:	2300      	movs	r3, #0
 800556e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005570:	2300      	movs	r3, #0
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800557c:	4b22      	ldr	r3, [pc, #136]	; (8005608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	220c      	movs	r2, #12
 8005586:	4013      	ands	r3, r2
 8005588:	2b04      	cmp	r3, #4
 800558a:	d002      	beq.n	8005592 <HAL_RCC_GetSysClockFreq+0x4a>
 800558c:	2b08      	cmp	r3, #8
 800558e:	d003      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x50>
 8005590:	e02d      	b.n	80055ee <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005592:	4b1e      	ldr	r3, [pc, #120]	; (800560c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005594:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005596:	e02d      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	220f      	movs	r2, #15
 800559e:	4013      	ands	r3, r2
 80055a0:	2214      	movs	r2, #20
 80055a2:	18ba      	adds	r2, r7, r2
 80055a4:	5cd3      	ldrb	r3, [r2, r3]
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80055a8:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	220f      	movs	r2, #15
 80055ae:	4013      	ands	r3, r2
 80055b0:	1d3a      	adds	r2, r7, #4
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	025b      	lsls	r3, r3, #9
 80055bc:	4013      	ands	r3, r2
 80055be:	d009      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055c2:	4812      	ldr	r0, [pc, #72]	; (800560c <HAL_RCC_GetSysClockFreq+0xc4>)
 80055c4:	f7fa fda0 	bl	8000108 <__udivsi3>
 80055c8:	0003      	movs	r3, r0
 80055ca:	001a      	movs	r2, r3
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	4353      	muls	r3, r2
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
 80055d2:	e009      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80055d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055d6:	000a      	movs	r2, r1
 80055d8:	0152      	lsls	r2, r2, #5
 80055da:	1a52      	subs	r2, r2, r1
 80055dc:	0193      	lsls	r3, r2, #6
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	00db      	lsls	r3, r3, #3
 80055e2:	185b      	adds	r3, r3, r1
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055ec:	e002      	b.n	80055f4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055ee:	4b07      	ldr	r3, [pc, #28]	; (800560c <HAL_RCC_GetSysClockFreq+0xc4>)
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80055f2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80055f6:	0018      	movs	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	b00f      	add	sp, #60	; 0x3c
 80055fc:	bd90      	pop	{r4, r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	08006f20 	.word	0x08006f20
 8005604:	08006f30 	.word	0x08006f30
 8005608:	40021000 	.word	0x40021000
 800560c:	007a1200 	.word	0x007a1200

08005610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005614:	4b02      	ldr	r3, [pc, #8]	; (8005620 <HAL_RCC_GetHCLKFreq+0x10>)
 8005616:	681b      	ldr	r3, [r3, #0]
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	20000000 	.word	0x20000000

08005624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005628:	f7ff fff2 	bl	8005610 <HAL_RCC_GetHCLKFreq>
 800562c:	0001      	movs	r1, r0
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	0a1b      	lsrs	r3, r3, #8
 8005634:	2207      	movs	r2, #7
 8005636:	4013      	ands	r3, r2
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <HAL_RCC_GetPCLK1Freq+0x28>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	40d9      	lsrs	r1, r3
 800563e:	000b      	movs	r3, r1
}    
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	40021000 	.word	0x40021000
 800564c:	08007090 	.word	0x08007090

08005650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	025b      	lsls	r3, r3, #9
 8005668:	4013      	ands	r3, r2
 800566a:	d100      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800566c:	e08f      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800566e:	2317      	movs	r3, #23
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005676:	4b5f      	ldr	r3, [pc, #380]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005678:	69da      	ldr	r2, [r3, #28]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	055b      	lsls	r3, r3, #21
 800567e:	4013      	ands	r3, r2
 8005680:	d111      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005682:	4b5c      	ldr	r3, [pc, #368]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	0549      	lsls	r1, r1, #21
 800568c:	430a      	orrs	r2, r1
 800568e:	61da      	str	r2, [r3, #28]
 8005690:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	055b      	lsls	r3, r3, #21
 8005698:	4013      	ands	r3, r2
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800569e:	2317      	movs	r3, #23
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	2201      	movs	r2, #1
 80056a4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b54      	ldr	r3, [pc, #336]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	2380      	movs	r3, #128	; 0x80
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	d11a      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b51      	ldr	r3, [pc, #324]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80056b8:	2180      	movs	r1, #128	; 0x80
 80056ba:	0049      	lsls	r1, r1, #1
 80056bc:	430a      	orrs	r2, r1
 80056be:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c0:	f7ff f838 	bl	8004734 <HAL_GetTick>
 80056c4:	0003      	movs	r3, r0
 80056c6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ca:	f7ff f833 	bl	8004734 <HAL_GetTick>
 80056ce:	0002      	movs	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b64      	cmp	r3, #100	; 0x64
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e087      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056dc:	4b46      	ldr	r3, [pc, #280]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	005b      	lsls	r3, r3, #1
 80056e4:	4013      	ands	r3, r2
 80056e6:	d0f0      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056e8:	4b42      	ldr	r3, [pc, #264]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	23c0      	movs	r3, #192	; 0xc0
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4013      	ands	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d034      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	23c0      	movs	r3, #192	; 0xc0
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4013      	ands	r3, r2
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	429a      	cmp	r2, r3
 8005708:	d02c      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800570a:	4b3a      	ldr	r3, [pc, #232]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	4a3b      	ldr	r2, [pc, #236]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005710:	4013      	ands	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005714:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800571a:	2180      	movs	r1, #128	; 0x80
 800571c:	0249      	lsls	r1, r1, #9
 800571e:	430a      	orrs	r2, r1
 8005720:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005722:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005728:	4935      	ldr	r1, [pc, #212]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800572a:	400a      	ands	r2, r1
 800572c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800572e:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2201      	movs	r2, #1
 8005738:	4013      	ands	r3, r2
 800573a:	d013      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573c:	f7fe fffa 	bl	8004734 <HAL_GetTick>
 8005740:	0003      	movs	r3, r0
 8005742:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005744:	e009      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fe fff5 	bl	8004734 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e048      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	2202      	movs	r2, #2
 8005760:	4013      	ands	r3, r2
 8005762:	d0f0      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005764:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	4a24      	ldr	r2, [pc, #144]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4b20      	ldr	r3, [pc, #128]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005774:	430a      	orrs	r2, r1
 8005776:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005778:	2317      	movs	r3, #23
 800577a:	18fb      	adds	r3, r7, r3
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d105      	bne.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	4b1b      	ldr	r3, [pc, #108]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005788:	491f      	ldr	r1, [pc, #124]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800578a:	400a      	ands	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	4013      	ands	r3, r2
 8005796:	d009      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005798:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	2203      	movs	r2, #3
 800579e:	4393      	bics	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80057a8:	430a      	orrs	r2, r1
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2220      	movs	r2, #32
 80057b2:	4013      	ands	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ba:	2210      	movs	r2, #16
 80057bc:	4393      	bics	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4013      	ands	r3, r2
 80057d4:	d009      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	2240      	movs	r2, #64	; 0x40
 80057dc:	4393      	bics	r3, r2
 80057de:	0019      	movs	r1, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80057e6:	430a      	orrs	r2, r1
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	0018      	movs	r0, r3
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b006      	add	sp, #24
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	fffffcff 	.word	0xfffffcff
 8005800:	fffeffff 	.word	0xfffeffff
 8005804:	00001388 	.word	0x00001388
 8005808:	efffffff 	.word	0xefffffff

0800580c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e044      	b.n	80058a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2270      	movs	r2, #112	; 0x70
 800582a:	2100      	movs	r1, #0
 800582c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	0018      	movs	r0, r3
 8005832:	f7fe fcff 	bl	8004234 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2224      	movs	r2, #36	; 0x24
 800583a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2101      	movs	r1, #1
 8005848:	438a      	bics	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f000 fc72 	bl	8006138 <UART_SetConfig>
 8005854:	0003      	movs	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e024      	b.n	80058a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 fdeb 	bl	8006444 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	490d      	ldr	r1, [pc, #52]	; (80058b0 <HAL_UART_Init+0xa4>)
 800587a:	400a      	ands	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	212a      	movs	r1, #42	; 0x2a
 800588a:	438a      	bics	r2, r1
 800588c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2101      	movs	r1, #1
 800589a:	430a      	orrs	r2, r1
 800589c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 fe83 	bl	80065ac <UART_CheckIdleState>
 80058a6:	0003      	movs	r3, r0
}
 80058a8:	0018      	movs	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b002      	add	sp, #8
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	ffffb7ff 	.word	0xffffb7ff

080058b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	1dbb      	adds	r3, r7, #6
 80058c2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d000      	beq.n	80058ce <HAL_UART_Transmit+0x1a>
 80058cc:	e095      	b.n	80059fa <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d003      	beq.n	80058dc <HAL_UART_Transmit+0x28>
 80058d4:	1dbb      	adds	r3, r7, #6
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e08d      	b.n	80059fc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d109      	bne.n	8005900 <HAL_UART_Transmit+0x4c>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2201      	movs	r2, #1
 80058f8:	4013      	ands	r3, r2
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e07d      	b.n	80059fc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2270      	movs	r2, #112	; 0x70
 8005904:	5c9b      	ldrb	r3, [r3, r2]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_UART_Transmit+0x5a>
 800590a:	2302      	movs	r3, #2
 800590c:	e076      	b.n	80059fc <HAL_UART_Transmit+0x148>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2270      	movs	r2, #112	; 0x70
 8005912:	2101      	movs	r1, #1
 8005914:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2221      	movs	r2, #33	; 0x21
 8005920:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005922:	f7fe ff07 	bl	8004734 <HAL_GetTick>
 8005926:	0003      	movs	r3, r0
 8005928:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1dba      	adds	r2, r7, #6
 800592e:	2150      	movs	r1, #80	; 0x50
 8005930:	8812      	ldrh	r2, [r2, #0]
 8005932:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1dba      	adds	r2, r7, #6
 8005938:	2152      	movs	r1, #82	; 0x52
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	2380      	movs	r3, #128	; 0x80
 8005944:	015b      	lsls	r3, r3, #5
 8005946:	429a      	cmp	r2, r3
 8005948:	d108      	bne.n	800595c <HAL_UART_Transmit+0xa8>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e003      	b.n	8005964 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005964:	e02d      	b.n	80059c2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	0013      	movs	r3, r2
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	; 0x80
 8005974:	f000 fe60 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d001      	beq.n	8005980 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e03d      	b.n	80059fc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	881a      	ldrh	r2, [r3, #0]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	05d2      	lsls	r2, r2, #23
 8005990:	0dd2      	lsrs	r2, r2, #23
 8005992:	b292      	uxth	r2, r2
 8005994:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	3302      	adds	r3, #2
 800599a:	61bb      	str	r3, [r7, #24]
 800599c:	e008      	b.n	80059b0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	781a      	ldrb	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	b292      	uxth	r2, r2
 80059a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2252      	movs	r2, #82	; 0x52
 80059b4:	5a9b      	ldrh	r3, [r3, r2]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b299      	uxth	r1, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2252      	movs	r2, #82	; 0x52
 80059c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2252      	movs	r2, #82	; 0x52
 80059c6:	5a9b      	ldrh	r3, [r3, r2]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1cb      	bne.n	8005966 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	0013      	movs	r3, r2
 80059d8:	2200      	movs	r2, #0
 80059da:	2140      	movs	r1, #64	; 0x40
 80059dc:	f000 fe2c 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80059e0:	1e03      	subs	r3, r0, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e009      	b.n	80059fc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2270      	movs	r2, #112	; 0x70
 80059f2:	2100      	movs	r1, #0
 80059f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	e000      	b.n	80059fc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
  }
}
 80059fc:	0018      	movs	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	b008      	add	sp, #32
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	1dbb      	adds	r3, r7, #6
 8005a12:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d000      	beq.n	8005a1e <HAL_UART_Receive+0x1a>
 8005a1c:	e0c2      	b.n	8005ba4 <HAL_UART_Receive+0x1a0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <HAL_UART_Receive+0x28>
 8005a24:	1dbb      	adds	r3, r7, #6
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0ba      	b.n	8005ba6 <HAL_UART_Receive+0x1a2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	015b      	lsls	r3, r3, #5
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d109      	bne.n	8005a50 <HAL_UART_Receive+0x4c>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2201      	movs	r2, #1
 8005a48:	4013      	ands	r3, r2
 8005a4a:	d001      	beq.n	8005a50 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0aa      	b.n	8005ba6 <HAL_UART_Receive+0x1a2>
      }
    }

    __HAL_LOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2270      	movs	r2, #112	; 0x70
 8005a54:	5c9b      	ldrb	r3, [r3, r2]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Receive+0x5a>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e0a3      	b.n	8005ba6 <HAL_UART_Receive+0x1a2>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2270      	movs	r2, #112	; 0x70
 8005a62:	2101      	movs	r1, #1
 8005a64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2222      	movs	r2, #34	; 0x22
 8005a70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005a72:	f7fe fe5f 	bl	8004734 <HAL_GetTick>
 8005a76:	0003      	movs	r3, r0
 8005a78:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1dba      	adds	r2, r7, #6
 8005a7e:	2158      	movs	r1, #88	; 0x58
 8005a80:	8812      	ldrh	r2, [r2, #0]
 8005a82:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	1dba      	adds	r2, r7, #6
 8005a88:	215a      	movs	r1, #90	; 0x5a
 8005a8a:	8812      	ldrh	r2, [r2, #0]
 8005a8c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	2380      	movs	r3, #128	; 0x80
 8005a94:	015b      	lsls	r3, r3, #5
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10d      	bne.n	8005ab6 <HAL_UART_Receive+0xb2>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d104      	bne.n	8005aac <HAL_UART_Receive+0xa8>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	225c      	movs	r2, #92	; 0x5c
 8005aa6:	4942      	ldr	r1, [pc, #264]	; (8005bb0 <HAL_UART_Receive+0x1ac>)
 8005aa8:	5299      	strh	r1, [r3, r2]
 8005aaa:	e01a      	b.n	8005ae2 <HAL_UART_Receive+0xde>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	225c      	movs	r2, #92	; 0x5c
 8005ab0:	21ff      	movs	r1, #255	; 0xff
 8005ab2:	5299      	strh	r1, [r3, r2]
 8005ab4:	e015      	b.n	8005ae2 <HAL_UART_Receive+0xde>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_UART_Receive+0xd6>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <HAL_UART_Receive+0xcc>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	225c      	movs	r2, #92	; 0x5c
 8005aca:	21ff      	movs	r1, #255	; 0xff
 8005acc:	5299      	strh	r1, [r3, r2]
 8005ace:	e008      	b.n	8005ae2 <HAL_UART_Receive+0xde>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	225c      	movs	r2, #92	; 0x5c
 8005ad4:	217f      	movs	r1, #127	; 0x7f
 8005ad6:	5299      	strh	r1, [r3, r2]
 8005ad8:	e003      	b.n	8005ae2 <HAL_UART_Receive+0xde>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	225c      	movs	r2, #92	; 0x5c
 8005ade:	2100      	movs	r1, #0
 8005ae0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005ae2:	2312      	movs	r3, #18
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	215c      	movs	r1, #92	; 0x5c
 8005aea:	5a52      	ldrh	r2, [r2, r1]
 8005aec:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	015b      	lsls	r3, r3, #5
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d108      	bne.n	8005b0c <HAL_UART_Receive+0x108>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	e003      	b.n	8005b14 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b14:	e037      	b.n	8005b86 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	0013      	movs	r3, r2
 8005b20:	2200      	movs	r2, #0
 8005b22:	2120      	movs	r1, #32
 8005b24:	f000 fd88 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8005b28:	1e03      	subs	r3, r0, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e03a      	b.n	8005ba6 <HAL_UART_Receive+0x1a2>
      }
      if (pdata8bits == NULL)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10e      	bne.n	8005b54 <HAL_UART_Receive+0x150>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2212      	movs	r2, #18
 8005b40:	18ba      	adds	r2, r7, r2
 8005b42:	8812      	ldrh	r2, [r2, #0]
 8005b44:	4013      	ands	r3, r2
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	3302      	adds	r3, #2
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	e00f      	b.n	8005b74 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2212      	movs	r2, #18
 8005b60:	18ba      	adds	r2, r7, r2
 8005b62:	8812      	ldrh	r2, [r2, #0]
 8005b64:	b2d2      	uxtb	r2, r2
 8005b66:	4013      	ands	r3, r2
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	3301      	adds	r3, #1
 8005b72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	225a      	movs	r2, #90	; 0x5a
 8005b78:	5a9b      	ldrh	r3, [r3, r2]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b299      	uxth	r1, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	225a      	movs	r2, #90	; 0x5a
 8005b84:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	225a      	movs	r2, #90	; 0x5a
 8005b8a:	5a9b      	ldrh	r3, [r3, r2]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1c1      	bne.n	8005b16 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2220      	movs	r2, #32
 8005b96:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2270      	movs	r2, #112	; 0x70
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_UART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b008      	add	sp, #32
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	000001ff 	.word	0x000001ff

08005bb4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	1dbb      	adds	r3, r7, #6
 8005bc0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d000      	beq.n	8005bcc <HAL_UART_Receive_IT+0x18>
 8005bca:	e08b      	b.n	8005ce4 <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_UART_Receive_IT+0x26>
 8005bd2:	1dbb      	adds	r3, r7, #6
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e083      	b.n	8005ce6 <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	015b      	lsls	r3, r3, #5
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d109      	bne.n	8005bfe <HAL_UART_Receive_IT+0x4a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d001      	beq.n	8005bfe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e073      	b.n	8005ce6 <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2270      	movs	r2, #112	; 0x70
 8005c02:	5c9b      	ldrb	r3, [r3, r2]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Receive_IT+0x58>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e06c      	b.n	8005ce6 <HAL_UART_Receive_IT+0x132>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2270      	movs	r2, #112	; 0x70
 8005c10:	2101      	movs	r1, #1
 8005c12:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1dba      	adds	r2, r7, #6
 8005c1e:	2158      	movs	r1, #88	; 0x58
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1dba      	adds	r2, r7, #6
 8005c28:	215a      	movs	r1, #90	; 0x5a
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	2380      	movs	r3, #128	; 0x80
 8005c3a:	015b      	lsls	r3, r3, #5
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d10d      	bne.n	8005c5c <HAL_UART_Receive_IT+0xa8>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <HAL_UART_Receive_IT+0x9e>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	225c      	movs	r2, #92	; 0x5c
 8005c4c:	4928      	ldr	r1, [pc, #160]	; (8005cf0 <HAL_UART_Receive_IT+0x13c>)
 8005c4e:	5299      	strh	r1, [r3, r2]
 8005c50:	e01a      	b.n	8005c88 <HAL_UART_Receive_IT+0xd4>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	225c      	movs	r2, #92	; 0x5c
 8005c56:	21ff      	movs	r1, #255	; 0xff
 8005c58:	5299      	strh	r1, [r3, r2]
 8005c5a:	e015      	b.n	8005c88 <HAL_UART_Receive_IT+0xd4>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10d      	bne.n	8005c80 <HAL_UART_Receive_IT+0xcc>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <HAL_UART_Receive_IT+0xc2>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	225c      	movs	r2, #92	; 0x5c
 8005c70:	21ff      	movs	r1, #255	; 0xff
 8005c72:	5299      	strh	r1, [r3, r2]
 8005c74:	e008      	b.n	8005c88 <HAL_UART_Receive_IT+0xd4>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	225c      	movs	r2, #92	; 0x5c
 8005c7a:	217f      	movs	r1, #127	; 0x7f
 8005c7c:	5299      	strh	r1, [r3, r2]
 8005c7e:	e003      	b.n	8005c88 <HAL_UART_Receive_IT+0xd4>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	225c      	movs	r2, #92	; 0x5c
 8005c84:	2100      	movs	r1, #0
 8005c86:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2222      	movs	r2, #34	; 0x22
 8005c92:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689a      	ldr	r2, [r3, #8]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	015b      	lsls	r3, r3, #5
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d107      	bne.n	8005cc0 <HAL_UART_Receive_IT+0x10c>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d103      	bne.n	8005cc0 <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a0e      	ldr	r2, [pc, #56]	; (8005cf4 <HAL_UART_Receive_IT+0x140>)
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
 8005cbe:	e002      	b.n	8005cc6 <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <HAL_UART_Receive_IT+0x144>)
 8005cc4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2270      	movs	r2, #112	; 0x70
 8005cca:	2100      	movs	r1, #0
 8005ccc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2190      	movs	r1, #144	; 0x90
 8005cda:	0049      	lsls	r1, r1, #1
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	e000      	b.n	8005ce6 <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8005ce4:	2302      	movs	r3, #2
  }
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b004      	add	sp, #16
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	000001ff 	.word	0x000001ff
 8005cf4:	080068d9 	.word	0x080068d9
 8005cf8:	0800681d 	.word	0x0800681d

08005cfc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4927      	ldr	r1, [pc, #156]	; (8005dac <HAL_UART_AbortReceive+0xb0>)
 8005d10:	400a      	ands	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689a      	ldr	r2, [r3, #8]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2101      	movs	r1, #1
 8005d20:	438a      	bics	r2, r1
 8005d22:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d123      	bne.n	8005d7a <HAL_UART_AbortReceive+0x7e>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2140      	movs	r1, #64	; 0x40
 8005d3e:	438a      	bics	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d017      	beq.n	8005d7a <HAL_UART_AbortReceive+0x7e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	2200      	movs	r2, #0
 8005d50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d56:	0018      	movs	r0, r3
 8005d58:	f7fe fdf6 	bl	8004948 <HAL_DMA_Abort>
 8005d5c:	1e03      	subs	r3, r0, #0
 8005d5e:	d00c      	beq.n	8005d7a <HAL_UART_AbortReceive+0x7e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fe fe6d 	bl	8004a44 <HAL_DMA_GetError>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d104      	bne.n	8005d7a <HAL_UART_AbortReceive+0x7e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2210      	movs	r2, #16
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e013      	b.n	8005da2 <HAL_UART_AbortReceive+0xa6>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	225a      	movs	r2, #90	; 0x5a
 8005d7e:	2100      	movs	r1, #0
 8005d80:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	220f      	movs	r2, #15
 8005d88:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699a      	ldr	r2, [r3, #24]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2108      	movs	r1, #8
 8005d96:	430a      	orrs	r2, r1
 8005d98:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	0018      	movs	r0, r3
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b002      	add	sp, #8
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	fffffedf 	.word	0xfffffedf

08005db0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4931      	ldr	r1, [pc, #196]	; (8005e88 <HAL_UART_AbortReceive_IT+0xd8>)
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	438a      	bics	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2240      	movs	r2, #64	; 0x40
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b40      	cmp	r3, #64	; 0x40
 8005de4:	d139      	bne.n	8005e5a <HAL_UART_AbortReceive_IT+0xaa>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2140      	movs	r1, #64	; 0x40
 8005df2:	438a      	bics	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d012      	beq.n	8005e24 <HAL_UART_AbortReceive_IT+0x74>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e02:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <HAL_UART_AbortReceive_IT+0xdc>)
 8005e04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f7fe fdd4 	bl	80049b8 <HAL_DMA_Abort_IT>
 8005e10:	1e03      	subs	r3, r0, #0
 8005e12:	d034      	beq.n	8005e7e <HAL_UART_AbortReceive_IT+0xce>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e1e:	0018      	movs	r0, r3
 8005e20:	4790      	blx	r2
 8005e22:	e02c      	b.n	8005e7e <HAL_UART_AbortReceive_IT+0xce>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	225a      	movs	r2, #90	; 0x5a
 8005e28:	2100      	movs	r1, #0
 8005e2a:	5299      	strh	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	220f      	movs	r2, #15
 8005e38:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2108      	movs	r1, #8
 8005e46:	430a      	orrs	r2, r1
 8005e48:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0018      	movs	r0, r3
 8005e54:	f000 f968 	bl	8006128 <HAL_UART_AbortReceiveCpltCallback>
 8005e58:	e011      	b.n	8005e7e <HAL_UART_AbortReceive_IT+0xce>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	225a      	movs	r2, #90	; 0x5a
 8005e5e:	2100      	movs	r1, #0
 8005e60:	5299      	strh	r1, [r3, r2]

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	220f      	movs	r2, #15
 8005e6e:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2220      	movs	r2, #32
 8005e74:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f955 	bl	8006128 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	0018      	movs	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	b002      	add	sp, #8
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	fffffedf 	.word	0xfffffedf
 8005e8c:	080067a3 	.word	0x080067a3

08005e90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b088      	sub	sp, #32
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4a93      	ldr	r2, [pc, #588]	; (8006100 <HAL_UART_IRQHandler+0x270>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d112      	bne.n	8005ee4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d100      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x48>
 8005ed6:	e10b      	b.n	80060f0 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	0010      	movs	r0, r2
 8005ee0:	4798      	blx	r3
      }
      return;
 8005ee2:	e105      	b.n	80060f0 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d100      	bne.n	8005eec <HAL_UART_IRQHandler+0x5c>
 8005eea:	e0cd      	b.n	8006088 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d105      	bne.n	8005f00 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	2390      	movs	r3, #144	; 0x90
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d100      	bne.n	8005f00 <HAL_UART_IRQHandler+0x70>
 8005efe:	e0c3      	b.n	8006088 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2201      	movs	r2, #1
 8005f04:	4013      	ands	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_UART_IRQHandler+0x96>
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	2380      	movs	r3, #128	; 0x80
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2201      	movs	r2, #1
 8005f18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1e:	2201      	movs	r2, #1
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	d00d      	beq.n	8005f4a <HAL_UART_IRQHandler+0xba>
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2201      	movs	r2, #1
 8005f32:	4013      	ands	r3, r2
 8005f34:	d009      	beq.n	8005f4a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f42:	2204      	movs	r2, #4
 8005f44:	431a      	orrs	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	4013      	ands	r3, r2
 8005f50:	d00d      	beq.n	8005f6e <HAL_UART_IRQHandler+0xde>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2201      	movs	r2, #1
 8005f56:	4013      	ands	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2204      	movs	r2, #4
 8005f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f66:	2202      	movs	r2, #2
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2208      	movs	r2, #8
 8005f72:	4013      	ands	r3, r2
 8005f74:	d011      	beq.n	8005f9a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d103      	bne.n	8005f86 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2201      	movs	r2, #1
 8005f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f84:	d009      	beq.n	8005f9a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f92:	2208      	movs	r2, #8
 8005f94:	431a      	orrs	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00f      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x134>
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	2380      	movs	r3, #128	; 0x80
 8005fa8:	04db      	lsls	r3, r3, #19
 8005faa:	4013      	ands	r3, r2
 8005fac:	d00a      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	0112      	lsls	r2, r2, #4
 8005fb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d100      	bne.n	8005fce <HAL_UART_IRQHandler+0x13e>
 8005fcc:	e092      	b.n	80060f4 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d008      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	0010      	movs	r0, r2
 8005fee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ff4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2240      	movs	r2, #64	; 0x40
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d003      	beq.n	800600c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2228      	movs	r2, #40	; 0x28
 8006008:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800600a:	d033      	beq.n	8006074 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	0018      	movs	r0, r3
 8006010:	f000 fb90 	bl	8006734 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2240      	movs	r2, #64	; 0x40
 800601c:	4013      	ands	r3, r2
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d123      	bne.n	800606a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	438a      	bics	r2, r1
 8006030:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d012      	beq.n	8006060 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603e:	4a31      	ldr	r2, [pc, #196]	; (8006104 <HAL_UART_IRQHandler+0x274>)
 8006040:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006046:	0018      	movs	r0, r3
 8006048:	f7fe fcb6 	bl	80049b8 <HAL_DMA_Abort_IT>
 800604c:	1e03      	subs	r3, r0, #0
 800604e:	d019      	beq.n	8006084 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605a:	0018      	movs	r0, r3
 800605c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800605e:	e011      	b.n	8006084 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f000 f858 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006068:	e00c      	b.n	8006084 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f853 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006072:	e007      	b.n	8006084 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 f84e 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006082:	e037      	b.n	80060f4 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	46c0      	nop			; (mov r8, r8)
    return;
 8006086:	e035      	b.n	80060f4 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	035b      	lsls	r3, r3, #13
 800608e:	4013      	ands	r3, r2
 8006090:	d00e      	beq.n	80060b0 <HAL_UART_IRQHandler+0x220>
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	03db      	lsls	r3, r3, #15
 8006098:	4013      	ands	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	0352      	lsls	r2, r2, #13
 80060a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fc73 	bl	8006994 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ae:	e024      	b.n	80060fa <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2280      	movs	r2, #128	; 0x80
 80060b4:	4013      	ands	r3, r2
 80060b6:	d00d      	beq.n	80060d4 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	4013      	ands	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d017      	beq.n	80060f8 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	0010      	movs	r0, r2
 80060d0:	4798      	blx	r3
    }
    return;
 80060d2:	e011      	b.n	80060f8 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	4013      	ands	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_UART_IRQHandler+0x26a>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	2240      	movs	r2, #64	; 0x40
 80060e0:	4013      	ands	r3, r2
 80060e2:	d00a      	beq.n	80060fa <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 fb7d 	bl	80067e6 <UART_EndTransmit_IT>
    return;
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	e004      	b.n	80060fa <HAL_UART_IRQHandler+0x26a>
      return;
 80060f0:	46c0      	nop			; (mov r8, r8)
 80060f2:	e002      	b.n	80060fa <HAL_UART_IRQHandler+0x26a>
    return;
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	e000      	b.n	80060fa <HAL_UART_IRQHandler+0x26a>
    return;
 80060f8:	46c0      	nop			; (mov r8, r8)
  }

}
 80060fa:	46bd      	mov	sp, r7
 80060fc:	b008      	add	sp, #32
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	0000080f 	.word	0x0000080f
 8006104:	08006775 	.word	0x08006775

08006108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006130:	46c0      	nop			; (mov r8, r8)
 8006132:	46bd      	mov	sp, r7
 8006134:	b002      	add	sp, #8
 8006136:	bd80      	pop	{r7, pc}

08006138 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006144:	2317      	movs	r3, #23
 8006146:	18fb      	adds	r3, r7, r3
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	431a      	orrs	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4aad      	ldr	r2, [pc, #692]	; (8006420 <UART_SetConfig+0x2e8>)
 800616c:	4013      	ands	r3, r2
 800616e:	0019      	movs	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	4aa8      	ldr	r2, [pc, #672]	; (8006424 <UART_SetConfig+0x2ec>)
 8006182:	4013      	ands	r3, r2
 8006184:	0019      	movs	r1, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	4a9f      	ldr	r2, [pc, #636]	; (8006428 <UART_SetConfig+0x2f0>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	0019      	movs	r1, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a9b      	ldr	r2, [pc, #620]	; (800642c <UART_SetConfig+0x2f4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d125      	bne.n	800620e <UART_SetConfig+0xd6>
 80061c2:	4b9b      	ldr	r3, [pc, #620]	; (8006430 <UART_SetConfig+0x2f8>)
 80061c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c6:	2203      	movs	r2, #3
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d00f      	beq.n	80061ee <UART_SetConfig+0xb6>
 80061ce:	d304      	bcc.n	80061da <UART_SetConfig+0xa2>
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d011      	beq.n	80061f8 <UART_SetConfig+0xc0>
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d005      	beq.n	80061e4 <UART_SetConfig+0xac>
 80061d8:	e013      	b.n	8006202 <UART_SetConfig+0xca>
 80061da:	231f      	movs	r3, #31
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e022      	b.n	800622a <UART_SetConfig+0xf2>
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2202      	movs	r2, #2
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e01d      	b.n	800622a <UART_SetConfig+0xf2>
 80061ee:	231f      	movs	r3, #31
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	2204      	movs	r2, #4
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e018      	b.n	800622a <UART_SetConfig+0xf2>
 80061f8:	231f      	movs	r3, #31
 80061fa:	18fb      	adds	r3, r7, r3
 80061fc:	2208      	movs	r2, #8
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	e013      	b.n	800622a <UART_SetConfig+0xf2>
 8006202:	231f      	movs	r3, #31
 8006204:	18fb      	adds	r3, r7, r3
 8006206:	2210      	movs	r2, #16
 8006208:	701a      	strb	r2, [r3, #0]
 800620a:	46c0      	nop			; (mov r8, r8)
 800620c:	e00d      	b.n	800622a <UART_SetConfig+0xf2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a88      	ldr	r2, [pc, #544]	; (8006434 <UART_SetConfig+0x2fc>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d104      	bne.n	8006222 <UART_SetConfig+0xea>
 8006218:	231f      	movs	r3, #31
 800621a:	18fb      	adds	r3, r7, r3
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	e003      	b.n	800622a <UART_SetConfig+0xf2>
 8006222:	231f      	movs	r3, #31
 8006224:	18fb      	adds	r3, r7, r3
 8006226:	2210      	movs	r2, #16
 8006228:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	429a      	cmp	r2, r3
 8006234:	d000      	beq.n	8006238 <UART_SetConfig+0x100>
 8006236:	e07d      	b.n	8006334 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8006238:	231f      	movs	r3, #31
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	2b02      	cmp	r3, #2
 8006240:	d01c      	beq.n	800627c <UART_SetConfig+0x144>
 8006242:	dc02      	bgt.n	800624a <UART_SetConfig+0x112>
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <UART_SetConfig+0x11c>
 8006248:	e04b      	b.n	80062e2 <UART_SetConfig+0x1aa>
 800624a:	2b04      	cmp	r3, #4
 800624c:	d025      	beq.n	800629a <UART_SetConfig+0x162>
 800624e:	2b08      	cmp	r3, #8
 8006250:	d037      	beq.n	80062c2 <UART_SetConfig+0x18a>
 8006252:	e046      	b.n	80062e2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006254:	f7ff f9e6 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006258:	0003      	movs	r3, r0
 800625a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	005a      	lsls	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	18d2      	adds	r2, r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	0019      	movs	r1, r3
 800626e:	0010      	movs	r0, r2
 8006270:	f7f9 ff4a 	bl	8000108 <__udivsi3>
 8006274:	0003      	movs	r3, r0
 8006276:	b29b      	uxth	r3, r3
 8006278:	61bb      	str	r3, [r7, #24]
        break;
 800627a:	e037      	b.n	80062ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	085b      	lsrs	r3, r3, #1
 8006282:	4a6d      	ldr	r2, [pc, #436]	; (8006438 <UART_SetConfig+0x300>)
 8006284:	189a      	adds	r2, r3, r2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	0019      	movs	r1, r3
 800628c:	0010      	movs	r0, r2
 800628e:	f7f9 ff3b 	bl	8000108 <__udivsi3>
 8006292:	0003      	movs	r3, r0
 8006294:	b29b      	uxth	r3, r3
 8006296:	61bb      	str	r3, [r7, #24]
        break;
 8006298:	e028      	b.n	80062ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7ff f955 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 800629e:	0003      	movs	r3, r0
 80062a0:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	005a      	lsls	r2, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	085b      	lsrs	r3, r3, #1
 80062ac:	18d2      	adds	r2, r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	0019      	movs	r1, r3
 80062b4:	0010      	movs	r0, r2
 80062b6:	f7f9 ff27 	bl	8000108 <__udivsi3>
 80062ba:	0003      	movs	r3, r0
 80062bc:	b29b      	uxth	r3, r3
 80062be:	61bb      	str	r3, [r7, #24]
        break;
 80062c0:	e014      	b.n	80062ec <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	2280      	movs	r2, #128	; 0x80
 80062ca:	0252      	lsls	r2, r2, #9
 80062cc:	189a      	adds	r2, r3, r2
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	0019      	movs	r1, r3
 80062d4:	0010      	movs	r0, r2
 80062d6:	f7f9 ff17 	bl	8000108 <__udivsi3>
 80062da:	0003      	movs	r3, r0
 80062dc:	b29b      	uxth	r3, r3
 80062de:	61bb      	str	r3, [r7, #24]
        break;
 80062e0:	e004      	b.n	80062ec <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80062e2:	2317      	movs	r3, #23
 80062e4:	18fb      	adds	r3, r7, r3
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
        break;
 80062ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b0f      	cmp	r3, #15
 80062f0:	d91b      	bls.n	800632a <UART_SetConfig+0x1f2>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	4a51      	ldr	r2, [pc, #324]	; (800643c <UART_SetConfig+0x304>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d817      	bhi.n	800632a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	200a      	movs	r0, #10
 8006300:	183b      	adds	r3, r7, r0
 8006302:	210f      	movs	r1, #15
 8006304:	438a      	bics	r2, r1
 8006306:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	2207      	movs	r2, #7
 8006310:	4013      	ands	r3, r2
 8006312:	b299      	uxth	r1, r3
 8006314:	183b      	adds	r3, r7, r0
 8006316:	183a      	adds	r2, r7, r0
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	183a      	adds	r2, r7, r0
 8006324:	8812      	ldrh	r2, [r2, #0]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	e06c      	b.n	8006404 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800632a:	2317      	movs	r3, #23
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	2201      	movs	r2, #1
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e067      	b.n	8006404 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8006334:	231f      	movs	r3, #31
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d01b      	beq.n	8006376 <UART_SetConfig+0x23e>
 800633e:	dc02      	bgt.n	8006346 <UART_SetConfig+0x20e>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <UART_SetConfig+0x218>
 8006344:	e049      	b.n	80063da <UART_SetConfig+0x2a2>
 8006346:	2b04      	cmp	r3, #4
 8006348:	d024      	beq.n	8006394 <UART_SetConfig+0x25c>
 800634a:	2b08      	cmp	r3, #8
 800634c:	d035      	beq.n	80063ba <UART_SetConfig+0x282>
 800634e:	e044      	b.n	80063da <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7ff f968 	bl	8005624 <HAL_RCC_GetPCLK1Freq>
 8006354:	0003      	movs	r3, r0
 8006356:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	085a      	lsrs	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	18d2      	adds	r2, r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	0019      	movs	r1, r3
 8006368:	0010      	movs	r0, r2
 800636a:	f7f9 fecd 	bl	8000108 <__udivsi3>
 800636e:	0003      	movs	r3, r0
 8006370:	b29b      	uxth	r3, r3
 8006372:	61bb      	str	r3, [r7, #24]
        break;
 8006374:	e036      	b.n	80063e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	4a30      	ldr	r2, [pc, #192]	; (8006440 <UART_SetConfig+0x308>)
 800637e:	189a      	adds	r2, r3, r2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	0019      	movs	r1, r3
 8006386:	0010      	movs	r0, r2
 8006388:	f7f9 febe 	bl	8000108 <__udivsi3>
 800638c:	0003      	movs	r3, r0
 800638e:	b29b      	uxth	r3, r3
 8006390:	61bb      	str	r3, [r7, #24]
        break;
 8006392:	e027      	b.n	80063e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006394:	f7ff f8d8 	bl	8005548 <HAL_RCC_GetSysClockFreq>
 8006398:	0003      	movs	r3, r0
 800639a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	085a      	lsrs	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	18d2      	adds	r2, r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	0019      	movs	r1, r3
 80063ac:	0010      	movs	r0, r2
 80063ae:	f7f9 feab 	bl	8000108 <__udivsi3>
 80063b2:	0003      	movs	r3, r0
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	61bb      	str	r3, [r7, #24]
        break;
 80063b8:	e014      	b.n	80063e4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	0212      	lsls	r2, r2, #8
 80063c4:	189a      	adds	r2, r3, r2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	0019      	movs	r1, r3
 80063cc:	0010      	movs	r0, r2
 80063ce:	f7f9 fe9b 	bl	8000108 <__udivsi3>
 80063d2:	0003      	movs	r3, r0
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	61bb      	str	r3, [r7, #24]
        break;
 80063d8:	e004      	b.n	80063e4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80063da:	2317      	movs	r3, #23
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
        break;
 80063e2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	d908      	bls.n	80063fc <UART_SetConfig+0x2c4>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	4a13      	ldr	r2, [pc, #76]	; (800643c <UART_SetConfig+0x304>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d804      	bhi.n	80063fc <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e003      	b.n	8006404 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80063fc:	2317      	movs	r3, #23
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	2201      	movs	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006410:	2317      	movs	r3, #23
 8006412:	18fb      	adds	r3, r7, r3
 8006414:	781b      	ldrb	r3, [r3, #0]
}
 8006416:	0018      	movs	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	b008      	add	sp, #32
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	ffff69f3 	.word	0xffff69f3
 8006424:	ffffcfff 	.word	0xffffcfff
 8006428:	fffff4ff 	.word	0xfffff4ff
 800642c:	40013800 	.word	0x40013800
 8006430:	40021000 	.word	0x40021000
 8006434:	40004400 	.word	0x40004400
 8006438:	00f42400 	.word	0x00f42400
 800643c:	0000ffff 	.word	0x0000ffff
 8006440:	007a1200 	.word	0x007a1200

08006444 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2201      	movs	r2, #1
 8006452:	4013      	ands	r3, r2
 8006454:	d00b      	beq.n	800646e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4a4a      	ldr	r2, [pc, #296]	; (8006588 <UART_AdvFeatureConfig+0x144>)
 800645e:	4013      	ands	r3, r2
 8006460:	0019      	movs	r1, r3
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	2202      	movs	r2, #2
 8006474:	4013      	ands	r3, r2
 8006476:	d00b      	beq.n	8006490 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4a43      	ldr	r2, [pc, #268]	; (800658c <UART_AdvFeatureConfig+0x148>)
 8006480:	4013      	ands	r3, r2
 8006482:	0019      	movs	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	2204      	movs	r2, #4
 8006496:	4013      	ands	r3, r2
 8006498:	d00b      	beq.n	80064b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	4a3b      	ldr	r2, [pc, #236]	; (8006590 <UART_AdvFeatureConfig+0x14c>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	0019      	movs	r1, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	2208      	movs	r2, #8
 80064b8:	4013      	ands	r3, r2
 80064ba:	d00b      	beq.n	80064d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4a34      	ldr	r2, [pc, #208]	; (8006594 <UART_AdvFeatureConfig+0x150>)
 80064c4:	4013      	ands	r3, r2
 80064c6:	0019      	movs	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d8:	2210      	movs	r2, #16
 80064da:	4013      	ands	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	4a2c      	ldr	r2, [pc, #176]	; (8006598 <UART_AdvFeatureConfig+0x154>)
 80064e6:	4013      	ands	r3, r2
 80064e8:	0019      	movs	r1, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	430a      	orrs	r2, r1
 80064f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2220      	movs	r2, #32
 80064fc:	4013      	ands	r3, r2
 80064fe:	d00b      	beq.n	8006518 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	4a25      	ldr	r2, [pc, #148]	; (800659c <UART_AdvFeatureConfig+0x158>)
 8006508:	4013      	ands	r3, r2
 800650a:	0019      	movs	r1, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2240      	movs	r2, #64	; 0x40
 800651e:	4013      	ands	r3, r2
 8006520:	d01d      	beq.n	800655e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <UART_AdvFeatureConfig+0x15c>)
 800652a:	4013      	ands	r3, r2
 800652c:	0019      	movs	r1, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	035b      	lsls	r3, r3, #13
 8006542:	429a      	cmp	r2, r3
 8006544:	d10b      	bne.n	800655e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <UART_AdvFeatureConfig+0x160>)
 800654e:	4013      	ands	r3, r2
 8006550:	0019      	movs	r1, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	4013      	ands	r3, r2
 8006566:	d00b      	beq.n	8006580 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	4a0e      	ldr	r2, [pc, #56]	; (80065a8 <UART_AdvFeatureConfig+0x164>)
 8006570:	4013      	ands	r3, r2
 8006572:	0019      	movs	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}
 8006588:	fffdffff 	.word	0xfffdffff
 800658c:	fffeffff 	.word	0xfffeffff
 8006590:	fffbffff 	.word	0xfffbffff
 8006594:	ffff7fff 	.word	0xffff7fff
 8006598:	ffffefff 	.word	0xffffefff
 800659c:	ffffdfff 	.word	0xffffdfff
 80065a0:	ffefffff 	.word	0xffefffff
 80065a4:	ff9fffff 	.word	0xff9fffff
 80065a8:	fff7ffff 	.word	0xfff7ffff

080065ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af02      	add	r7, sp, #8
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80065ba:	f7fe f8bb 	bl	8004734 <HAL_GetTick>
 80065be:	0003      	movs	r3, r0
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2208      	movs	r2, #8
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d10d      	bne.n	80065ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	0399      	lsls	r1, r3, #14
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	4b16      	ldr	r3, [pc, #88]	; (8006634 <UART_CheckIdleState+0x88>)
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	0013      	movs	r3, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	f000 f82a 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d001      	beq.n	80065ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e01f      	b.n	800662c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2204      	movs	r2, #4
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b04      	cmp	r3, #4
 80065f8:	d10d      	bne.n	8006616 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	03d9      	lsls	r1, r3, #15
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <UART_CheckIdleState+0x88>)
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	0013      	movs	r3, r2
 8006608:	2200      	movs	r2, #0
 800660a:	f000 f815 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 800660e:	1e03      	subs	r3, r0, #0
 8006610:	d001      	beq.n	8006616 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e00a      	b.n	800662c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2270      	movs	r2, #112	; 0x70
 8006626:	2100      	movs	r1, #0
 8006628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	0018      	movs	r0, r3
 800662e:	46bd      	mov	sp, r7
 8006630:	b004      	add	sp, #16
 8006632:	bd80      	pop	{r7, pc}
 8006634:	01ffffff 	.word	0x01ffffff

08006638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	1dfb      	adds	r3, r7, #7
 8006646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	e05d      	b.n	8006706 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	3301      	adds	r3, #1
 800664e:	d05a      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006650:	f7fe f870 	bl	8004734 <HAL_GetTick>
 8006654:	0002      	movs	r2, r0
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	d302      	bcc.n	8006666 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d11b      	bne.n	800669e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	492f      	ldr	r1, [pc, #188]	; (8006730 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006672:	400a      	ands	r2, r1
 8006674:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	438a      	bics	r2, r1
 8006684:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2220      	movs	r2, #32
 800668a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2220      	movs	r2, #32
 8006690:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2270      	movs	r2, #112	; 0x70
 8006696:	2100      	movs	r1, #0
 8006698:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e043      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2204      	movs	r2, #4
 80066a6:	4013      	ands	r3, r2
 80066a8:	d02d      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	401a      	ands	r2, r3
 80066b6:	2380      	movs	r3, #128	; 0x80
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d123      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2280      	movs	r2, #128	; 0x80
 80066c4:	0112      	lsls	r2, r2, #4
 80066c6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4917      	ldr	r1, [pc, #92]	; (8006730 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80066d4:	400a      	ands	r2, r1
 80066d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2101      	movs	r1, #1
 80066e4:	438a      	bics	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2220      	movs	r2, #32
 80066f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2220      	movs	r2, #32
 80066f8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2270      	movs	r2, #112	; 0x70
 80066fe:	2100      	movs	r1, #0
 8006700:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e00f      	b.n	8006726 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	4013      	ands	r3, r2
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	425a      	negs	r2, r3
 8006716:	4153      	adcs	r3, r2
 8006718:	b2db      	uxtb	r3, r3
 800671a:	001a      	movs	r2, r3
 800671c:	1dfb      	adds	r3, r7, #7
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	429a      	cmp	r2, r3
 8006722:	d092      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			; (mov r8, r8)
 8006730:	fffffe5f 	.word	0xfffffe5f

08006734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	490a      	ldr	r1, [pc, #40]	; (8006770 <UART_EndRxTransfer+0x3c>)
 8006748:	400a      	ands	r2, r1
 800674a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2101      	movs	r1, #1
 8006758:	438a      	bics	r2, r1
 800675a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b002      	add	sp, #8
 800676e:	bd80      	pop	{r7, pc}
 8006770:	fffffedf 	.word	0xfffffedf

08006774 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	225a      	movs	r2, #90	; 0x5a
 8006786:	2100      	movs	r1, #0
 8006788:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2252      	movs	r2, #82	; 0x52
 800678e:	2100      	movs	r1, #0
 8006790:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	0018      	movs	r0, r3
 8006796:	f7ff fcbf 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	46bd      	mov	sp, r7
 800679e:	b004      	add	sp, #16
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	225a      	movs	r2, #90	; 0x5a
 80067b4:	2100      	movs	r1, #0
 80067b6:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	220f      	movs	r2, #15
 80067be:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2108      	movs	r1, #8
 80067cc:	430a      	orrs	r2, r1
 80067ce:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0018      	movs	r0, r3
 80067da:	f7ff fca5 	bl	8006128 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067de:	46c0      	nop			; (mov r8, r8)
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b004      	add	sp, #16
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2140      	movs	r1, #64	; 0x40
 80067fa:	438a      	bics	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f7ff fc7b 	bl	8006108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006812:	46c0      	nop			; (mov r8, r8)
 8006814:	46bd      	mov	sp, r7
 8006816:	b002      	add	sp, #8
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006824:	230e      	movs	r3, #14
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	215c      	movs	r1, #92	; 0x5c
 800682c:	5a52      	ldrh	r2, [r2, r1]
 800682e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006834:	2b22      	cmp	r3, #34	; 0x22
 8006836:	d140      	bne.n	80068ba <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	210c      	movs	r1, #12
 800683e:	187b      	adds	r3, r7, r1
 8006840:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006842:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006844:	187b      	adds	r3, r7, r1
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	230e      	movs	r3, #14
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	b2d9      	uxtb	r1, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	400a      	ands	r2, r1
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006860:	1c5a      	adds	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	225a      	movs	r2, #90	; 0x5a
 800686a:	5a9b      	ldrh	r3, [r3, r2]
 800686c:	b29b      	uxth	r3, r3
 800686e:	3b01      	subs	r3, #1
 8006870:	b299      	uxth	r1, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	225a      	movs	r2, #90	; 0x5a
 8006876:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	225a      	movs	r2, #90	; 0x5a
 800687c:	5a9b      	ldrh	r3, [r3, r2]
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d122      	bne.n	80068ca <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4911      	ldr	r1, [pc, #68]	; (80068d4 <UART_RxISR_8BIT+0xb8>)
 8006890:	400a      	ands	r2, r1
 8006892:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2101      	movs	r1, #1
 80068a0:	438a      	bics	r2, r1
 80068a2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fc fbc8 	bl	8003048 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068b8:	e007      	b.n	80068ca <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699a      	ldr	r2, [r3, #24]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2108      	movs	r1, #8
 80068c6:	430a      	orrs	r2, r1
 80068c8:	619a      	str	r2, [r3, #24]
}
 80068ca:	46c0      	nop			; (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b004      	add	sp, #16
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	fffffedf 	.word	0xfffffedf

080068d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80068e0:	230e      	movs	r3, #14
 80068e2:	18fb      	adds	r3, r7, r3
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	215c      	movs	r1, #92	; 0x5c
 80068e8:	5a52      	ldrh	r2, [r2, r1]
 80068ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f0:	2b22      	cmp	r3, #34	; 0x22
 80068f2:	d140      	bne.n	8006976 <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	210c      	movs	r1, #12
 80068fa:	187b      	adds	r3, r7, r1
 80068fc:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80068fe:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006904:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006906:	187b      	adds	r3, r7, r1
 8006908:	220e      	movs	r2, #14
 800690a:	18ba      	adds	r2, r7, r2
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	8812      	ldrh	r2, [r2, #0]
 8006910:	4013      	ands	r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691c:	1c9a      	adds	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	225a      	movs	r2, #90	; 0x5a
 8006926:	5a9b      	ldrh	r3, [r3, r2]
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b299      	uxth	r1, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	225a      	movs	r2, #90	; 0x5a
 8006932:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	225a      	movs	r2, #90	; 0x5a
 8006938:	5a9b      	ldrh	r3, [r3, r2]
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d122      	bne.n	8006986 <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4911      	ldr	r1, [pc, #68]	; (8006990 <UART_RxISR_16BIT+0xb8>)
 800694c:	400a      	ands	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2101      	movs	r1, #1
 800695c:	438a      	bics	r2, r1
 800695e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	0018      	movs	r0, r3
 8006970:	f7fc fb6a 	bl	8003048 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006974:	e007      	b.n	8006986 <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2108      	movs	r1, #8
 8006982:	430a      	orrs	r2, r1
 8006984:	619a      	str	r2, [r3, #24]
}
 8006986:	46c0      	nop			; (mov r8, r8)
 8006988:	46bd      	mov	sp, r7
 800698a:	b004      	add	sp, #16
 800698c:	bd80      	pop	{r7, pc}
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	fffffedf 	.word	0xfffffedf

08006994 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800699c:	46c0      	nop			; (mov r8, r8)
 800699e:	46bd      	mov	sp, r7
 80069a0:	b002      	add	sp, #8
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <atoi>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	220a      	movs	r2, #10
 80069a8:	2100      	movs	r1, #0
 80069aa:	f000 f8f3 	bl	8006b94 <strtol>
 80069ae:	bd10      	pop	{r4, pc}

080069b0 <__libc_init_array>:
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	2600      	movs	r6, #0
 80069b4:	4d0c      	ldr	r5, [pc, #48]	; (80069e8 <__libc_init_array+0x38>)
 80069b6:	4c0d      	ldr	r4, [pc, #52]	; (80069ec <__libc_init_array+0x3c>)
 80069b8:	1b64      	subs	r4, r4, r5
 80069ba:	10a4      	asrs	r4, r4, #2
 80069bc:	42a6      	cmp	r6, r4
 80069be:	d109      	bne.n	80069d4 <__libc_init_array+0x24>
 80069c0:	2600      	movs	r6, #0
 80069c2:	f000 f9a1 	bl	8006d08 <_init>
 80069c6:	4d0a      	ldr	r5, [pc, #40]	; (80069f0 <__libc_init_array+0x40>)
 80069c8:	4c0a      	ldr	r4, [pc, #40]	; (80069f4 <__libc_init_array+0x44>)
 80069ca:	1b64      	subs	r4, r4, r5
 80069cc:	10a4      	asrs	r4, r4, #2
 80069ce:	42a6      	cmp	r6, r4
 80069d0:	d105      	bne.n	80069de <__libc_init_array+0x2e>
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
 80069d4:	00b3      	lsls	r3, r6, #2
 80069d6:	58eb      	ldr	r3, [r5, r3]
 80069d8:	4798      	blx	r3
 80069da:	3601      	adds	r6, #1
 80069dc:	e7ee      	b.n	80069bc <__libc_init_array+0xc>
 80069de:	00b3      	lsls	r3, r6, #2
 80069e0:	58eb      	ldr	r3, [r5, r3]
 80069e2:	4798      	blx	r3
 80069e4:	3601      	adds	r6, #1
 80069e6:	e7f2      	b.n	80069ce <__libc_init_array+0x1e>
 80069e8:	080071c8 	.word	0x080071c8
 80069ec:	080071c8 	.word	0x080071c8
 80069f0:	080071c8 	.word	0x080071c8
 80069f4:	080071cc 	.word	0x080071cc

080069f8 <__itoa>:
 80069f8:	1e93      	subs	r3, r2, #2
 80069fa:	b510      	push	{r4, lr}
 80069fc:	000c      	movs	r4, r1
 80069fe:	2b22      	cmp	r3, #34	; 0x22
 8006a00:	d904      	bls.n	8006a0c <__itoa+0x14>
 8006a02:	2300      	movs	r3, #0
 8006a04:	001c      	movs	r4, r3
 8006a06:	700b      	strb	r3, [r1, #0]
 8006a08:	0020      	movs	r0, r4
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	2a0a      	cmp	r2, #10
 8006a0e:	d109      	bne.n	8006a24 <__itoa+0x2c>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	da07      	bge.n	8006a24 <__itoa+0x2c>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	700b      	strb	r3, [r1, #0]
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4240      	negs	r0, r0
 8006a1c:	1861      	adds	r1, r4, r1
 8006a1e:	f000 f8cd 	bl	8006bbc <__utoa>
 8006a22:	e7f1      	b.n	8006a08 <__itoa+0x10>
 8006a24:	2100      	movs	r1, #0
 8006a26:	e7f9      	b.n	8006a1c <__itoa+0x24>

08006a28 <itoa>:
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	f7ff ffe5 	bl	80069f8 <__itoa>
 8006a2e:	bd10      	pop	{r4, pc}

08006a30 <memset>:
 8006a30:	0003      	movs	r3, r0
 8006a32:	1812      	adds	r2, r2, r0
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d100      	bne.n	8006a3a <memset+0xa>
 8006a38:	4770      	bx	lr
 8006a3a:	7019      	strb	r1, [r3, #0]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	e7f9      	b.n	8006a34 <memset+0x4>

08006a40 <strchr>:
 8006a40:	b2c9      	uxtb	r1, r1
 8006a42:	7803      	ldrb	r3, [r0, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <strchr+0x12>
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	d100      	bne.n	8006a4e <strchr+0xe>
 8006a4c:	4770      	bx	lr
 8006a4e:	3001      	adds	r0, #1
 8006a50:	e7f7      	b.n	8006a42 <strchr+0x2>
 8006a52:	424b      	negs	r3, r1
 8006a54:	4159      	adcs	r1, r3
 8006a56:	4249      	negs	r1, r1
 8006a58:	4008      	ands	r0, r1
 8006a5a:	e7f7      	b.n	8006a4c <strchr+0xc>

08006a5c <strstr>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	7803      	ldrb	r3, [r0, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10f      	bne.n	8006a84 <strstr+0x28>
 8006a64:	780b      	ldrb	r3, [r1, #0]
 8006a66:	425a      	negs	r2, r3
 8006a68:	4153      	adcs	r3, r2
 8006a6a:	425b      	negs	r3, r3
 8006a6c:	4018      	ands	r0, r3
 8006a6e:	bd10      	pop	{r4, pc}
 8006a70:	2300      	movs	r3, #0
 8006a72:	5cca      	ldrb	r2, [r1, r3]
 8006a74:	2a00      	cmp	r2, #0
 8006a76:	d0fa      	beq.n	8006a6e <strstr+0x12>
 8006a78:	5cc4      	ldrb	r4, [r0, r3]
 8006a7a:	4294      	cmp	r4, r2
 8006a7c:	d101      	bne.n	8006a82 <strstr+0x26>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	e7f7      	b.n	8006a72 <strstr+0x16>
 8006a82:	3001      	adds	r0, #1
 8006a84:	7803      	ldrb	r3, [r0, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1f2      	bne.n	8006a70 <strstr+0x14>
 8006a8a:	0018      	movs	r0, r3
 8006a8c:	e7ef      	b.n	8006a6e <strstr+0x12>
	...

08006a90 <_strtol_l.isra.0>:
 8006a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a92:	001f      	movs	r7, r3
 8006a94:	000e      	movs	r6, r1
 8006a96:	b087      	sub	sp, #28
 8006a98:	9005      	str	r0, [sp, #20]
 8006a9a:	9101      	str	r1, [sp, #4]
 8006a9c:	9202      	str	r2, [sp, #8]
 8006a9e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006aa0:	7834      	ldrb	r4, [r6, #0]
 8006aa2:	f000 f8bd 	bl	8006c20 <__locale_ctype_ptr_l>
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	1900      	adds	r0, r0, r4
 8006aaa:	7843      	ldrb	r3, [r0, #1]
 8006aac:	1c75      	adds	r5, r6, #1
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d136      	bne.n	8006b20 <_strtol_l.isra.0+0x90>
 8006ab2:	2c2d      	cmp	r4, #45	; 0x2d
 8006ab4:	d136      	bne.n	8006b24 <_strtol_l.isra.0+0x94>
 8006ab6:	1cb5      	adds	r5, r6, #2
 8006ab8:	7874      	ldrb	r4, [r6, #1]
 8006aba:	2601      	movs	r6, #1
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d062      	beq.n	8006b86 <_strtol_l.isra.0+0xf6>
 8006ac0:	2f10      	cmp	r7, #16
 8006ac2:	d109      	bne.n	8006ad8 <_strtol_l.isra.0+0x48>
 8006ac4:	2c30      	cmp	r4, #48	; 0x30
 8006ac6:	d107      	bne.n	8006ad8 <_strtol_l.isra.0+0x48>
 8006ac8:	2220      	movs	r2, #32
 8006aca:	782b      	ldrb	r3, [r5, #0]
 8006acc:	4393      	bics	r3, r2
 8006ace:	2b58      	cmp	r3, #88	; 0x58
 8006ad0:	d154      	bne.n	8006b7c <_strtol_l.isra.0+0xec>
 8006ad2:	2710      	movs	r7, #16
 8006ad4:	786c      	ldrb	r4, [r5, #1]
 8006ad6:	3502      	adds	r5, #2
 8006ad8:	4b2d      	ldr	r3, [pc, #180]	; (8006b90 <_strtol_l.isra.0+0x100>)
 8006ada:	0039      	movs	r1, r7
 8006adc:	18f3      	adds	r3, r6, r3
 8006ade:	0018      	movs	r0, r3
 8006ae0:	9303      	str	r3, [sp, #12]
 8006ae2:	f7f9 fb97 	bl	8000214 <__aeabi_uidivmod>
 8006ae6:	9104      	str	r1, [sp, #16]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	2300      	movs	r3, #0
 8006aec:	4249      	negs	r1, r1
 8006aee:	0002      	movs	r2, r0
 8006af0:	468c      	mov	ip, r1
 8006af2:	0018      	movs	r0, r3
 8006af4:	0021      	movs	r1, r4
 8006af6:	3930      	subs	r1, #48	; 0x30
 8006af8:	2909      	cmp	r1, #9
 8006afa:	d81a      	bhi.n	8006b32 <_strtol_l.isra.0+0xa2>
 8006afc:	000c      	movs	r4, r1
 8006afe:	42a7      	cmp	r7, r4
 8006b00:	dd23      	ble.n	8006b4a <_strtol_l.isra.0+0xba>
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	d009      	beq.n	8006b1a <_strtol_l.isra.0+0x8a>
 8006b06:	4663      	mov	r3, ip
 8006b08:	4282      	cmp	r2, r0
 8006b0a:	d306      	bcc.n	8006b1a <_strtol_l.isra.0+0x8a>
 8006b0c:	d102      	bne.n	8006b14 <_strtol_l.isra.0+0x84>
 8006b0e:	9904      	ldr	r1, [sp, #16]
 8006b10:	42a1      	cmp	r1, r4
 8006b12:	db02      	blt.n	8006b1a <_strtol_l.isra.0+0x8a>
 8006b14:	2301      	movs	r3, #1
 8006b16:	4378      	muls	r0, r7
 8006b18:	1820      	adds	r0, r4, r0
 8006b1a:	782c      	ldrb	r4, [r5, #0]
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7e9      	b.n	8006af4 <_strtol_l.isra.0+0x64>
 8006b20:	002e      	movs	r6, r5
 8006b22:	e7bc      	b.n	8006a9e <_strtol_l.isra.0+0xe>
 8006b24:	2c2b      	cmp	r4, #43	; 0x2b
 8006b26:	d001      	beq.n	8006b2c <_strtol_l.isra.0+0x9c>
 8006b28:	001e      	movs	r6, r3
 8006b2a:	e7c7      	b.n	8006abc <_strtol_l.isra.0+0x2c>
 8006b2c:	1cb5      	adds	r5, r6, #2
 8006b2e:	7874      	ldrb	r4, [r6, #1]
 8006b30:	e7fa      	b.n	8006b28 <_strtol_l.isra.0+0x98>
 8006b32:	0021      	movs	r1, r4
 8006b34:	3941      	subs	r1, #65	; 0x41
 8006b36:	2919      	cmp	r1, #25
 8006b38:	d801      	bhi.n	8006b3e <_strtol_l.isra.0+0xae>
 8006b3a:	3c37      	subs	r4, #55	; 0x37
 8006b3c:	e7df      	b.n	8006afe <_strtol_l.isra.0+0x6e>
 8006b3e:	0021      	movs	r1, r4
 8006b40:	3961      	subs	r1, #97	; 0x61
 8006b42:	2919      	cmp	r1, #25
 8006b44:	d801      	bhi.n	8006b4a <_strtol_l.isra.0+0xba>
 8006b46:	3c57      	subs	r4, #87	; 0x57
 8006b48:	e7d9      	b.n	8006afe <_strtol_l.isra.0+0x6e>
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	d108      	bne.n	8006b60 <_strtol_l.isra.0+0xd0>
 8006b4e:	9a05      	ldr	r2, [sp, #20]
 8006b50:	3323      	adds	r3, #35	; 0x23
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	9b02      	ldr	r3, [sp, #8]
 8006b56:	9803      	ldr	r0, [sp, #12]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <_strtol_l.isra.0+0xe0>
 8006b5c:	b007      	add	sp, #28
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b60:	2e00      	cmp	r6, #0
 8006b62:	d000      	beq.n	8006b66 <_strtol_l.isra.0+0xd6>
 8006b64:	4240      	negs	r0, r0
 8006b66:	9a02      	ldr	r2, [sp, #8]
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d0f7      	beq.n	8006b5c <_strtol_l.isra.0+0xcc>
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d001      	beq.n	8006b74 <_strtol_l.isra.0+0xe4>
 8006b70:	1e6b      	subs	r3, r5, #1
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	9b02      	ldr	r3, [sp, #8]
 8006b76:	9a01      	ldr	r2, [sp, #4]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e7ef      	b.n	8006b5c <_strtol_l.isra.0+0xcc>
 8006b7c:	2430      	movs	r4, #48	; 0x30
 8006b7e:	2f00      	cmp	r7, #0
 8006b80:	d1aa      	bne.n	8006ad8 <_strtol_l.isra.0+0x48>
 8006b82:	2708      	movs	r7, #8
 8006b84:	e7a8      	b.n	8006ad8 <_strtol_l.isra.0+0x48>
 8006b86:	2c30      	cmp	r4, #48	; 0x30
 8006b88:	d09e      	beq.n	8006ac8 <_strtol_l.isra.0+0x38>
 8006b8a:	270a      	movs	r7, #10
 8006b8c:	e7a4      	b.n	8006ad8 <_strtol_l.isra.0+0x48>
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	7fffffff 	.word	0x7fffffff

08006b94 <strtol>:
 8006b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b96:	0013      	movs	r3, r2
 8006b98:	4a06      	ldr	r2, [pc, #24]	; (8006bb4 <strtol+0x20>)
 8006b9a:	0005      	movs	r5, r0
 8006b9c:	6810      	ldr	r0, [r2, #0]
 8006b9e:	6a04      	ldr	r4, [r0, #32]
 8006ba0:	2c00      	cmp	r4, #0
 8006ba2:	d100      	bne.n	8006ba6 <strtol+0x12>
 8006ba4:	4c04      	ldr	r4, [pc, #16]	; (8006bb8 <strtol+0x24>)
 8006ba6:	000a      	movs	r2, r1
 8006ba8:	9400      	str	r4, [sp, #0]
 8006baa:	0029      	movs	r1, r5
 8006bac:	f7ff ff70 	bl	8006a90 <_strtol_l.isra.0>
 8006bb0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	2000000c 	.word	0x2000000c
 8006bb8:	20000070 	.word	0x20000070

08006bbc <__utoa>:
 8006bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbe:	0017      	movs	r7, r2
 8006bc0:	b08d      	sub	sp, #52	; 0x34
 8006bc2:	2225      	movs	r2, #37	; 0x25
 8006bc4:	0006      	movs	r6, r0
 8006bc6:	000d      	movs	r5, r1
 8006bc8:	a802      	add	r0, sp, #8
 8006bca:	4914      	ldr	r1, [pc, #80]	; (8006c1c <__utoa+0x60>)
 8006bcc:	f000 f83d 	bl	8006c4a <memcpy>
 8006bd0:	aa02      	add	r2, sp, #8
 8006bd2:	1ebb      	subs	r3, r7, #2
 8006bd4:	2400      	movs	r4, #0
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	2b22      	cmp	r3, #34	; 0x22
 8006bda:	d905      	bls.n	8006be8 <__utoa+0x2c>
 8006bdc:	702c      	strb	r4, [r5, #0]
 8006bde:	0025      	movs	r5, r4
 8006be0:	0028      	movs	r0, r5
 8006be2:	b00d      	add	sp, #52	; 0x34
 8006be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be6:	0014      	movs	r4, r2
 8006be8:	0030      	movs	r0, r6
 8006bea:	0039      	movs	r1, r7
 8006bec:	f7f9 fb12 	bl	8000214 <__aeabi_uidivmod>
 8006bf0:	4684      	mov	ip, r0
 8006bf2:	9801      	ldr	r0, [sp, #4]
 8006bf4:	1c62      	adds	r2, r4, #1
 8006bf6:	18ab      	adds	r3, r5, r2
 8006bf8:	5c41      	ldrb	r1, [r0, r1]
 8006bfa:	1e5e      	subs	r6, r3, #1
 8006bfc:	7031      	strb	r1, [r6, #0]
 8006bfe:	4666      	mov	r6, ip
 8006c00:	2e00      	cmp	r6, #0
 8006c02:	d1f0      	bne.n	8006be6 <__utoa+0x2a>
 8006c04:	701e      	strb	r6, [r3, #0]
 8006c06:	002b      	movs	r3, r5
 8006c08:	1b5a      	subs	r2, r3, r5
 8006c0a:	4294      	cmp	r4, r2
 8006c0c:	dde8      	ble.n	8006be0 <__utoa+0x24>
 8006c0e:	781a      	ldrb	r2, [r3, #0]
 8006c10:	5d29      	ldrb	r1, [r5, r4]
 8006c12:	7019      	strb	r1, [r3, #0]
 8006c14:	552a      	strb	r2, [r5, r4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	3c01      	subs	r4, #1
 8006c1a:	e7f5      	b.n	8006c08 <__utoa+0x4c>
 8006c1c:	08007098 	.word	0x08007098

08006c20 <__locale_ctype_ptr_l>:
 8006c20:	30ec      	adds	r0, #236	; 0xec
 8006c22:	6800      	ldr	r0, [r0, #0]
 8006c24:	4770      	bx	lr

08006c26 <__ascii_mbtowc>:
 8006c26:	b082      	sub	sp, #8
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	d100      	bne.n	8006c2e <__ascii_mbtowc+0x8>
 8006c2c:	a901      	add	r1, sp, #4
 8006c2e:	1e10      	subs	r0, r2, #0
 8006c30:	d006      	beq.n	8006c40 <__ascii_mbtowc+0x1a>
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d006      	beq.n	8006c44 <__ascii_mbtowc+0x1e>
 8006c36:	7813      	ldrb	r3, [r2, #0]
 8006c38:	600b      	str	r3, [r1, #0]
 8006c3a:	7810      	ldrb	r0, [r2, #0]
 8006c3c:	1e43      	subs	r3, r0, #1
 8006c3e:	4198      	sbcs	r0, r3
 8006c40:	b002      	add	sp, #8
 8006c42:	4770      	bx	lr
 8006c44:	2002      	movs	r0, #2
 8006c46:	4240      	negs	r0, r0
 8006c48:	e7fa      	b.n	8006c40 <__ascii_mbtowc+0x1a>

08006c4a <memcpy>:
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	b510      	push	{r4, lr}
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d100      	bne.n	8006c54 <memcpy+0xa>
 8006c52:	bd10      	pop	{r4, pc}
 8006c54:	5ccc      	ldrb	r4, [r1, r3]
 8006c56:	54c4      	strb	r4, [r0, r3]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	e7f8      	b.n	8006c4e <memcpy+0x4>

08006c5c <__ascii_wctomb>:
 8006c5c:	1e0b      	subs	r3, r1, #0
 8006c5e:	d004      	beq.n	8006c6a <__ascii_wctomb+0xe>
 8006c60:	2aff      	cmp	r2, #255	; 0xff
 8006c62:	d904      	bls.n	8006c6e <__ascii_wctomb+0x12>
 8006c64:	238a      	movs	r3, #138	; 0x8a
 8006c66:	6003      	str	r3, [r0, #0]
 8006c68:	3b8b      	subs	r3, #139	; 0x8b
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	4770      	bx	lr
 8006c6e:	700a      	strb	r2, [r1, #0]
 8006c70:	2301      	movs	r3, #1
 8006c72:	e7fa      	b.n	8006c6a <__ascii_wctomb+0xe>

08006c74 <round>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	004a      	lsls	r2, r1, #1
 8006c78:	0007      	movs	r7, r0
 8006c7a:	481f      	ldr	r0, [pc, #124]	; (8006cf8 <round+0x84>)
 8006c7c:	0d52      	lsrs	r2, r2, #21
 8006c7e:	1815      	adds	r5, r2, r0
 8006c80:	000e      	movs	r6, r1
 8006c82:	2d13      	cmp	r5, #19
 8006c84:	dc18      	bgt.n	8006cb8 <round+0x44>
 8006c86:	2d00      	cmp	r5, #0
 8006c88:	da09      	bge.n	8006c9e <round+0x2a>
 8006c8a:	0fcb      	lsrs	r3, r1, #31
 8006c8c:	07db      	lsls	r3, r3, #31
 8006c8e:	2200      	movs	r2, #0
 8006c90:	1c69      	adds	r1, r5, #1
 8006c92:	d101      	bne.n	8006c98 <round+0x24>
 8006c94:	4919      	ldr	r1, [pc, #100]	; (8006cfc <round+0x88>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	0019      	movs	r1, r3
 8006c9a:	0010      	movs	r0, r2
 8006c9c:	e017      	b.n	8006cce <round+0x5a>
 8006c9e:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <round+0x8c>)
 8006ca0:	412a      	asrs	r2, r5
 8006ca2:	420a      	tst	r2, r1
 8006ca4:	d101      	bne.n	8006caa <round+0x36>
 8006ca6:	2f00      	cmp	r7, #0
 8006ca8:	d012      	beq.n	8006cd0 <round+0x5c>
 8006caa:	2380      	movs	r3, #128	; 0x80
 8006cac:	031b      	lsls	r3, r3, #12
 8006cae:	412b      	asrs	r3, r5
 8006cb0:	199b      	adds	r3, r3, r6
 8006cb2:	4393      	bics	r3, r2
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	e7ef      	b.n	8006c98 <round+0x24>
 8006cb8:	2d33      	cmp	r5, #51	; 0x33
 8006cba:	dd0b      	ble.n	8006cd4 <round+0x60>
 8006cbc:	2380      	movs	r3, #128	; 0x80
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	429d      	cmp	r5, r3
 8006cc2:	d105      	bne.n	8006cd0 <round+0x5c>
 8006cc4:	003a      	movs	r2, r7
 8006cc6:	000b      	movs	r3, r1
 8006cc8:	0038      	movs	r0, r7
 8006cca:	f7fa f945 	bl	8000f58 <__aeabi_dadd>
 8006cce:	0007      	movs	r7, r0
 8006cd0:	0038      	movs	r0, r7
 8006cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd4:	2601      	movs	r6, #1
 8006cd6:	480b      	ldr	r0, [pc, #44]	; (8006d04 <round+0x90>)
 8006cd8:	4276      	negs	r6, r6
 8006cda:	1812      	adds	r2, r2, r0
 8006cdc:	40d6      	lsrs	r6, r2
 8006cde:	423e      	tst	r6, r7
 8006ce0:	d0f6      	beq.n	8006cd0 <round+0x5c>
 8006ce2:	2233      	movs	r2, #51	; 0x33
 8006ce4:	1b55      	subs	r5, r2, r5
 8006ce6:	3a32      	subs	r2, #50	; 0x32
 8006ce8:	40aa      	lsls	r2, r5
 8006cea:	19d2      	adds	r2, r2, r7
 8006cec:	42ba      	cmp	r2, r7
 8006cee:	41a4      	sbcs	r4, r4
 8006cf0:	4264      	negs	r4, r4
 8006cf2:	190b      	adds	r3, r1, r4
 8006cf4:	43b2      	bics	r2, r6
 8006cf6:	e7cf      	b.n	8006c98 <round+0x24>
 8006cf8:	fffffc01 	.word	0xfffffc01
 8006cfc:	3ff00000 	.word	0x3ff00000
 8006d00:	000fffff 	.word	0x000fffff
 8006d04:	fffffbed 	.word	0xfffffbed

08006d08 <_init>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d0e:	bc08      	pop	{r3}
 8006d10:	469e      	mov	lr, r3
 8006d12:	4770      	bx	lr

08006d14 <_fini>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr
